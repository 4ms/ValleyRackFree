%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: AmalgamPanelDarkAllRed2InkScape.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Dale Johnson
%%CreationDate: 29/12/2018
%%BoundingBox: 0 0 151 380
%%HiResBoundingBox: 0 0 150.0866 380
%%CropBox: 0 0 150.0866 380
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.1 x540 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 52 128 8%%BeginData: 11636 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0F27F8FD0927F8FD1727F87DFFF8272727F8272727F8272727F8%275227F827F827F827F827F8522727F827F827F827F827F8272727F82727%27F8272727F82752FFFD0E27FF7D272752275227525227A8275252275227%2752522752F8FD0B27F87DFFF827F827F827F827F827F827F8527DA827A8%7DFFA85227A87D7D52A8A85252A852FD04A852F827F827F827F827F827F8%F852FFFD0D277DFFA87D7D527D527D7DA8A87DA8527D52A8A8A8527D527D%52FD0B27F87DFF2727F8272727F8272727F82727A8277D7D7D277D277D7D%FF7D7D7DA8A87D7DA87DFD0552F8272727F8272727F827272752FF272727%F8272727F8272727F8272727F8FD0A2752A8A8FD0A27F8272727F8272727%F827F87DFFFD1B2752FD162752FF7D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D52A8FFF827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F8F852FFFD31%27F87DFFF827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F8F852FFFD3127F8%7DFF2727F8272727F8272727F8272727F8272727F8272727F827F827F827%2727F8272727F8272727F8272727F8272727F827272752FFFD3127F87DFF%F827F827F827F827F827F827F827F827F827F827F827F827277DF827F827%F827F827F827F827F827F827F827F827F827F82752FFFD12275252522727%275252FD0427525252FD1027F87DFFF827F8275227F8277D7D7D27F87D52%27F8277D7D7D27F8272752F827F87D7DA85227F8522727F87D527D522752%7D2727F82752FFFD04277DF8272752FF7DF8277DA8272727A87D52F82727%275227272752A87D7DF8277D27F82727A87D27F8A8A87DF827F87DFFF827%F8277D52F82727FF5227277D7D27F827F827277D527D2727277D2727F827%2727F87D7D27F8277D52F8277D7D5227F8F852FFFD042752522727A852A8%27272752FD0427F852FFFFA8A87DA8A8FF7DFD0627522727F87D52FD0427%522727F87DFF2727F827F827F8FD0527F827F8272727F827277D52FD047D%A8A87DF8272727F827F827F8272727F827F827F827272752FFFD182752FD%1827F87DFFF827F827F827F827F827F827F827F827F827F827F827F82727%52F827F827F827F827F827F827F827F827F827F827F827F82752FFFD0C27%52527DFD09275252FD0927527D5227F8FD0927F87DFFF8272727F827F827%F827527D52522727F8272727F8FD042752F827F8272727F827F827275252%522727F827F8272727F82752FFFD0527F827527D52522727F8FD0A275252%FD0B27F827277D527D2727F8272727F87DFFF827F827275252522727F827%2727F8272727F827F827F8272727F827F827F8272727F8272727F827F827%277D5252F827F8F852FFFD0427525227F827272752A852272752FD0F27A8%522727522752FD0427F85252272727F87DFF2727F8272752F8272727F8FD%047DA87DA87D27F827F8272727F8272727F8FD047DA8527D7D27F827F827%2752F827272752FF272727F85252FD052752A87DA8A77D527DFD0D27A87D%A8A87D527DFD0427F82752272727F87DFFF827F8272752F827F8FD062752%FD0427F8272727F8272727F8FD062752FD0427F827F8272752F827F82752%FF272727F85252FD0527F8272727F827F827F8272727F8272727F8272727%F827F827F827F827F8FD052752272727F87DFFF8FD042752F827F827F8F8%F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8FD%0427522727F82752FFFD04275252FD0527F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F8FD052752272727F87DFFF827F827%2752F827F827FD1DF827F827F8272752F827F8F852FFFD04275252FD0527%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8FD%052752272727F87DFF2727F8272727F8272627FD05F804F8F8F804F8F8F8%27F8F8F804F8F8F804F8F8F804F8F8F8272727F8272752F827272752FFFD%0B27F8272727F8272727F8272727F8272727F8272727F8272727F8272727%F8FD0927F87DFFF827F827F827F827F8272727F8272727F8272727F8FD04%2752F827F8272727F8272727F8272727F827F827F827F827F82752FFFD18%275252FD1727F87DFFF8272727F8272727F8272727F8272727F8272727F8%FD042752F827F8272727F8272727F8272727F8272727F8272727F82752FF%FD18275252FD1727F87DFFF827F827F827F827F827F827F827F827F827F8%27F827F8272752F827F827F827F827F827F827F827F827F827F827F827F8%F852FFFD18275252FD1727F87DFF2727F8272727F8272727F8272727F827%2727F8272727F8272752F8272727F8272727F8272727F8272727F8272727%F827272752FFFD1727F85252FD1727F87DFFF827F827F827F827F827F827%F827F827F827F827F827F8272752F827F827F827F827F827F827F827F827%F827F827F827F82752FFFD0B27F852527D527D52FD06277D7D52F8272727%F852527D527D52FD0B27F87DFFF827F827F827F827F87D272752FF7DA8A8%7DF827F827527D272752522727F82727FF7D7D7DA8F8527D52F827F827F8%27F82752FF27F8FD04275227277D27F852527D527D5227275252522727F8%27277D5252F852527D7D5252277DFF52FD0427525227F87DFFF8F852A8FD%047D277D5227F827F827F827277D5227F827F827F827F852525227F8F827%F827F852525227A852A87D7D27F852FF27277DA87D7DA87D272752FD0527%52527DFD0A27F827527D5227F8FD0527F8FD047DA87D52F87DFF2727F8FD%0527F827F827F827277D5227F8272727F827F827F827F827F827F8525252%2727F827F8FD0727F82752FF272727F8272727F8272727F827527DFD0627%52A8FD0427F8FD0527F827527D5227F8FD0727F827F87DFFF827F827F827%F827F82727525252F827F827F827F8527D5252A87D7D7D27F827F827F827%F8525252F827F827F827F827F82752FFFD0A277D52FD0A277D52A87DA8A8%FFFD0827F827527DFD0827F87DFFF8272727F8272727F87D2727F8272727%F8272727F8272752527D522752272727F8272727F827F8275252F827F827%2727F82752FFFD0727F85252FD1F2752FD0727F87DFFF827F827F827F827%5227F827F827FD05F827FD07F827F8F8F827F8F8F8272727F827F8525227%F827F827F8F852FFFD07275252F8FD0527F827F827F827F827F827F827F8%27F827F827F827F8FD06277DFD0627F87DFF2727F8FD04277DF827F82727%27FD05F827F8F8F827F8F8F827F8F8F827F8F8F8272727F8FD042752F827%F827272752FFFD0527F87DFD0827F827F827F827F827F827F827F827F827%F827F827F8FD07275252FD0427F87DFFF827F827F8525227F827F827F827%FD17F827F827F827F8525227F827F82752FFFD05277D52F8FD072720FD1B%27F87DFD0427F87DFFF8FD042752F827F8272727F8272727F8272727F8FD%042752F827F8272727F8272727F8272727F8FD042752F827F82752FFFD18%275252FD1727F87DFFF827F827F827F827F827F827F827F827F827F827F8%27F8272752F827F827F827F827F827F827F827F827F827F827F827F8F852%FFFD0D27F8FD0A275252FD0B27F8FD0B27F87DFF2727F8272727F8272727%F827275227522727F827F827F8272752F827F827F827F82727525252F827%2727F8272727F827272752FFFD0B27527D2752527D527D5252FD04275227%27522752527D527D5252527DFD0A27F87DFFF827F827F827F827F8275252%F827F827F8FD0427FD04527DFD0452FD0427F827F827277D2727F827F827%F827F82752FFFD0727F8527D52F8FD0927F8272752FD0F277D5227F8FD05%27F87DFFF8272727F827F8525227F827F8272727F8272727F8272727F827%F827F8272727F8272727F8272727F8527D27F8272727F82752FFFD06277D%5227F8FD1F27F8527D52F8272727F87DFFF827F827277D2727F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%275252F827F8F852FFFD3127F87DFF2727F827F827F8272727F8272727F8%FD0527F827F827F827F827F827F827F827F8272727F8272727F827F827F8%27272752FFFD12277D7D522752525227525252F8527DFD1127F87DFFF827%F827F827F827F827F827F827F827F8277D7D52A8A87D7DA87DA87D2752FF%2727F827F827F827F827F827F827F827F82752FFFD12277DF87DA8A827A8%A87D527D277D7D7DF8FD0F27F87DFFF8272727F8272727F8272727F827F8%27F8272727F8FD0727F8FD0527F827F8272727F8272727F8272727F82752%FFFD3127F87DFFF827F827F827F827F827F827F827FD05F827F8F8F827F8%F8F827F8F8F827F8F8F8272727F827F827F827F827F827F8F852FFFD0F27%F827F827F827F827F827F827F827F827F827F827F8FD0D27F87DFF2727F8%272727F8272727F8272727FD05F827F8F8F827F8F8F827F8F8F827F8F8F8%272727F8272727F827F827F827272752FF272727F8275252F8FD0727F827%F827F827F827F827F827F827F827F827F827F8FD0727F87D52272727F87D%FFF827F827F8275252F827F827F827FD17F827F827F827F8522727F827F8%2752FFFD07277D52F8FD0527F827F827F827F827F827F827F827F827F827%F827F8FD06277D52FD0527F87DFFF8272727F827F8277D52F827F8272727%F8272727F8FD042752F827F8272727F8272727F8272727F87D5227F82727%27F82752FFFD09277D52F8FD0C275252FD0E277D52FD0727F87DFFF827F8%27F827F827F82752522727F827F827F827F827F8272752F827F827F827F8%27F827F827277D5227F827F827F827F8F852FFFD0927F827527D52522727%F8FD06275252FD0727F852527D527D52FD0927F87DFF2727F8272727F827%2727F827F827277D52522727F827F8272752F827F827F8FD05522727F827%2727F8272727F827272752FFFD0F27F8272752527D5252F8275227275252%7D52522727F8FD0D27F87DFFF827F827F827F827F827F827F827F827F827%F82727FD04527DFD04522727F827F827F827F827F827F827F827F827F827%52FFFD1827525252FD1627F87DFFF8272727F8272727F8272727F8272727%F8272727F8272727F827F827F8272727F8272727F8272727F8272727F827%2727F82752FFFD3127F87DFFF827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F8F852FFFD3127F87DFF2727F8272727F8272727F8272727F8272727F827%F827F827F827F827F827F827F827F8272727F8272727F8272727F8272727%52FF272727F8FD0927F8FD04277D7D52FD0827F87D7D52F827F8FD0727F8%27F8272727F87DFFF827F852F827F827F8272727F8525227F8277DA852A8%FD057DA87D277DA85227F8FD0527F8272727F8525227F82752FF2727277D%52F87D527D7DA85252A8A8272727A8277DA8A827FFA87D52A8277DA87DF8%27277DF852FD057D52A8A82727F87DFFF827F87D52277DA87DFF7D7D27A8%7D27F8FD04275227272752FD0527522727F8277D2727A87D7D7DA827A87D%27F82752FF272727527D27525252277D27272752FD0627F8272727F8FD05%27F8FD04277DFD0652272727522727F87DFFF827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F8F852FFFD3127F87DFF2727F8272727F8272727F8272727%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827%2727F827272752FFFD3127F87DFFF827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F82752FFFD3127F87DFFF8272727F8272727F8272727F8272727F827%2727F8272727F827F827F8272727F8272727F8272727F8272727F8272727%F82752FFFD0D27F8FD0A2752FD0427F8FD0F27F8272727F87DFFF827F827%2727F827F827F827F8272727F827F8272727F82752A87D272752F827F827%F827F8272727F827F8272727F827F8F852FFFD04277D527D52FD05277D7D%52FD04277DFD04277D5227A8A852FD0627527D52FD04277D527D5227F87D%FF2727F8527D7D5252F827F8275252277DF827F8277D52F8277D7DF8277D%A8FD0427F827277D277D2727F852FD047DF8F852FF272727FD0452FD0427%527DFD0627F8527D2727FF7D52F8525252F8FD04277D52FD06277D525227%27F87DFFFD192752FD182752FF7D527D527D527D527D527D527D527D527D%FD05527DFD05527D527D527D527D527D527D527D527D527D527D527D52A8%FFF827F827F827F827F827F827F827F827F85227F82727F8FD0427F8F827%F827F827F827F827F827F827F827F827F827F8F852FFFD112752A827A827%5227A852A8275227522752FD1027F87DFFF827F827F827F827F827F827F8%27F827F8277D7D52277D7D7D527D7DA87D7D527D27F827F827F827F827F8%27F827F827F8F852FFFD1127F87DFF5252A8A8A852A8A8A87D7DFF7DF8FD%0F27F87DFF2727F8272727F8272727F8272727F8FD0427A8F87DA8A8FD04%7DA87D27FF2727F8272727F8272727F8272727F827272752FFFD1B27F827%277D7DFD1127F87DFFF827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F8272727F827F827F827F827F827F827F827F827F82752%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2018-12-29T14:01:39Z</xmp:CreateDate>
         <xmp:MetadataDate>2018-12-29T14:01:39Z</xmp:MetadataDate>
         <xmp:ModifyDate>2018-12-29T14:01:39Z</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>104</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4VirsVdirO/y9/LeHzTo&#xA;mtX09w9vcQL9W0KJSoF1qHoyXPoGob/dMDeG7Lv2xVQ8v/lF508waPa6rpcVtLBeiY2kMl1BDNJ9&#xA;WbjLwjlZCeHU+2KqL/lb5oj15NFkexS5mt0vLad762S3nhlb04zDKzhZC0g4ALU1xVM5Pyk1SWx0&#xA;aG1UwazcLqj60l7NFFbWq6XOInYuQAir+0Sx39sVQMf5S+b5Ndm0NPqR1KGOCRYWvbZPWNzH6kKQ&#xA;F3X1WZf5Kj36YqqaX+TfnjU9Mi1G1htfRlga6Ec13bwSrBHK0M0jxyujKkTJ8bHYYqxzzL5b1Xy5&#xA;q0ml6miLcxqkivE6yxSRyqHjkjkQlWVlYEEYqleKuxV7F/zit/5M6X/tm3H/ACcixV47irsVdirP&#xA;/Lv5x675Z0TRtK0CCOzi0+4ku9ReRIbg3k0jijVliZoOMSiP4GrTeuKqo/Ni1i1TSrqz0T6va6S2&#xA;smGz+s1HHWVkUKGEK8RB6u3w/FTtiqp5U/OCHQ1s1l0X619U0yLTBKlwIZv3N5Nd80kMMvBX+scG&#xA;UDcD7WKp/pH5u6Jr+tS2+uafBp9nefpVJLie6nCfVtUYSvbloIJGVxKqkS8aU244qrS/nh5f0Hzb&#xA;fTaRpP6T05f0clndRztauy6fbLDwLSwyyNCzCoBCnap8MVYbcfmiZZp5f0bx9bRLzROPr1p9cu5b&#xA;r1v7v9n1+PDvStR0xVj/AJq8y/p+fTpfq31b9H6bZ6bx5+pz+pwiL1PspTnxrx3p4nFUkxV2KvYv&#xA;+cVv/JnS/wDbNuP+TkWKvOP8cedf+pg1L/pMn/5rxV3+OPOv/Uwal/0mT/8ANeKu/wAcedf+pg1L&#xA;/pMn/wCa8Vd/jjzr/wBTBqX/AEmT/wDNeKu/xx51/wCpg1L/AKTJ/wDmvFXf4486/wDUwal/0mT/&#xA;APNeKu/xx51/6mDUv+kyf/mvFXf4486/9TBqX/SZP/zXirv8cedf+pg1L/pMn/5rxV3+OPOv/Uwa&#xA;l/0mT/8ANeKu/wAcedf+pg1L/pMn/wCa8Vd/jjzr/wBTBqX/AEmT/wDNeKvWP+cZvMnmHU/zHkt9&#xA;R1S7vYF0+d1iuJ5ZUDB4wGCuzCtCd8VeGYq7FXYq7FXYq7FUVeadPaW9jPIylNQga4hCkkhFnkgI&#xA;aoG/KBjtXamKoXFXYq7FXYq7FXsX/OK3/kzpf+2bcf8AJyLFXjuKsh88+Vrjy75gu7T6rcQaf60i&#xA;afNcIyiWNCPiRyqq/wBobr44qzDzZ5T8rWH5a6f5ttNImiuvMCwQQwO8vo2EkJcTzKTIzuLv0qxC&#xA;SoC8v8nFUtj8l+XpPyxfzBzl/TEVv9ZKJKWqDqBtByg9Hj6XBTWT1qh+I40bFUu8jX/lKys9Wl12&#xA;K1uLxY1bRoLqGaVTcKkhPqGLb02X4KH/AHYUb7KscVVPMvlC/vdXmuvL2ktF5fks7jUNLcOpD6dY&#xA;co5bl2cq3MmIsysA1TQLuuKoSfR9U1pNC0vTbWSe/tNNlNzCV9P0wLu6uas0nBQDFIrA13qAN8VT&#xA;3yVN+Xtnofp+aooRqDTtIyy2900raeyJzjjZKIJ5Dvbv9lfi5MKriqRadpuj63+ZdnpkTL+htT1i&#xA;K2RrVXiX6tPciMekJRzX4G25CvjiqTmzuNI1WBNZ06Uek8cs+n3KyW7SRBgSh+xIodRSo38MVZX+&#xA;Zmh+TtDSwtdBBuJdS56st27SVisbr/eK04luJZIwWkYitTSu2Kon8wvI/l3Q/Llhf6a0zXUj2sV0&#xA;GlMqhp9OhvW9RTDF6TEz/u+LuGWvQqRiqf8A/OK3/kzpf+2bcf8AJyLFXjuKqk1zcTBRNK8gX7PN&#xA;i1K+FcVTu+89+a76C/t7q+9S31KK2t7uD0oRGY7Kn1dURUCxenTYxhe/icVSISyheIdgtONKmnEm&#xA;tPlXfFVuKvStJ/O/VtN8s2/lyLToHsIdMutNd3asrNdevycPx+GMmaMvHT4jEvxCuKp1d/nfd28v&#xA;12bR5jBq9q01sP0i7S/32oRMJnMX7yESXcnCEqOIRNzirC/zK/MSbzxqVnfS2YsmtYDCYw6yAlpG&#xA;kbiRHEVSrfCrcqeOKsQVmRgykqymqsNiCO4xVuWaaZ+crtI/TkxLH7ziqJ1HVtQ1Jrdr2X1Ta28d&#xA;pAeKrxhhHGNPhArQdzviqGaaVgQzswNCQSSPhFF+4bDFXsH/ADit/wCTOl/7Ztx/ycixV47iqb2H&#xA;lPW7y1S9MK2mnPXhf3jrbW7U68JJSokIp9lKn2xVEfVvJ2nkfWLqfW5x1iswbS2rX/f86tM3uPQX&#xA;2bFVG78z3UlrJZ2Nra6XZSrwlitI/jdagkPcSmW4YGm6mTj7Yqk2KuxVNtbuYJdN8vxxSK729g8c&#xA;6g1KOb+6kCt4Hg6t8jiqU4qq2l3c2lzHc20jQ3ELBo5FNCCMVTo+Y9Mvtta0iGVz1vdP42Fx0oKq&#xA;itbN4n9zyP8AN3xV3+HtJvt9F1eJ5D0stRC2M/vSRme1YD3mVj/LiqV6no+q6XOsGo2ktpK6h41l&#xA;QrzQ9HQnZlPZhscVer/84rf+TOl/7Ztx/wAnIsVeO4qnfmYkwaHU1ppsYH/I6XFVDytdafZ+ZtIv&#xA;NTi9bTba9t5r6Ljz5wRyq0q8T9qqAimKvVNU1H8rtYa+fWdUi1LUodLeOC7aO5jV7ljcPGbeSOG0&#xA;bkjej8M8bj4uCtxQ1VY/5/vPy8vbXUm0iKNtTa6uLqHUVa6Mswl1S8AidZGMZX6n6Dg8Q3iTuMVe&#xA;ccW8DiruLeBxVEaa8EOoWs11EZbaOaN546V5RqwLLQ9ajFXteoav+Umuaxz1vU4r2NIrswu0V1HG&#xA;kc8we3jieKG1kSSGMt8EnqINlU7HFWLeabv8ubvQdS+qpE+temk1neg3XrNKs8EfpHk3pcPq7Stu&#xA;tagb9sVeaYqnetEny95eBOwhuaD/AKOnxV6P/wA4rf8Akzpf+2bcf8nIsVeO4qnfmX+40T/tmx/8&#xA;npcVY3qMjpbKUYqS+9DTscVS36xcf79f/gjirvrFx/v1/wDgjirvrFx/v1/+COKu+sXH+/X/AOCO&#xA;Ku+sXH+/X/4I4q76xcf79f8A4I4q76xcf79f/gjiqePu1T7fqxVOtZ/5R/y//wAYbj/qJfFXo/8A&#xA;zit/5M6X/tm3H/JyLFXjuKoq+1Ge8S1WVVUWkC28fEEVRWZgWqTvVziqAu7c3EARXVSGr8VelKdg&#xA;cVQf6Jm/37H/AMP/AM04q79Ezf79j/4f/mnFXfomb/fsf/D/APNOKq9x5cv7eG1mmaNY7yIz2zVJ&#xA;5RiR4Sdht8cTDfwxVQ/RM3+/Y/8Ah/8AmnFXfomb/fsf/D/804q79Ezf79j/AOH/AOacVTJqctjU&#xA;eOKom51Ge4s7O0dVEdkrpEVB5ESOZDyqT3btir1j/nFb/wAmdL/2zbj/AJORYq8dxV2KuxV2KuxV&#xA;2Kp35g/45Plr/tmyf91K8xVJMVdirsVdirsVexf84rf+TOl/7Ztx/wAnIsVeO4q7FXYq7FXYq7FU&#xA;78wf8cny1/2zZP8AupXmKpJirsVdirsVdir2L/nFb/yZ0v8A2zbj/k5Firy7RPL2q6014unxeqbC&#xA;1lvbncDjDDTkd+pqwAHc4qyOf8ovOdvLNFcRQQyxyCGNZJkT1ZGWJkWJj8LF/XULv9rbriqFvvKj&#xA;HyHpGv2NpJIWkvF1a5UlkQRyRrByFaJXkfnirKNK89fl/b6Rp1tc2KvdWtssWoSHT7aX60QsfJQz&#xA;kFCyL6PPr8HPrI1FUn863+m+cdXso/KWlMjxRTCeGOBI3IEzOsrtHReCxFftfYoasRiqTfUfLWji&#xA;uoTrrOoAVFjZuRaRt4T3S7yU7rBse0uKqknm+31FUtdc0u3lsYl9Oz+oolnPax8i/CF0Uq68mLET&#xA;K9SSahiWxVRm8qNdQyXfl65Gr2sYLSQKvp30SjcmW1q7EAdXiZ0HdhirM/Lfnj8vrPRNLtL+zrqF&#xA;rGFv7z9H2s/rj6zHJ6dJGH2bZZIOZ3PKvviqDm1Pyd5q8y+TNLt7AWtr9egs9UBVImkhle3jP72P&#xA;ieNA9K/EpqeR5bKoPzF5LttQ81aZpflC3Eq6np8d5DxdvRkYq7v6RmZ5FA4enxc19QEeGKoW1/Kn&#xA;zdcWK37RwW9m8EFzHcTzLGjR3Q/dfEdga/Ca0oeu2+Ks2/5xet5rb81rq2nXhNDYXUcqVBoySxBh&#xA;UbdRiry7QPNXmDy+8j6NeNZvMYzMUCnmImLKj8geSEn4kPwt+0Diqaj80vPfFlbU/UUtJIokgt5O&#xA;DzP6jNFzjb0zz+JSlOLbrQ4qxq0s7u8uY7W0he4uZjxigiUu7MeyqtScVT39CaLpHxa/dfWLxTvo&#xA;1g6tIP8AjPdUeKL/AFU5v2IXriqE1LzPf3dr+j7dI9O0mtRp1oCkbEGoaZiWknYdmlZiO1BtiqY+&#xA;XfIk+vaJc6jZahAbq3nitV0wpN60k9yJDbxo3D06yeg9Pi+fXFVNfy487tYw3yaTM9tO0CxMhRmJ&#xA;uhEYaorFxz+sRdR+0vjiqUX+n6toeqNbXaSWWoWxRwAaMpIDo6Op6FSGVlO43GKpr/iSw1UFPMtq&#xA;bi4Y/wDHateKXo95VPGK58Tzo5/35iqhe+VbpbSXUdLmTVtKh3lurcESQr/y8QN+9i605EcCfssc&#xA;VQmieYda0K5kutIu3srmWP0mnioJAnNZKK9OS1aMVK0qKjoSCqnkP5qee4kmjGoq8E7rLJby21rL&#xA;DzREjUiKSJo1osKdB2r1xVnP/OLk0s/5qXM0zF5ZdPuXkc7lmaWIkn5nFXjWKuxVlGsXVz5e01PL&#xA;tpI0F7Onq+YJIzxdnkAKWbMN+EKULr/vxmBrxXFWKySRxx+pI3FahehO5BPb5YqpfXrL/fp/4E4q&#xA;nfl7zuujx/VUkb6nLfWV/cGIFJ+dg0hj9KQhghpM25U70xVlt1+fup85rjT4obS/uNQmvmuyheRI&#xA;nmt54rWM/DSNTZxhh+0AOm9VWGeZvOU3mTWp9X1Kfnd3AQNT1WAWNQigGRpH6L3Y4qlX16y/36f+&#xA;BOKo60vL3T7xLmznktrqBqxzwsUdSNqhloRiqdeZETUrK18yW8aIbo/VtViiQIkd7GteYVdlW4jH&#xA;qDYDnzAFFxVj2KvYv+cVv/JnS/8AbNuP+TkWKvHcVT/yrBDa/WPMV2iva6TxNvE4qs189fq0RBBD&#xA;KpUyuDsUQjuMVSOeea4nknndpJpWLyyMaszMasxJ6knFUHqX+8X/AD0X/iLYqlOKuxV2KuxV2Ksh&#xA;l/vX/wBY/rxVOPK99aJczaXqDiPS9WQW9xKwqIZAeUFz7elJTlTcoXX9rFUsv7G6sL64sbuMxXVr&#xA;I0M8ZpVXQlWG23UYq9b/AOcVv/JnS/8AbNuP+TkWKvHcVR95qzz6XYaakYhtrL1HYA1Ms8zVeVvf&#xA;gqIB4L7nFUBirjQrxZVZSa0YBhUfP54qt9OH/fUf/AJ/TFXenD/vqP8A4BP6YqmusadYW+naHNDb&#xA;xrJeWLzXLcQeUgvbmENv0+CJRt4YqlXpw/76j/4BP6Yq704f99R/8An9MVXEkkk9TucVdiqP1fV3&#xA;1RrWWaMLdQW8dtPODvN6NVjdh2YRBUPjxr1rir1P/nFb/wAmdL/2zbj/AJORYq8dxV2Kpjo2g3uq&#xA;vIYikNpbgPeX85KW8CHYNI9D1/ZVQWY7KCcVR0sfkTn9XSfUgI/hbUFjgkWU92W2ZoWQV6AzE/Kt&#xA;Aqs/Qvl6fe08wRRDsl/b3ELknt/o63ife+Ku/wAHas+9pNZXoP2Rb3ts0jU8ITIs3/CYqnOu+S/N&#xA;TaZ5dV9LuIBFp8iSyXK/V41Y3924VpJuCA8WDbnoQe+KpN/hUxf73avplmO3+ki76/8AMCt3irv0&#xA;f5Qg2n1i5uXHazswYz/z0uJoHH/IvFVeLR/L+sL6GhSz22qKf3dlfyREXQ/4plVYlSTwjf7X7Lcq&#xA;LirH54J7eaSCeNop4mKSxOCrqymhVlO4IOKrMVexf84rf+TOl/7Ztx/ycixV47iqe6boVnFZR6tr&#xA;szW2nSVNpaxU+tXfElT6QNRHHyBUyuKDfiHIIxVDaz5gudRSO1jjSy0q3JNppsFREhOxdiSWkkYf&#xA;akcknpsKAKpXirsVdirsVdirsVdirIoNcsNXhjsvMhYSxqI7TXI15zxBRRUuF6zxAbfzoPskgcCq&#xA;lesaNeaVcLFccJI5UEtrcwtzhmiJIEkTjqKgjxBqCAQRir1T/nFb/wAmdL/2zbj/AJORYq8dxV2K&#xA;uxV2Ksx/L38v4vNovnmvpbGKykto3kigjnVRcs4MspkntgkUfp1ZgWPtiq4/lN5qXSxq7NaR6U1u&#xA;90l9JcIkTRpJHH9pqfExuI+IPXlTrUYqrr+S/ngyGN47SJ/ShliEt1DGJBOs7KqM7BSwFnLyFei1&#xA;+zviqj5c/K3WdX85zeV55o7Oe2g+sTXa/wCkRBJEQ27KUNCkzzxANWgDcu2KsOmhlgmkgmQxzRMU&#xA;kjYUZWU0II8QcVWYq7FXYq9i/wCcVv8AyZ0v/bNuP+TkWKvHcVdirsVad4405yOEWoFSCdzU9gfD&#xA;FVWLXfRsLiwju1W0u3ikuIuBPJoOfpnkU5Dj6jdDiqeXv5qeaL3Q10O51hX01YktxF9XjVzHG0Lp&#xA;ylWISsQbWL4i1aKBWmKq97+cXnG9lSW51pXkjKlCLWFd1S4Sp4wipK3s1Sepap3oQqlzfmDrpkup&#xA;V1dopb2O1guZYU9J2jso1jt05xorKEVF6H4qVapxVLdT10anqNzqN7dJJeXkrz3MgjKBpJCWZuKI&#xA;qipNdhiqxlKsVPUGhxVrFXYq9i/5xW/8mdL/ANs24/5ORYq8dxVNE0RrnSG1CwkNy9qCdTteNJIF&#xA;5UWUCp5xGoBcfZbZgKqWVSvFUNqX+8X/AD0X/iLYqlOKuxV2KuxV2Kshl/vX/wBY/rxVfa2tzd3M&#xA;VraxNNcTMEiiQFmZmNAABiqI1axtLG4W2hulu5Y1pdyR0MKy1NUicE+oqigL9Ca8arRiq9V/5xW/&#xA;8mdL/wBs24/5ORYq8dxVE6Zqd9pl9FfWMphuYSSjgAihFGVlNVZWUlWVhQjY7YqnWo6XZ6vZS63o&#xA;UPpGEc9W0hKsbYk09aGtWa2Yn5xn4W24syrG2VHTg6h1qDQ+Ir/XFVn1a1/3yv4/1xV31a1/3yv4&#xA;/wBcVTLVdG021sNGnihHO+s3uJ6kkc1vLiAU32HCFcVS36ta/wC+V/H+uKu+rWv++V/H+uKo2xsL&#xA;/U76OzsYHuby4bjFDEpZmJ8AMVTvULux0K0k0nSpUudSlUpqurxnkoBFGtbRv9970kkH950HwfbV&#xA;Y3ir2L/nFb/yZ0v/AGzbj/k5Firx3FXYqrWV9e2Nyl1ZXElrdR7xzwu0ci1FDxZSCNsVTf8AxfeT&#xA;7atZ2mrg9XuouE5Pibm3MFwx/wBZyMVd/wA6XeD/AI/dHlPh6d9AT/07SRr/AMjDirv8IXdwK6Te&#xA;WerA9EtpuE5PgttcCCdz/qIcVTbWfJ3mmbTfL6fou4hFvp8kdzJcIbeKJv0jdnjLJNwSM0IPxEYq&#xA;lR8v6NZn/ctrkCuPt22nIb6Yf7MGK1P+xnOKtfpXyxZ/7w6MbyQbevqc7utf5lhtvq4X5O7jFVK5&#xA;83+YZ7eS1S6+qWco4y2lkiWcLqe0kdusav8A7IHFUnxV2KvYv+cVv/JnS/8AbNuP+TkWKvHcVdir&#xA;sVdirsVdiqrNdXU0cUc0zyRwLwgR2LBFrXigJ+EV8MVUsVdirsVdirsVexf84rf+TOl/7Ztx/wAn&#xA;IsVeQQQTzzJDBG0s0h4xxoCzMT2AG5xVZirsVRbaPq6acmptY3C6bIeMd6YnEDNUrQSU4E1Ujrir&#xA;IvIP5eXfnE3gt7r6v9Ue2jNIJZyTdMyKzCIEqi8Kux2A3xVT/wCVZecWj9eO1he0MUlwt4Lu1WAx&#xA;QyRxO3qPKqr8VxH8LUb4htiqrB+U/n64J9HTFcCOOYMLm14skwlKcG9Wjn/RpKhakcd6Yqr+WPyq&#xA;17Wdb1PRpq2d9pcEdxNCkZundZnjVDGIC3JSsyvyUkcd8VYrq+my6Xq17pkrpLLYzy20kkR5Rs0L&#xA;lCyHaqkrtiqHngnt55IJ42hnhYxyxSAq6Opoysp3BB2IOKrMVRZ0jVRpw1I2U405m4Le+k/oFq0p&#xA;6lOFainXFXq//OK3/kzpf+2bcf8AJyLFXmflLV7bR/M2mapco729ncJNKkVC5VTU8eRAr8ziqeeW&#xA;/MHkzQrrVla0u9TtNSthYRyTLDFLFDMD9YlCcpl9RWCenRh3+Je6rMrr85/KU9tME0ee1ledp5Yo&#xA;ViEN2oUosVwC3wrInH1KBtxypU4qxGTz/aP+XyeVRbNHMlmkBvFVCzuupz3rRMSf7lkmRthy5p/K&#xA;TirGLLXNRstK1DTLdwlrqZiN2KfEfQLFAD2Hxmvjiqe6j+Z/mzUNAi0K6liaxitks0AiAb0Y3t3U&#xA;V6bGyi6Dse5JxVFav+cPnTVpY5r2WB5InjkDCICrxLcqpO//AC/S7DbpTYYqgLX8w9eg1C8vmjtb&#xA;l761tbK5huIRJE0ViIRB8BNKr9WjPuRiqQajqF5qWoXWo3snq3l7NJcXMpAHKWVi7tQUAqxJ2xVn&#xA;cfnnypafmRd+breG9u7W+mvLq5064jt0Be7kZhEatOjInPlUr1UbdwqnUP5x6BBJAPqN1cosYieS&#xA;biDGpS2jYRpHIgdSbVpSkhKMzlWFKsyrGYvP1kv5fSeVjbOlw1r6IvUCklv0h9bMbVNfSZeNafFz&#xA;UdVJxVlf/OK3/kzpf+2bcf8AJyLFXjuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV7F/zit/5M6X/ALZt&#xA;x/ycixV47irsVdirsVdiq6SKSJuEiFHoDxYEGjCoND4g1xVPNU8keYdN0Ya1cLaSaYZ1tfrNrfWV&#xA;2PWZC4jItppWDcRXpiqUXVhfWgjN1bywCUcovVRk5L4ryAqMVUMVdirsVdir2L/nFb/yZ0v/AGzb&#xA;j/k5FiryjSWsE1G3e/eSO0Rw0rQxrM9F3ACO8KmpFDVh/DFWe6z+Y+iXmnXsUX1trm/SaOdZIIVS&#xA;hE4hPNZWJp6qV+EUptXFXntklk9yi30ssFqa+pLDGs0g2NOMbSQg70/bH8MVZWfOFjaQWmmWM91P&#xA;pEGmXtnOk0MUJkubr60Y5DGsswojXEe/Ovw9OmKsOxVkPnLUtA1S7g1DTZ7prmSC3hu7a4t44o42&#xA;t7aOD93Kk8xkDGMndEpiqefmHdeXW0jSdK8ua9a32jaREEjtEivYrma6nHO6u5RNbxRDk44qPUJC&#xA;BffFW/zF/MHSvM+lWVnZQz2xs5zIVkAKyq1rDFzZjJIUdXiYcVHEqQdmrVVg1qtq1xGt1I8VuT+9&#xA;kiQSuo8VRniDf8EMVZdB5w07TYtPsNOuLubTIILqO9WW3ihMslwJOB4LNOCF5ruW7YqxC3W3aeNb&#xA;l3jtywEskaCR1XuVRmjDH25D54q9OufzN8umGb0GvjKyvDGj2tui+iRLwBYTsRT1V24/s9cVTD/n&#xA;Fb/yZ0v/AGzbj/k5Firzj/HHnX/qYNS/6TJ/+a8Vd/jjzr/1MGpf9Jk//NeKu/xx51/6mDUv+kyf&#xA;/mvFXf4486/9TBqX/SZP/wA14qyjy7c+cNe8r6reWXmLV31zTbmzVbMXcxSS2vHMHIDly5JO0YO9&#xA;KN0xVM9Y0fz9Jrmu2flnzPe39pokkkJWfVQl5O9pGGumht/VWR1Rg1KL08TiqO1vy/5whGpQaP5j&#xA;1q81GC70azsbdryQeq2q2P1l+R5KBxfZTUCnXFUi1XR/zl023uLmXV72e3t445WmtdTNwrJLMbas&#xA;ZilbnwnHpuB9k0r1GKpDrmv/AJiaJq91pOoa9qCX1lIYblEvpZArr9peSSFTQ7GhxVA/4486/wDU&#xA;wal/0mT/APNeKu/xx51/6mDUv+kyf/mvFXf4486/9TBqX/SZP/zXir1j/nGbzJ5h1P8AMeS31HVL&#xA;u9gXT53WK4nllQMHjAYK7MK0J3xV4ZirsVdirsVZR+XXnu78k+YTrFvbLeBoJIJLaRuKtyo8TE8X&#xA;/u5kSTp+z264qyDyT+cK+W9BuNNm0j67czyXUrXsdwsDSNdw+kfrAMMzS+n9pPiXFURD+d7QXBvY&#xA;dFVdQZ9JuHma5LIbrSozbs/p+mPgnt24cOXwn4uR6Yqnfl/85LK783x65fKNP0rSdNu1l028uJLx&#xA;rySVhJHDCBFGqkzpEaEUAWpNcVeN397c399cX105kurqV555D1aSRizN9JOKqGKuxV2KvYv+cVv/&#xA;ACZ0v/bNuP8Ak5Fir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>150.000000</stDim:w>
            <stDim:h>380.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>AlteDIN1451Mittelschrift</stFnt:fontName>
                  <stFnt:fontFamily>Alte DIN 1451 Mittelschrift</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 000.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>din1451alt.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:DocumentID>xmp.did:d5e206a3-7d23-4384-ae92-42d84eb673d2</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:d5e206a3-7d23-4384-ae92-42d84eb673d2</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:890483bc-d96a-4cbf-be6b-bdee55a19096</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:890483bc-d96a-4cbf-be6b-bdee55a19096</stEvt:instanceID>
                  <stEvt:when>2018-12-04T00:35:45Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a6b422b0-ebe1-48b5-a772-ef1fb0fa2bb2</stEvt:instanceID>
                  <stEvt:when>2018-12-24T14:58:47Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d5e206a3-7d23-4384-ae92-42d84eb673d2</stEvt:instanceID>
                  <stEvt:when>2018-12-29T14:01:39Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:a6b422b0-ebe1-48b5-a772-ef1fb0fa2bb2</stRef:instanceID>
            <stRef:documentID>xmp.did:a6b422b0-ebe1-48b5-a772-ef1fb0fa2bb2</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:890483bc-d96a-4cbf-be6b-bdee55a19096</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -380 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 380 li
150.087 380 li
150.087 0 li
cp
clp
.0864258 .00015821 mo
150.087 .00015821 li
150.087 380 li
.0864258 380 li
.0864258 .00015821 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.708217 .647669 .637629 .677302 cmyk
f
56.7622 373.933 mo
52.562 361.133 li
54.562 361.133 li
57.4619 370.833 li
57.4619 370.833 li
60.3618 361.133 li
62.3618 361.133 li
58.1621 373.933 li
56.7622 373.933 li
cp
0 0 0 0 cmyk
f
68.562 370.733 mo
68.562 370.033 li
66.4619 370.033 li
65.4619 370.033 64.8618 370.433 64.9619 371.133 cv
64.9619 371.433 65.062 371.733 65.3618 371.933 cv
65.6621 372.133 66.062 372.333 66.6621 372.333 cv
67.4619 372.333 67.9619 372.233 68.2622 372.033 cv
68.3618 371.933 68.562 371.433 68.562 370.733 cv
cp
68.562 373.933 mo
68.562 373.133 li
68.562 373.133 li
68.3618 373.433 68.1621 373.633 67.7622 373.833 cv
67.3618 374.033 66.9619 374.033 66.3618 374.033 cv
65.3618 374.033 64.562 373.733 64.062 373.233 cv
63.4619 372.733 63.2622 372.033 63.2622 371.233 cv
63.2622 370.433 63.4619 369.833 63.9619 369.333 cv
64.4619 368.833 65.1621 368.533 66.1621 368.533 cv
68.6621 368.533 li
68.6621 367.533 li
68.6621 366.733 68.062 366.333 66.8618 366.333 cv
66.4619 366.333 66.062 366.333 65.7622 366.433 cv
65.4619 366.533 65.2622 366.733 65.1621 367.033 cv
63.7622 365.933 li
64.4619 365.033 65.4619 364.533 66.7622 364.633 cv
67.8618 364.633 68.7622 364.833 69.4619 365.333 cv
70.1621 365.833 70.4619 366.533 70.4619 367.733 cv
70.4619 373.933 li
68.562 373.933 li
68.562 373.933 li
cp
f
72.3618 371.733 mo
72.3618 361.133 li
74.1621 361.133 li
74.1621 371.633 li
74.1621 372.033 74.3618 372.233 74.8618 372.233 cv
75.4619 372.233 li
75.4619 373.933 li
74.6621 373.933 li
73.9619 373.933 73.4619 373.733 72.9619 373.433 cv
72.562 373.133 72.3618 372.533 72.3618 371.733 cv
cp
f
76.9619 371.733 mo
76.9619 361.133 li
78.7617 361.133 li
78.7617 371.633 li
78.7617 372.033 78.9619 372.233 79.4619 372.233 cv
80.0615 372.233 li
80.0615 373.933 li
79.2617 373.933 li
78.5615 373.933 78.0615 373.733 77.5615 373.433 cv
77.1621 373.133 76.9619 372.533 76.9619 371.733 cv
cp
f
82.9619 368.533 mo
86.7617 368.533 li
86.7617 367.833 86.5615 367.333 86.1621 366.933 cv
85.7617 366.533 85.3623 366.433 84.8623 366.433 cv
84.3623 366.433 83.8623 366.633 83.4619 366.933 cv
83.1621 367.333 82.9619 367.833 82.9619 368.533 cv
cp
88.6621 370.033 mo
82.9619 370.033 li
82.9619 370.833 83.1621 371.333 83.5615 371.733 cv
83.9619 372.133 84.4619 372.333 85.1621 372.333 cv
85.9619 372.333 86.5615 372.033 87.1621 371.433 cv
88.4619 372.533 li
87.9619 373.033 87.4619 373.433 86.9619 373.633 cv
86.3623 373.833 85.7617 373.933 85.1621 373.933 cv
84.2617 373.933 83.3623 373.633 82.4619 373.033 cv
81.5615 372.433 81.1621 371.133 81.1621 369.333 cv
81.1621 367.533 81.5615 366.333 82.3623 365.633 cv
83.1621 364.933 84.0615 364.633 84.8623 364.633 cv
85.8623 364.633 86.7617 364.933 87.4619 365.633 cv
88.2617 366.333 88.5615 367.234 88.5615 368.433 cv
88.5615 370.033 li
88.6621 370.033 li
88.6621 370.033 li
cp
f
92.5615 373.633 mo
89.2617 364.833 li
91.1621 364.833 li
93.3623 371.233 li
93.3623 371.233 li
95.5615 364.833 li
97.4619 364.833 li
93.5615 375.833 li
93.2617 376.533 92.9619 377.033 92.4619 377.233 cv
91.9619 377.533 91.4619 377.633 90.9619 377.633 cv
90.3623 377.633 li
90.3623 375.933 li
90.8623 375.933 li
91.4619 375.933 91.7617 375.633 91.9619 375.133 cv
92.5615 373.633 li
cp
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
0 24.673 mo
150 24.673 li
@
0 356.673 mo
150 356.673 li
@
42.1001 12.9728 mo
45.7998 12.9728 li
45.5 12.173 45.2998 11.5734 45.2002 11.0734 cv
45.1001 10.5734 44.8999 10.2726 44.7998 9.87321 cv
44.7002 9.47281 44.6001 9.17301 44.5 8.77262 cv
44.3999 8.37321 44.2002 7.97281 44 7.27262 cv
43.7998 7.87321 43.6001 8.37321 43.5 8.77262 cv
43.3999 9.17301 43.2998 9.47281 43.1001 9.87321 cv
42.8999 10.2726 42.8999 10.5734 42.7002 11.0734 cv
42.5 11.5734 42.2998 12.2726 42.1001 12.9728 cv
cp
38.3999 17.5734 mo
43.1001 4.77262 li
44.7002 4.77262 li
49.3999 17.5734 li
47.3999 17.5734 li
46.3999 14.673 li
41.5 14.673 li
40.5 17.5734 li
38.3999 17.5734 li
cp
f
51 17.673 mo
51 8.47281 li
52.7998 8.47281 li
52.7998 9.47281 li
52.7998 9.47281 li
53.3999 8.77262 54.2002 8.37321 55.2002 8.37321 cv
55.7998 8.37321 56.2998 8.47281 56.7002 8.67301 cv
57.1001 8.87321 57.3999 9.17301 57.7998 9.47281 cv
58.5 8.67301 59.5 8.27262 60.7002 8.27262 cv
61.3999 8.27262 62.1001 8.5734 62.7998 9.0734 cv
63.5 9.5734 63.7998 10.3732 63.7998 11.4728 cv
63.7998 17.5734 li
62 17.5734 li
62 12.173 li
62 11.5734 61.7998 11.0734 61.5 10.7726 cv
61.2002 10.4728 60.7002 10.2726 60.2002 10.2726 cv
59.7002 10.2726 59.2002 10.4728 58.8999 10.7726 cv
58.6001 11.0734 58.3999 11.5734 58.3999 12.173 cv
58.3999 17.5734 li
56.6001 17.5734 li
56.6001 12.173 li
56.6001 11.5734 56.3999 11.0734 56.1001 10.7726 cv
55.7998 10.4728 55.2998 10.2726 54.7998 10.2726 cv
54.2998 10.2726 53.7998 10.4728 53.5 10.7726 cv
53.2002 11.0734 53 11.5734 53 12.173 cv
53 17.5734 li
51 17.5734 li
51 17.673 li
cp
f
71 14.4728 mo
71 13.7726 li
68.8999 13.7726 li
67.8999 13.7726 67.2998 14.173 67.3999 14.8732 cv
67.3999 15.173 67.5 15.4728 67.7998 15.673 cv
68.1001 15.8732 68.5 16.0734 69.1001 16.0734 cv
69.8999 16.0734 70.3999 15.9728 70.7002 15.7726 cv
70.8999 15.5734 71 15.173 71 14.4728 cv
cp
71 17.673 mo
71 16.8732 li
71 16.8732 li
70.7998 17.173 70.6001 17.3732 70.2002 17.5734 cv
69.7998 17.7726 69.3999 17.7726 68.7998 17.7726 cv
67.7998 17.7726 67 17.4728 66.5 16.9728 cv
65.8999 16.4728 65.7002 15.7726 65.7002 14.9728 cv
65.7002 14.173 65.8999 13.5734 66.3999 13.0734 cv
66.8999 12.5734 67.6001 12.2726 68.6001 12.2726 cv
71 12.2726 li
71 11.2726 li
71 10.4728 70.3999 10.0734 69.2002 10.0734 cv
68.7998 10.0734 68.3999 10.0734 68.1001 10.173 cv
67.7998 10.2726 67.6001 10.4728 67.5 10.7726 cv
66.1001 9.67301 li
66.7998 8.77262 67.7998 8.27262 69.1001 8.37321 cv
70.2002 8.37321 71.1001 8.5734 71.7998 9.0734 cv
72.5 9.5734 72.7998 10.2726 72.7998 11.4728 cv
72.7998 17.673 li
71 17.673 li
cp
f
74.7998 15.3732 mo
74.7998 4.77262 li
76.5996 4.77262 li
76.5996 15.2726 li
76.5996 15.673 76.7998 15.8732 77.2998 15.8732 cv
78 15.8732 li
78 17.5734 li
77.2002 17.5734 li
76.5 17.5734 76 17.3732 75.5 17.0734 cv
75 16.7726 74.7998 16.2726 74.7998 15.3732 cv
cp
f
81 13.0734 mo
81 13.7726 81 14.2726 81.0996 14.5734 cv
81.2002 14.8732 81.2002 15.0734 81.4004 15.2726 cv
81.5 15.4728 81.7002 15.5734 81.9004 15.7726 cv
82.0996 15.9728 82.4004 15.9728 82.7998 15.9728 cv
83.2002 15.9728 83.5 15.8732 83.7002 15.7726 cv
83.9004 15.673 84.0996 15.4728 84.2002 15.2726 cv
84.4004 15.0734 84.5 14.8732 84.5 14.5734 cv
84.5 14.2726 84.5996 13.8732 84.5996 13.0734 cv
84.5996 12.2726 84.5996 11.8732 84.5 11.5734 cv
84.4004 11.2726 84.4004 11.0734 84.2002 10.8732 cv
84.0996 10.673 83.9004 10.5734 83.7002 10.3732 cv
83.5 10.173 83.2002 10.173 82.7998 10.173 cv
82.4004 10.173 82.0996 10.2726 81.9004 10.3732 cv
81.7002 10.4728 81.5 10.673 81.4004 10.8732 cv
81.2002 11.0734 81.0996 11.2726 81.0996 11.5734 cv
81.0996 11.8732 81 12.3732 81 13.0734 cv
cp
84.5996 17.5734 mo
84.5996 16.673 li
84 17.3732 83.2002 17.7726 82.2002 17.7726 cv
81.5996 17.7726 81.0996 17.673 80.7002 17.3732 cv
80.2998 17.0734 80 16.8732 79.7998 16.5734 cv
79.5 16.2726 79.4004 15.8732 79.2998 15.4728 cv
79.2002 15.0734 79.2002 14.2726 79.2002 12.9728 cv
79.2002 11.673 79.2002 10.8732 79.2998 10.4728 cv
79.4004 10.0734 79.5996 9.77262 79.7998 9.37321 cv
80 9.0734 80.2998 8.87321 80.7002 8.5734 cv
81.0996 8.27262 81.5996 8.17301 82.2002 8.17301 cv
83.0996 8.17301 83.9004 8.5734 84.5996 9.27262 cv
84.5996 8.27262 li
86.4004 8.27262 li
86.4004 17.173 li
86.4004 18.5734 86 19.5734 85.2002 20.173 cv
84.4004 20.7726 83.5 21.173 82.4004 21.173 cv
81.7998 21.173 81.2002 21.0734 80.7002 20.7726 cv
80.2002 20.4728 79.7002 20.0734 79.2002 19.673 cv
80.5996 18.5734 li
80.7998 18.7726 81.0996 18.9728 81.4004 19.173 cv
81.7002 19.3732 82 19.3732 82.4004 19.3732 cv
83 19.3732 83.5 19.173 83.9004 18.8732 cv
84.2998 18.5734 84.5996 18.2726 84.5996 17.5734 cv
cp
f
93.5996 14.4728 mo
93.5996 13.7726 li
91.5 13.7726 li
90.5 13.7726 89.9004 14.173 90 14.8732 cv
90 15.173 90.0996 15.4728 90.4004 15.673 cv
90.7002 15.8732 91.0996 16.0734 91.7002 16.0734 cv
92.5 16.0734 93 15.9728 93.2998 15.7726 cv
93.5 15.5734 93.5996 15.173 93.5996 14.4728 cv
cp
93.5996 17.673 mo
93.5996 16.8732 li
93.5996 16.8732 li
93.4004 17.173 93.2002 17.3732 92.7998 17.5734 cv
92.4004 17.7726 92 17.7726 91.4004 17.7726 cv
90.4004 17.7726 89.5996 17.4728 89.0996 16.9728 cv
88.5 16.4728 88.2998 15.7726 88.2998 14.9728 cv
88.2998 14.173 88.5 13.5734 89 13.0734 cv
89.5 12.5734 90.2002 12.2726 91.2002 12.2726 cv
93.7002 12.2726 li
93.7002 11.2726 li
93.7002 10.4728 93.0996 10.0734 91.9004 10.0734 cv
91.5 10.0734 91.0996 10.0734 90.7998 10.173 cv
90.5 10.2726 90.2998 10.4728 90.2002 10.7726 cv
88.7998 9.67301 li
89.5 8.77262 90.5 8.27262 91.7998 8.37321 cv
92.9004 8.37321 93.7998 8.5734 94.5 9.0734 cv
95.2002 9.5734 95.5 10.2726 95.5 11.4728 cv
95.5 17.673 li
93.5996 17.673 li
cp
f
97.5996 17.673 mo
97.5996 8.47281 li
99.4004 8.47281 li
99.4004 9.47281 li
99.4004 9.47281 li
100 8.77262 100.8 8.37321 101.8 8.37321 cv
102.4 8.37321 102.9 8.47281 103.3 8.67301 cv
103.7 8.87321 104 9.17301 104.4 9.47281 cv
105.1 8.67301 106.1 8.27262 107.3 8.27262 cv
108 8.27262 108.7 8.5734 109.4 9.0734 cv
110.1 9.5734 110.4 10.3732 110.4 11.4728 cv
110.4 17.5734 li
108.6 17.5734 li
108.6 12.173 li
108.6 11.5734 108.4 11.0734 108.1 10.7726 cv
107.8 10.4728 107.3 10.2726 106.8 10.2726 cv
106.3 10.2726 105.8 10.4728 105.5 10.7726 cv
105.2 11.0734 105 11.5734 105 12.173 cv
105 17.5734 li
103 17.5734 li
103 12.173 li
103 11.5734 102.8 11.0734 102.5 10.7726 cv
102.2 10.4728 101.7 10.2726 101.2 10.2726 cv
100.7 10.2726 100.2 10.4728 99.9004 10.7726 cv
99.5996 11.0734 99.4004 11.5734 99.4004 12.173 cv
99.4004 17.5734 li
97.5996 17.5734 li
97.5996 17.673 li
cp
f
12.5 59.673 mo
12.5 51.8732 li
13.7002 51.8732 li
13.7002 58.5734 li
17.5 58.5734 li
17.5 59.673 li
12.5 59.673 li
cp
f
40.2998 52.9728 mo
40.2998 55.3732 li
42.1001 55.3732 li
42.5 55.3732 42.8999 55.2726 43.1001 54.9728 cv
43.2998 54.673 43.3999 54.4728 43.3999 54.0734 cv
43.3999 53.673 43.2998 53.3732 43 53.173 cv
42.7998 52.9728 42.5 52.9728 42.1001 52.9728 cv
40.2998 52.9728 li
cp
39.1001 59.673 mo
39.1001 51.8732 li
42.2002 51.8732 li
42.8999 51.8732 43.3999 52.0734 43.7998 52.3732 cv
44 52.5734 44.2002 52.7726 44.3999 53.0734 cv
44.6001 53.3732 44.6001 53.673 44.6001 54.0734 cv
44.6001 54.5734 44.5 55.0734 44.2002 55.3732 cv
43.8999 55.7726 43.6001 56.0734 43.1001 56.173 cv
44.8999 59.673 li
43.5 59.673 li
41.8999 56.3732 li
40.3999 56.3732 li
40.3999 59.673 li
39.1001 59.673 li
cp
f
31 62.0734 mo
28.5 57.8732 li
26 62.0734 li
24.1001 62.0734 li
27.6001 56.2726 li
24.2998 50.7726 li
26.2998 50.7726 li
28.6001 54.673 li
30.8999 50.7726 li
32.8999 50.7726 li
29.5 56.173 li
33 61.9728 li
31 61.9728 li
31 62.0734 li
cp
f
60.5 351.573 mo
60.5 343.773 li
61.7002 343.773 li
61.7002 350.473 li
65.5 350.473 li
65.5 351.573 li
60.5 351.573 li
60.5 351.573 li
cp
f
85.2998 344.873 mo
85.2998 347.273 li
87.0996 347.273 li
87.5 347.273 87.9004 347.173 88.0996 346.873 cv
88.2998 346.573 88.4004 346.373 88.4004 345.973 cv
88.4004 345.573 88.2998 345.273 88 345.073 cv
87.7998 344.873 87.5 344.873 87.0996 344.873 cv
85.2998 344.873 li
cp
84.0996 351.573 mo
84.0996 343.773 li
87.2002 343.773 li
87.9004 343.773 88.4004 343.973 88.7998 344.273 cv
89 344.473 89.2002 344.673 89.4004 344.973 cv
89.5996 345.273 89.5996 345.573 89.5996 345.973 cv
89.5996 346.473 89.5 346.973 89.2002 347.273 cv
88.9004 347.673 88.5996 347.973 88.0996 348.073 cv
89.9004 351.573 li
88.5 351.573 li
86.9004 348.273 li
85.4004 348.273 li
85.4004 351.573 li
84.0996 351.573 li
cp
f
105.5 59.673 mo
105.5 51.8732 li
106.7 51.8732 li
106.7 58.5734 li
110.5 58.5734 li
110.5 59.673 li
105.5 59.673 li
cp
f
133.3 52.9728 mo
133.3 55.3732 li
135.1 55.3732 li
135.5 55.3732 135.9 55.2726 136.1 54.9728 cv
136.3 54.7726 136.4 54.4728 136.4 54.0734 cv
136.4 53.673 136.3 53.3732 136 53.173 cv
135.8 52.9728 135.5 52.9728 135.1 52.9728 cv
133.3 52.9728 li
cp
132.1 59.673 mo
132.1 51.8732 li
135.2 51.8732 li
135.9 51.8732 136.4 52.0734 136.8 52.3732 cv
137 52.5734 137.2 52.7726 137.4 53.0734 cv
137.6 53.3732 137.6 53.673 137.6 54.0734 cv
137.6 54.5734 137.5 55.0734 137.2 55.3732 cv
136.9 55.7726 136.6 56.0734 136.1 56.173 cv
137.9 59.673 li
136.5 59.673 li
134.9 56.3732 li
133.3 56.3732 li
133.3 59.673 li
132.1 59.673 li
cp
f
120.7 62.0734 mo
120.7 57.3732 li
117.3 50.673 li
119.1 50.673 li
121.5 55.7726 li
123.9 50.673 li
125.7 50.673 li
122.3 57.3732 li
122.3 62.0734 li
120.7 62.0734 li
cp
f
10 ml
74.7998 144.173 mo
74.7998 115.173 li
@
75 81.173 mo
75 67.673 li
@
75 56.673 mo
75 43.173 li
@
30 95.173 mo
120 95.173 li
120 115.173 li
30 115.173 li
30 95.173 li
cp
.732845 .672084 .657374 .825711 cmyk
f
30 95.173 mo
120 95.173 li
120 115.173 li
30 115.173 li
30 95.173 li
cp
.676844 .618402 .580743 .45658 cmyk
@
37.4795 88.6349 mo
37.4795 87.4103 li
40.5146 87.4103 li
40.5146 89.1506 li
40.5146 89.9982 40.2197 90.715 39.6299 91.3009 cv
39.04 91.8869 38.3193 92.1798 37.4678 92.1798 cv
36.7959 92.1798 36.2324 92.0187 35.7773 91.6964 cv
35.3223 91.3742 34.9951 91.0256 34.7959 90.6506 cv
34.6553 90.4006 34.5576 90.1271 34.5029 89.8302 cv
34.4482 89.5334 34.4209 88.8713 34.4209 87.8439 cv
34.4209 86.8166 34.4482 86.1545 34.5029 85.8576 cv
34.5576 85.5607 34.6553 85.2873 34.7959 85.0373 cv
34.9951 84.6662 35.3223 84.3166 35.7773 83.9884 cv
36.2324 83.6603 36.7959 83.4963 37.4678 83.4963 cv
38.2764 83.4963 38.9453 83.7453 39.4746 84.2433 cv
40.0039 84.7414 40.335 85.3361 40.4678 86.0275 cv
39.1025 86.0275 li
38.9971 85.6994 38.8008 85.4123 38.5137 85.1662 cv
38.2266 84.9201 37.8779 84.797 37.4678 84.797 cv
37.1631 84.797 36.8994 84.8595 36.6768 84.9845 cv
36.4541 85.1095 36.2783 85.2541 36.1494 85.4181 cv
35.9814 85.6369 35.8672 85.8771 35.8066 86.1388 cv
35.7461 86.4006 35.7158 86.9689 35.7158 87.8439 cv
35.7158 88.7228 35.7461 89.2931 35.8066 89.5548 cv
35.8672 89.8166 35.9814 90.0529 36.1494 90.2638 cv
36.2783 90.4357 36.4541 90.5832 36.6768 90.7062 cv
36.8994 90.8293 37.1631 90.8908 37.4678 90.8908 cv
37.96 90.8908 38.375 90.7228 38.7129 90.3869 cv
39.0508 90.0509 39.2197 89.6134 39.2197 89.0744 cv
39.2197 88.6349 li
37.4795 88.6349 li
cp
0 0 0 0 cmyk
f
45.1436 89.9943 mo
45.1436 89.549 li
43.7197 89.549 li
43.0244 89.5685 42.6807 89.8146 42.6885 90.2873 cv
42.6885 90.4904 42.7783 90.6662 42.958 90.8146 cv
43.1299 90.9748 43.4131 91.0548 43.8076 91.0548 cv
44.3076 91.0627 44.6592 91.0021 44.8623 90.8732 cv
45.0498 90.7443 45.1436 90.4513 45.1436 89.9943 cv
cp
45.1436 92.133 mo
45.1436 91.5939 li
45.1201 91.5939 li
45.0068 91.8048 44.8369 91.9572 44.6104 92.0509 cv
44.3682 92.1525 44.0518 92.2033 43.6611 92.2033 cv
42.9893 92.1877 42.4814 92.008 42.1377 91.6642 cv
41.7627 91.3205 41.5752 90.881 41.5752 90.3459 cv
41.5752 89.8381 41.7373 89.4123 42.0615 89.0685 cv
42.3857 88.7248 42.8643 88.549 43.4971 88.5412 cv
45.1436 88.5412 li
45.1436 87.8966 li
45.1475 87.3576 44.7432 87.0959 43.9307 87.1115 cv
43.6494 87.1115 43.415 87.1427 43.2275 87.2052 cv
43.0439 87.2873 42.9053 87.4142 42.8115 87.5861 cv
41.874 86.8478 li
42.3271 86.2423 42.9932 85.9474 43.8721 85.9631 cv
44.6104 85.9552 45.2041 86.0998 45.6533 86.3966 cv
46.0947 86.7052 46.3193 87.2287 46.3271 87.967 cv
46.3271 92.133 li
45.1436 92.133 li
cp
f
47.7217 92.1095 mo
47.7217 86.0275 li
48.9463 86.0275 li
48.9463 92.1095 li
47.7217 92.1095 li
cp
47.7217 84.797 mo
47.7217 83.5724 li
48.9463 83.5724 li
48.9463 84.797 li
47.7217 84.797 li
cp
f
50.5635 92.1095 mo
50.5635 86.0275 li
51.7881 86.0275 li
51.7881 86.6779 li
51.8115 86.6779 li
52.1904 86.1974 52.7178 85.9572 53.3936 85.9572 cv
53.8662 85.9572 54.3223 86.1369 54.7617 86.4963 cv
55.2012 86.8556 55.4209 87.3791 55.4209 88.0666 cv
55.4209 92.1095 li
54.1963 92.1095 li
54.1963 88.4884 li
54.1963 88.0783 54.082 87.758 53.8535 87.5275 cv
53.625 87.297 53.3408 87.1818 53.001 87.1818 cv
52.6494 87.1818 52.3594 87.297 52.1309 87.5275 cv
51.9023 87.758 51.7881 88.0783 51.7881 88.4884 cv
51.7881 92.1095 li
50.5635 92.1095 li
cp
f
65.5654 170.073 mo
65.5654 162.685 li
63.2275 162.685 li
63.2275 161.536 li
69.1982 161.536 li
69.1982 162.685 li
66.8604 162.685 li
66.8604 170.073 li
65.5654 170.073 li
cp
f
71.3135 169.839 mo
69.1338 163.991 li
70.4229 163.991 li
71.8643 168.251 li
71.8877 168.251 li
73.3291 163.991 li
74.624 163.991 li
72.0107 171.333 li
71.8389 171.802 71.6025 172.119 71.3018 172.285 cv
71.001 172.451 70.665 172.534 70.2939 172.534 cv
69.8838 172.534 li
69.8838 171.38 li
70.2471 171.38 li
70.6143 171.38 70.8584 171.204 70.9795 170.853 cv
71.3135 169.839 li
cp
f
77.7588 168.925 mo
78.333 168.925 78.6777 168.728 78.793 168.333 cv
78.9082 167.939 78.9658 167.507 78.9658 167.038 cv
78.9658 166.569 78.9082 166.137 78.793 165.74 cv
78.6777 165.344 78.333 165.146 77.7588 165.146 cv
77.1846 165.146 76.8408 165.351 76.7275 165.761 cv
76.6143 166.171 76.5576 166.597 76.5576 167.038 cv
76.5576 167.48 76.6143 167.904 76.7275 168.313 cv
76.8408 168.721 77.1846 168.925 77.7588 168.925 cv
cp
75.333 172.534 mo
75.333 163.991 li
76.5576 163.991 li
76.5576 164.63 li
76.9834 164.157 77.5068 163.921 78.1279 163.921 cv
78.499 163.921 78.8193 163.996 79.0889 164.147 cv
79.3584 164.297 79.5811 164.486 79.7568 164.712 cv
79.9248 164.931 80.0391 165.186 80.0996 165.477 cv
80.1602 165.768 80.1904 166.288 80.1904 167.038 cv
80.1904 167.784 80.1602 168.304 80.0996 168.597 cv
80.0391 168.89 79.9248 169.144 79.7568 169.359 cv
79.5811 169.589 79.3584 169.777 79.0889 169.924 cv
78.8193 170.07 78.499 170.144 78.1279 170.144 cv
77.8115 170.144 77.5273 170.079 77.2754 169.95 cv
77.0234 169.821 76.7842 169.648 76.5576 169.429 cv
76.5576 172.534 li
75.333 172.534 li
cp
f
82.4521 166.487 mo
85.0186 166.487 li
84.999 166.03 84.8701 165.681 84.6318 165.439 cv
84.3936 165.196 84.0947 165.075 83.7354 165.075 cv
83.3721 165.075 83.0703 165.196 82.8301 165.439 cv
82.5898 165.681 82.4639 166.03 82.4521 166.487 cv
cp
86.2373 167.495 mo
82.4521 167.495 li
82.4521 167.995 82.5879 168.37 82.8594 168.62 cv
83.1309 168.87 83.4775 168.995 83.8994 168.995 cv
84.4033 168.995 84.8486 168.8 85.2354 168.409 cv
86.1201 169.165 li
85.8193 169.517 85.4805 169.768 85.1035 169.918 cv
84.7266 170.069 84.333 170.144 83.9229 170.144 cv
83.2979 170.144 82.6924 169.942 82.1064 169.537 cv
81.5205 169.133 81.2275 168.306 81.2275 167.056 cv
81.2275 165.872 81.498 165.054 82.0391 164.601 cv
82.5801 164.148 83.1455 163.921 83.7354 163.921 cv
84.4033 163.921 84.9873 164.152 85.4873 164.615 cv
85.9873 165.078 86.2373 165.702 86.2373 166.487 cv
86.2373 167.495 li
cp
f
55.2627 232.835 mo
55.2627 235.589 li
57.1846 235.589 li
57.665 235.589 58.0234 235.444 58.2598 235.155 cv
58.4961 234.866 58.6143 234.552 58.6143 234.212 cv
58.6143 233.696 58.4287 233.318 58.0576 233.075 cv
57.8193 232.915 57.5127 232.835 57.1377 232.835 cv
55.2627 232.835 li
cp
53.9678 240.148 mo
53.9678 231.611 li
57.0674 231.611 li
57.3994 231.611 57.7188 231.646 58.0254 231.716 cv
58.332 231.786 58.6514 231.95 58.9834 232.208 cv
59.2412 232.407 59.46 232.682 59.6396 233.031 cv
59.8193 233.381 59.9092 233.786 59.9092 234.247 cv
59.9092 234.857 59.6816 235.437 59.2266 235.987 cv
58.7715 236.538 58.1064 236.814 57.2314 236.814 cv
55.2627 236.814 li
55.2627 240.148 li
53.9678 240.148 li
cp
f
64.1982 238.032 mo
64.1982 237.587 li
62.7744 237.587 li
62.0791 237.607 61.7354 237.853 61.7432 238.325 cv
61.7432 238.528 61.833 238.704 62.0127 238.853 cv
62.1846 239.013 62.4678 239.093 62.8623 239.093 cv
63.3623 239.101 63.7139 239.04 63.917 238.911 cv
64.1045 238.782 64.1982 238.489 64.1982 238.032 cv
cp
64.1982 240.171 mo
64.1982 239.632 li
64.1748 239.632 li
64.0615 239.843 63.8916 239.995 63.665 240.089 cv
63.4229 240.191 63.1064 240.241 62.7158 240.241 cv
62.0439 240.226 61.5361 240.046 61.1924 239.702 cv
60.8174 239.359 60.6299 238.919 60.6299 238.384 cv
60.6299 237.876 60.792 237.45 61.1162 237.107 cv
61.4404 236.763 61.9189 236.587 62.5518 236.579 cv
64.1982 236.579 li
64.1982 235.935 li
64.2021 235.396 63.7979 235.134 62.9854 235.15 cv
62.7041 235.15 62.4697 235.181 62.2822 235.243 cv
62.0986 235.325 61.96 235.452 61.8662 235.624 cv
60.9287 234.886 li
61.3818 234.28 62.0479 233.986 62.9268 234.001 cv
63.665 233.993 64.2588 234.138 64.708 234.435 cv
65.1494 234.743 65.374 235.267 65.3818 236.005 cv
65.3818 240.171 li
64.1982 240.171 li
cp
f
66.7412 240.148 mo
66.7412 234.066 li
67.9658 234.066 li
67.9658 234.716 li
67.9893 234.716 li
68.3682 234.236 68.8955 233.995 69.5713 233.995 cv
70.0166 233.995 70.4404 234.152 70.8428 234.464 cv
69.958 235.519 li
69.6924 235.319 69.4229 235.22 69.1494 235.22 cv
68.8486 235.22 68.5762 235.32 68.332 235.522 cv
68.0879 235.723 67.9658 236.046 67.9658 236.491 cv
67.9658 240.148 li
66.7412 240.148 li
cp
f
74.6279 238.032 mo
74.6279 237.587 li
73.2041 237.587 li
72.5088 237.607 72.165 237.853 72.1729 238.325 cv
72.1729 238.528 72.2627 238.704 72.4424 238.853 cv
72.6143 239.013 72.8975 239.093 73.292 239.093 cv
73.792 239.101 74.1436 239.04 74.3467 238.911 cv
74.5342 238.782 74.6279 238.489 74.6279 238.032 cv
cp
74.6279 240.171 mo
74.6279 239.632 li
74.6045 239.632 li
74.4912 239.843 74.3213 239.995 74.0947 240.089 cv
73.8525 240.191 73.5361 240.241 73.1455 240.241 cv
72.4736 240.226 71.9658 240.046 71.6221 239.702 cv
71.2471 239.359 71.0596 238.919 71.0596 238.384 cv
71.0596 237.876 71.2217 237.45 71.5459 237.107 cv
71.8701 236.763 72.3486 236.587 72.9814 236.579 cv
74.6279 236.579 li
74.6279 235.935 li
74.6318 235.396 74.2275 235.134 73.415 235.15 cv
73.1338 235.15 72.8994 235.181 72.7119 235.243 cv
72.5283 235.325 72.3896 235.452 72.2959 235.624 cv
71.3584 234.886 li
71.8115 234.28 72.4775 233.986 73.3564 234.001 cv
74.0947 233.993 74.6885 234.138 75.1377 234.435 cv
75.5791 234.743 75.8037 235.267 75.8115 236.005 cv
75.8115 240.171 li
74.6279 240.171 li
cp
f
77.2412 240.148 mo
77.2412 234.066 li
78.4658 234.066 li
78.4658 234.716 li
78.4893 234.716 li
78.876 234.236 79.4033 233.995 80.0713 233.995 cv
80.4971 233.995 80.835 234.071 81.085 234.224 cv
81.335 234.376 81.5693 234.564 81.7881 234.786 cv
82.2686 234.259 82.9092 233.995 83.71 233.995 cv
84.1826 233.995 84.6387 234.175 85.0781 234.534 cv
85.5176 234.894 85.7373 235.417 85.7373 236.105 cv
85.7373 240.148 li
84.5127 240.148 li
84.5127 236.527 li
84.5127 236.116 84.3975 235.796 84.167 235.566 cv
83.9365 235.335 83.6514 235.22 83.3115 235.22 cv
82.96 235.22 82.6699 235.335 82.4414 235.566 cv
82.2129 235.796 82.0986 236.116 82.0986 236.527 cv
82.0986 240.148 li
80.8799 240.148 li
80.8799 236.527 li
80.8799 236.116 80.7646 235.796 80.5342 235.566 cv
80.3037 235.335 80.0186 235.22 79.6787 235.22 cv
79.3271 235.22 79.0371 235.335 78.8086 235.566 cv
78.5801 235.796 78.4658 236.116 78.4658 236.527 cv
78.4658 240.148 li
77.2412 240.148 li
cp
f
91.9014 237.071 mo
94.374 237.071 li
94.1943 236.544 94.0527 236.131 93.9492 235.832 cv
93.8457 235.533 93.7559 235.269 93.6797 235.038 cv
93.6035 234.808 93.5264 234.573 93.4482 234.335 cv
93.3701 234.097 93.2666 233.775 93.1377 233.368 cv
93.001 233.79 92.8916 234.127 92.8096 234.379 cv
92.7275 234.631 92.6484 234.874 92.5723 235.109 cv
92.4961 235.343 92.4082 235.605 92.3086 235.894 cv
92.209 236.183 92.0732 236.575 91.9014 237.071 cv
cp
89.4756 240.142 mo
92.5928 231.599 li
93.6592 231.599 li
96.7764 240.142 li
95.417 240.142 li
94.7607 238.214 li
91.5205 238.214 li
90.8408 240.142 li
89.4756 240.142 li
cp
f
55.3418 304.888 mo
55.3418 307.642 li
57.2637 307.642 li
57.7441 307.642 58.1025 307.497 58.3389 307.208 cv
58.5752 306.919 58.6934 306.605 58.6934 306.265 cv
58.6934 305.749 58.5078 305.37 58.1367 305.128 cv
57.8984 304.968 57.5918 304.888 57.2168 304.888 cv
55.3418 304.888 li
cp
54.0469 312.2 mo
54.0469 303.663 li
57.1465 303.663 li
57.4785 303.663 57.7979 303.698 58.1045 303.769 cv
58.4111 303.839 58.7305 304.003 59.0625 304.261 cv
59.3203 304.46 59.5391 304.735 59.7188 305.084 cv
59.8984 305.434 59.9883 305.839 59.9883 306.3 cv
59.9883 306.909 59.7607 307.489 59.3057 308.04 cv
58.8506 308.591 58.1855 308.866 57.3105 308.866 cv
55.3418 308.866 li
55.3418 312.2 li
54.0469 312.2 li
cp
f
64.2773 310.085 mo
64.2773 309.64 li
62.8535 309.64 li
62.1582 309.659 61.8145 309.905 61.8223 310.378 cv
61.8223 310.581 61.9121 310.757 62.0918 310.905 cv
62.2637 311.066 62.5469 311.146 62.9414 311.146 cv
63.4414 311.153 63.793 311.093 63.9961 310.964 cv
64.1836 310.835 64.2773 310.542 64.2773 310.085 cv
cp
64.2773 312.224 mo
64.2773 311.685 li
64.2539 311.685 li
64.1406 311.896 63.9707 312.048 63.7441 312.142 cv
63.502 312.243 63.1855 312.294 62.7949 312.294 cv
62.123 312.278 61.6152 312.099 61.2715 311.755 cv
60.8965 311.411 60.709 310.972 60.709 310.437 cv
60.709 309.929 60.8711 309.503 61.1953 309.159 cv
61.5195 308.816 61.998 308.64 62.6309 308.632 cv
64.2773 308.632 li
64.2773 307.987 li
64.2813 307.448 63.877 307.187 63.0645 307.202 cv
62.7832 307.202 62.5488 307.234 62.3613 307.296 cv
62.1777 307.378 62.0391 307.505 61.9453 307.677 cv
61.0078 306.939 li
61.4609 306.333 62.127 306.038 63.0059 306.054 cv
63.7441 306.046 64.3379 306.191 64.7871 306.487 cv
65.2285 306.796 65.4531 307.319 65.4609 308.058 cv
65.4609 312.224 li
64.2773 312.224 li
cp
f
66.8203 312.2 mo
66.8203 306.118 li
68.0449 306.118 li
68.0449 306.769 li
68.0684 306.769 li
68.4473 306.288 68.9746 306.048 69.6504 306.048 cv
70.0957 306.048 70.5195 306.204 70.9219 306.517 cv
70.0371 307.571 li
69.7715 307.372 69.502 307.273 69.2285 307.273 cv
68.9277 307.273 68.6553 307.373 68.4111 307.574 cv
68.167 307.776 68.0449 308.099 68.0449 308.544 cv
68.0449 312.2 li
66.8203 312.2 li
cp
f
74.707 310.085 mo
74.707 309.64 li
73.2832 309.64 li
72.5879 309.659 72.2441 309.905 72.252 310.378 cv
72.252 310.581 72.3418 310.757 72.5215 310.905 cv
72.6934 311.066 72.9766 311.146 73.3711 311.146 cv
73.8711 311.153 74.2227 311.093 74.4258 310.964 cv
74.6133 310.835 74.707 310.542 74.707 310.085 cv
cp
74.707 312.224 mo
74.707 311.685 li
74.6836 311.685 li
74.5703 311.896 74.4004 312.048 74.1738 312.142 cv
73.9316 312.243 73.6152 312.294 73.2246 312.294 cv
72.5527 312.278 72.0449 312.099 71.7012 311.755 cv
71.3262 311.411 71.1387 310.972 71.1387 310.437 cv
71.1387 309.929 71.3008 309.503 71.625 309.159 cv
71.9492 308.816 72.4277 308.64 73.0605 308.632 cv
74.707 308.632 li
74.707 307.987 li
74.7109 307.448 74.3066 307.187 73.4941 307.202 cv
73.2129 307.202 72.9785 307.234 72.791 307.296 cv
72.6074 307.378 72.4688 307.505 72.375 307.677 cv
71.4375 306.939 li
71.8906 306.333 72.5566 306.038 73.4355 306.054 cv
74.1738 306.046 74.7676 306.191 75.2168 306.487 cv
75.6582 306.796 75.8828 307.319 75.8906 308.058 cv
75.8906 312.224 li
74.707 312.224 li
cp
f
77.3203 312.2 mo
77.3203 306.118 li
78.5449 306.118 li
78.5449 306.769 li
78.5684 306.769 li
78.9551 306.288 79.4824 306.048 80.1504 306.048 cv
80.5762 306.048 80.9141 306.124 81.1641 306.277 cv
81.4141 306.429 81.6484 306.616 81.8672 306.839 cv
82.3477 306.312 82.9883 306.048 83.7891 306.048 cv
84.2617 306.048 84.7178 306.228 85.1572 306.587 cv
85.5967 306.946 85.8164 307.47 85.8164 308.157 cv
85.8164 312.2 li
84.5918 312.2 li
84.5918 308.579 li
84.5918 308.169 84.4766 307.849 84.2461 307.618 cv
84.0156 307.388 83.7305 307.273 83.3906 307.273 cv
83.0391 307.273 82.749 307.388 82.5205 307.618 cv
82.292 307.849 82.1777 308.169 82.1777 308.579 cv
82.1777 312.2 li
80.959 312.2 li
80.959 308.579 li
80.959 308.169 80.8438 307.849 80.6133 307.618 cv
80.3828 307.388 80.0977 307.273 79.7578 307.273 cv
79.4063 307.273 79.1162 307.388 78.8877 307.618 cv
78.6592 307.849 78.5449 308.169 78.5449 308.579 cv
78.5449 312.2 li
77.3203 312.2 li
cp
f
93.7383 308.409 mo
91.7461 308.409 li
91.7461 310.982 li
93.7383 310.982 li
94.2188 310.982 94.5713 310.852 94.7959 310.592 cv
95.0205 310.332 95.1328 310.034 95.1328 309.698 cv
95.1328 309.362 95.0205 309.064 94.7959 308.802 cv
94.5713 308.54 94.2188 308.409 93.7383 308.409 cv
cp
93.6211 304.812 mo
91.7461 304.812 li
91.7461 307.261 li
93.6211 307.261 li
94.0859 307.261 94.4316 307.142 94.6582 306.903 cv
94.8848 306.665 94.998 306.376 94.998 306.036 cv
94.998 305.708 94.8848 305.422 94.6582 305.178 cv
94.4316 304.934 94.0859 304.812 93.6211 304.812 cv
cp
90.4512 312.2 mo
90.4512 303.663 li
93.7617 303.663 li
94.5938 303.663 95.2236 303.877 95.6514 304.305 cv
96.0791 304.733 96.293 305.282 96.293 305.954 cv
96.293 306.306 96.207 306.644 96.0352 306.968 cv
95.8633 307.292 95.5293 307.566 95.0332 307.788 cv
95.0332 307.812 li
95.502 307.921 95.8516 308.168 96.082 308.553 cv
96.3125 308.938 96.4277 309.347 96.4277 309.78 cv
96.4277 310.519 96.1924 311.107 95.7217 311.544 cv
95.251 311.982 94.6953 312.2 94.0547 312.2 cv
90.4512 312.2 li
cp
f
%ADOBeginSubsetFont: AlteDIN1451Mittelschrift Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /AlteDIN1451Mittelschrift def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 90 /Z putdef/FontBBox {-52 -229 994 954} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B87A8F8B> |-/Z <1C60D8A8C9B7B4A1306F791E42363605F2DDF3BB82AE957E6B31B5437A14646E8184622C1640D34581> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/GSMMQU+AlteDIN1451Mittelschrift /AlteDIN1451Mittelschrift findfont ct_VMDictPut/GSMMQU+AlteDIN1451Mittelschrift*1 [90{/.notdef}rp /Z 165{/.notdef}rp]GSMMQU+AlteDIN1451Mittelschrift nfGSMMQU+AlteDIN1451Mittelschrift*1 [16 0 0 -16 0 0 ]msf70.8516 353.29 mo(Z)sh15.0078 111.106 mo
15.0078 83.1056 li
@
135.008 111.106 mo
135.008 83.1056 li
@
14.8354 83.1056 mo
45 72.1564 li
@
135.209 83.1056 mo
105.064 72.1564 li
@
97.5439 88.6349 mo
97.5439 87.4103 li
100.579 87.4103 li
100.579 89.1506 li
100.579 89.9982 100.284 90.715 99.6943 91.3009 cv
99.1045 91.8869 98.3838 92.1798 97.5322 92.1798 cv
96.8604 92.1798 96.2969 92.0187 95.8418 91.6964 cv
95.3867 91.3742 95.0596 91.0256 94.8604 90.6506 cv
94.7197 90.4006 94.6221 90.1271 94.5674 89.8302 cv
94.5127 89.5334 94.4854 88.8713 94.4854 87.8439 cv
94.4854 86.8166 94.5127 86.1545 94.5674 85.8576 cv
94.6221 85.5607 94.7197 85.2873 94.8604 85.0373 cv
95.0596 84.6662 95.3867 84.3166 95.8418 83.9884 cv
96.2969 83.6603 96.8604 83.4963 97.5322 83.4963 cv
98.3408 83.4963 99.0098 83.7453 99.5391 84.2433 cv
100.068 84.7414 100.399 85.3361 100.532 86.0275 cv
99.167 86.0275 li
99.0615 85.6994 98.8652 85.4123 98.5781 85.1662 cv
98.291 84.9201 97.9424 84.797 97.5322 84.797 cv
97.2275 84.797 96.9639 84.8595 96.7412 84.9845 cv
96.5186 85.1095 96.3428 85.2541 96.2139 85.4181 cv
96.0459 85.6369 95.9316 85.8771 95.8711 86.1388 cv
95.8105 86.4006 95.7803 86.9689 95.7803 87.8439 cv
95.7803 88.7228 95.8105 89.2931 95.8711 89.5548 cv
95.9316 89.8166 96.0459 90.0529 96.2139 90.2638 cv
96.3428 90.4357 96.5186 90.5832 96.7412 90.7062 cv
96.9639 90.8293 97.2275 90.8908 97.5322 90.8908 cv
98.0244 90.8908 98.4395 90.7228 98.7773 90.3869 cv
99.1152 90.0509 99.2842 89.6134 99.2842 89.0744 cv
99.2842 88.6349 li
97.5439 88.6349 li
cp
f
105.208 89.9943 mo
105.208 89.549 li
103.784 89.549 li
103.089 89.5685 102.745 89.8146 102.753 90.2873 cv
102.753 90.4904 102.843 90.6662 103.022 90.8146 cv
103.194 90.9748 103.478 91.0548 103.872 91.0548 cv
104.372 91.0627 104.724 91.0021 104.927 90.8732 cv
105.114 90.7443 105.208 90.4513 105.208 89.9943 cv
cp
105.208 92.133 mo
105.208 91.5939 li
105.185 91.5939 li
105.071 91.8048 104.901 91.9572 104.675 92.0509 cv
104.433 92.1525 104.116 92.2033 103.726 92.2033 cv
103.054 92.1877 102.546 92.008 102.202 91.6642 cv
101.827 91.3205 101.64 90.881 101.64 90.3459 cv
101.64 89.8381 101.802 89.4123 102.126 89.0685 cv
102.45 88.7248 102.929 88.549 103.562 88.5412 cv
105.208 88.5412 li
105.208 87.8966 li
105.212 87.3576 104.808 87.0959 103.995 87.1115 cv
103.714 87.1115 103.479 87.1427 103.292 87.2052 cv
103.108 87.2873 102.97 87.4142 102.876 87.5861 cv
101.938 86.8478 li
102.392 86.2423 103.058 85.9474 103.937 85.9631 cv
104.675 85.9552 105.269 86.0998 105.718 86.3966 cv
106.159 86.7052 106.384 87.2287 106.392 87.967 cv
106.392 92.133 li
105.208 92.133 li
cp
f
107.786 92.1095 mo
107.786 86.0275 li
109.011 86.0275 li
109.011 92.1095 li
107.786 92.1095 li
cp
107.786 84.797 mo
107.786 83.5724 li
109.011 83.5724 li
109.011 84.797 li
107.786 84.797 li
cp
f
110.628 92.1095 mo
110.628 86.0275 li
111.853 86.0275 li
111.853 86.6779 li
111.876 86.6779 li
112.255 86.1974 112.782 85.9572 113.458 85.9572 cv
113.931 85.9572 114.387 86.1369 114.826 86.4963 cv
115.266 86.8556 115.485 87.3791 115.485 88.0666 cv
115.485 92.1095 li
114.261 92.1095 li
114.261 88.4884 li
114.261 88.0783 114.146 87.758 113.918 87.5275 cv
113.689 87.297 113.405 87.1818 113.065 87.1818 cv
112.714 87.1818 112.424 87.297 112.195 87.5275 cv
111.967 87.758 111.853 88.0783 111.853 88.4884 cv
111.853 92.1095 li
110.628 92.1095 li
cp
f
62.2285 65.0353 mo
62.2285 56.4982 li
63.4531 56.4982 li
65.9023 62.0646 li
68.2988 56.4982 li
69.5234 56.4982 li
69.5234 65.0353 li
68.2285 65.0353 li
68.2285 59.7091 li
68.2051 59.7091 li
66.418 63.8166 li
65.3398 63.8166 li
63.5527 59.7091 li
63.5234 59.7091 li
63.5234 65.0353 li
62.2285 65.0353 li
cp
f
74.709 62.0002 mo
74.709 61.5588 74.6865 61.2482 74.6416 61.0685 cv
74.5967 60.8888 74.5195 60.717 74.4102 60.5529 cv
74.1953 60.256 73.8672 60.1076 73.4258 60.1076 cv
72.9766 60.1076 72.6484 60.256 72.4414 60.5529 cv
72.3242 60.717 72.2451 60.8888 72.2041 61.0685 cv
72.1631 61.2482 72.1426 61.5548 72.1426 61.9884 cv
72.1426 62.4338 72.1631 62.7472 72.2041 62.9289 cv
72.2451 63.1105 72.3242 63.2814 72.4414 63.4416 cv
72.6484 63.7384 72.9766 63.8869 73.4258 63.8869 cv
73.8672 63.8869 74.1953 63.7384 74.4102 63.4416 cv
74.5195 63.2814 74.5967 63.1115 74.6416 62.9318 cv
74.6865 62.7521 74.709 62.4416 74.709 62.0002 cv
cp
70.918 61.9884 mo
70.918 61.3361 70.9688 60.8498 71.0703 60.5295 cv
71.1719 60.2091 71.3398 59.9201 71.5742 59.6623 cv
71.7422 59.4787 71.9736 59.3029 72.2686 59.1349 cv
72.5635 58.967 72.9492 58.883 73.4258 58.883 cv
73.8945 58.883 74.2773 58.967 74.5742 59.1349 cv
74.8711 59.3029 75.1035 59.4787 75.2715 59.6623 cv
75.5059 59.9201 75.6738 60.2091 75.7754 60.5295 cv
75.877 60.8498 75.9277 61.3361 75.9277 61.9884 cv
75.9277 62.6525 75.877 63.1447 75.7754 63.465 cv
75.6738 63.7853 75.5059 64.0744 75.2715 64.3322 cv
75.1035 64.5197 74.8711 64.6955 74.5742 64.8595 cv
74.2773 65.0236 73.8945 65.1056 73.4258 65.1056 cv
72.9492 65.1056 72.5635 65.0236 72.2686 64.8595 cv
71.9736 64.6955 71.7422 64.5197 71.5742 64.3322 cv
71.3398 64.0744 71.1719 63.7853 71.0703 63.465 cv
70.9688 63.1447 70.918 62.6525 70.918 61.9884 cv
cp
f
79.6543 60.1076 mo
79.0762 60.1076 78.7295 60.3048 78.6143 60.6994 cv
78.499 61.0939 78.4414 61.5236 78.4414 61.9884 cv
78.4414 62.465 78.499 62.9005 78.6143 63.2951 cv
78.7295 63.6896 79.0762 63.8869 79.6543 63.8869 cv
80.2207 63.8869 80.5615 63.6818 80.6768 63.2716 cv
80.792 62.8615 80.8496 62.4338 80.8496 61.9884 cv
80.8496 61.5548 80.792 61.133 80.6768 60.7228 cv
80.5615 60.3127 80.2207 60.1076 79.6543 60.1076 cv
cp
80.8496 65.0353 mo
80.8496 64.4025 li
80.4238 64.8713 79.9004 65.1056 79.2793 65.1056 cv
78.9043 65.1056 78.582 65.0324 78.3125 64.8859 cv
78.043 64.7394 77.8223 64.5509 77.6504 64.3205 cv
77.4785 64.1056 77.3633 63.8507 77.3047 63.5558 cv
77.2461 63.2609 77.2168 62.7384 77.2168 61.9884 cv
77.2168 61.2463 77.2461 60.7296 77.3047 60.4386 cv
77.3633 60.1476 77.4785 59.8927 77.6504 59.674 cv
77.8223 59.4474 78.043 59.2589 78.3125 59.1086 cv
78.582 58.9582 78.9043 58.883 79.2793 58.883 cv
79.5918 58.883 79.875 58.9494 80.1289 59.0822 cv
80.3828 59.215 80.623 59.3888 80.8496 59.6037 cv
80.8496 56.4982 li
82.0742 56.4982 li
82.0742 65.0353 li
80.8496 65.0353 li
cp
f
84.3359 61.4494 mo
86.9023 61.4494 li
86.8828 60.9923 86.7539 60.6427 86.5156 60.4005 cv
86.2773 60.1584 85.9785 60.0373 85.6191 60.0373 cv
85.2559 60.0373 84.9541 60.1584 84.7139 60.4005 cv
84.4736 60.6427 84.3477 60.9923 84.3359 61.4494 cv
cp
88.1211 62.4572 mo
84.3359 62.4572 li
84.3359 62.9572 84.4717 63.3322 84.7432 63.5822 cv
85.0146 63.8322 85.3613 63.9572 85.7832 63.9572 cv
86.2871 63.9572 86.7324 63.7619 87.1191 63.3713 cv
88.0039 64.1271 li
87.7031 64.4787 87.3643 64.7297 86.9873 64.88 cv
86.6104 65.0304 86.2168 65.1056 85.8066 65.1056 cv
85.1816 65.1056 84.5762 64.9035 83.9902 64.4992 cv
83.4043 64.0949 83.1113 63.2677 83.1113 62.0177 cv
83.1113 60.8341 83.3818 60.0158 83.9229 59.5627 cv
84.4639 59.1095 85.0293 58.883 85.6191 58.883 cv
86.2871 58.883 86.8711 59.1144 87.3711 59.5773 cv
87.8711 60.0402 88.1211 60.6642 88.1211 61.4494 cv
88.1211 62.4572 li
cp
f
134.835 195.14 mo
120.035 168.206 li
@
74.7998 144.173 mo
120.035 168.206 li
@
14.9355 195.14 mo
29.9351 168.206 li
@
74.7998 144.173 mo
29.9351 168.206 li
@
14.9355 225.14 mo
39.0352 207.173 li
@
135 225.14 mo
111.035 207.173 li
@
74.8999 213.173 mo
111.035 207.173 li
@
38.9351 207.173 mo
74.8999 213.173 li
@
14.9541 255.223 mo
32.9858 273.179 li
@
135 255.223 mo
117.004 273.106 li
@
74.8999 285.173 mo
117.004 273.106 li
@
32.9858 273.179 mo
74.8999 285.173 li
@
75 213.373 mo
75 192.373 li
@
75 264.373 mo
75 285.173 li
@
40.9238 150.223 mo
39.522 147.842 li
38.1157 150.223 li
37.0215 150.223 li
38.9814 146.941 li
37.1445 143.82 li
38.2432 143.82 li
39.522 146.039 li
40.7964 143.82 li
41.895 143.82 li
40.0581 146.941 li
42.0225 150.223 li
40.9238 150.223 li
cp
f
43.3584 147.024 mo
43.3584 147.684 43.3809 148.111 43.4263 148.307 cv
43.4717 148.504 43.5576 148.681 43.6836 148.839 cv
43.7803 148.968 43.9121 149.078 44.0791 149.171 cv
44.2461 149.263 44.4438 149.309 44.6724 149.309 cv
44.9009 149.309 45.0986 149.263 45.2656 149.171 cv
45.4326 149.078 45.5645 148.968 45.6611 148.839 cv
45.7871 148.681 45.8726 148.504 45.9185 148.307 cv
45.9634 148.111 45.9863 147.684 45.9863 147.024 cv
45.9863 146.368 45.9634 145.942 45.9185 145.745 cv
45.8726 145.549 45.7871 145.369 45.6611 145.205 cv
45.5645 145.082 45.4326 144.974 45.2656 144.879 cv
45.0986 144.786 44.9009 144.738 44.6724 144.738 cv
44.4438 144.738 44.2461 144.786 44.0791 144.879 cv
43.9121 144.974 43.7803 145.082 43.6836 145.205 cv
43.5576 145.369 43.4717 145.549 43.4263 145.745 cv
43.3809 145.942 43.3584 146.368 43.3584 147.024 cv
cp
42.3872 147.024 mo
42.3872 146.254 42.4077 145.757 42.4487 145.534 cv
42.4897 145.312 42.563 145.107 42.6685 144.919 cv
42.8179 144.641 43.063 144.379 43.4048 144.133 cv
43.7456 143.887 44.1685 143.764 44.6724 143.764 cv
45.1733 143.764 45.5942 143.887 45.936 144.133 cv
46.2769 144.379 46.5254 144.641 46.6807 144.919 cv
46.7832 145.107 46.855 145.312 46.896 145.534 cv
46.937 145.757 46.9575 146.254 46.9575 147.024 cv
46.9575 147.795 46.937 148.291 46.896 148.514 cv
46.855 148.736 46.7832 148.942 46.6807 149.129 cv
46.5254 149.41 46.2769 149.672 45.936 149.913 cv
45.5942 150.155 45.1733 150.276 44.6724 150.276 cv
44.1685 150.276 43.7456 150.155 43.4048 149.913 cv
43.063 149.672 42.8179 149.41 42.6685 149.129 cv
42.563 148.942 42.4897 148.736 42.4487 148.514 cv
42.4077 148.291 42.3872 147.795 42.3872 147.024 cv
cp
f
49.0625 144.682 mo
49.0625 146.624 li
50.5303 146.624 li
50.8936 146.624 51.166 146.524 51.3477 146.32 cv
51.5293 146.119 51.6201 145.881 51.6201 145.61 cv
51.6201 145.283 51.5117 145.041 51.2949 144.879 cv
51.1133 144.748 50.8774 144.682 50.5874 144.682 cv
49.0625 144.682 li
cp
48.0913 150.223 mo
48.0913 143.82 li
50.5962 143.82 li
51.144 143.82 51.5776 143.961 51.897 144.242 cv
52.0757 144.398 52.2271 144.593 52.3516 144.826 cv
52.4761 145.062 52.5386 145.322 52.5386 145.61 cv
52.5386 146.022 52.4277 146.388 52.207 146.705 cv
51.9854 147.024 51.6816 147.248 51.2949 147.38 cv
52.7803 150.223 li
51.6289 150.223 li
50.3062 147.49 li
49.0625 147.49 li
49.0625 150.223 li
48.0913 150.223 li
cp
f
8.15381 154.916 mo
10.0083 154.916 li
9.87354 154.521 9.76709 154.211 9.68994 153.986 cv
9.61182 153.763 9.54443 153.565 9.48779 153.391 cv
9.43018 153.219 9.37256 153.043 9.31396 152.863 cv
9.25537 152.686 9.17773 152.444 9.08105 152.139 cv
8.97852 152.455 8.89648 152.708 8.83496 152.897 cv
8.77344 153.086 8.71436 153.268 8.65674 153.444 cv
8.6001 153.619 8.53369 153.817 8.45947 154.033 cv
8.38428 154.25 8.28271 154.544 8.15381 154.916 cv
cp
6.33447 157.219 mo
8.67236 150.812 li
9.47217 150.812 li
11.8101 157.219 li
10.7905 157.219 li
10.2983 155.774 li
7.86816 155.774 li
7.3584 157.219 li
6.33447 157.219 li
cp
f
12.6143 157.223 mo
12.6143 150.82 li
13.5327 150.82 li
16.4287 155.373 li
16.4463 155.373 li
16.4463 150.82 li
17.4219 150.82 li
17.4219 157.223 li
16.5034 157.223 li
13.6074 152.67 li
13.5854 152.67 li
13.5854 157.223 li
12.6143 157.223 li
cp
f
19.7378 151.738 mo
19.7378 156.309 li
20.9023 156.309 li
21.4355 156.309 21.8311 156.123 22.0889 155.751 cv
22.1943 155.59 22.2607 155.416 22.2886 155.231 cv
22.3164 155.044 22.3306 154.654 22.3306 154.059 cv
22.3306 153.486 22.3149 153.088 22.2847 152.868 cv
22.2534 152.649 22.1738 152.451 22.0449 152.276 cv
21.7783 151.918 21.3975 151.738 20.9023 151.738 cv
19.7378 151.738 li
cp
18.7666 157.223 mo
18.7666 150.82 li
21.0078 150.82 li
21.8838 150.82 22.5342 151.18 22.959 151.897 cv
23.1172 152.17 23.2139 152.424 23.249 152.662 cv
23.2842 152.899 23.3018 153.354 23.3018 154.024 cv
23.3018 154.744 23.2778 155.226 23.229 155.468 cv
23.1812 155.709 23.085 155.942 22.9414 156.164 cv
22.751 156.463 22.4893 156.714 22.1567 156.918 cv
21.8242 157.121 21.4209 157.223 20.9463 157.223 cv
18.7666 157.223 li
cp
f
27.7764 153.834 mo
27.7764 146.008 li
28.9634 146.008 li
28.9634 152.717 li
32.7822 152.717 li
32.7822 153.834 li
27.7764 153.834 li
cp
f
128.059 154.916 mo
129.913 154.916 li
129.778 154.521 129.672 154.211 129.595 153.986 cv
129.517 153.763 129.449 153.565 129.393 153.391 cv
129.335 153.219 129.277 153.043 129.219 152.863 cv
129.16 152.686 129.082 152.444 128.985 152.139 cv
128.883 152.455 128.801 152.708 128.739 152.897 cv
128.678 153.086 128.619 153.268 128.562 153.444 cv
128.505 153.619 128.438 153.817 128.364 154.033 cv
128.289 154.25 128.188 154.544 128.059 154.916 cv
cp
126.239 157.219 mo
128.577 150.812 li
129.377 150.812 li
131.715 157.219 li
130.695 157.219 li
130.203 155.774 li
127.772 155.774 li
127.263 157.219 li
126.239 157.219 li
cp
f
132.519 157.223 mo
132.519 150.82 li
133.438 150.82 li
136.333 155.373 li
136.351 155.373 li
136.351 150.82 li
137.326 150.82 li
137.326 157.223 li
136.408 157.223 li
133.512 152.67 li
133.49 152.67 li
133.49 157.223 li
132.519 157.223 li
cp
f
139.643 151.738 mo
139.643 156.309 li
140.807 156.309 li
141.34 156.309 141.735 156.123 141.993 155.751 cv
142.099 155.59 142.165 155.416 142.193 155.231 cv
142.221 155.044 142.235 154.654 142.235 154.059 cv
142.235 153.486 142.22 153.088 142.189 152.868 cv
142.158 152.649 142.078 152.451 141.949 152.276 cv
141.683 151.918 141.302 151.738 140.807 151.738 cv
139.643 151.738 li
cp
138.671 157.223 mo
138.671 150.82 li
140.912 150.82 li
141.788 150.82 142.438 151.18 142.863 151.897 cv
143.021 152.17 143.118 152.424 143.153 152.662 cv
143.188 152.899 143.206 153.354 143.206 154.024 cv
143.206 154.744 143.183 155.226 143.134 155.468 cv
143.086 155.709 142.989 155.942 142.846 156.164 cv
142.655 156.463 142.394 156.714 142.062 156.918 cv
141.729 157.121 141.325 157.223 140.851 157.223 cv
138.671 157.223 li
cp
f
100.908 150.223 mo
99.5068 147.842 li
98.1006 150.223 li
97.0059 150.223 li
98.9658 146.941 li
97.1289 143.82 li
98.2275 143.82 li
99.5068 146.039 li
100.781 143.82 li
101.88 143.82 li
100.043 146.941 li
102.007 150.223 li
100.908 150.223 li
cp
f
103.343 147.024 mo
103.343 147.684 103.365 148.111 103.411 148.307 cv
103.456 148.504 103.542 148.681 103.668 148.839 cv
103.765 148.968 103.896 149.078 104.063 149.171 cv
104.23 149.263 104.429 149.309 104.657 149.309 cv
104.886 149.309 105.083 149.263 105.25 149.171 cv
105.417 149.078 105.549 148.968 105.646 148.839 cv
105.771 148.681 105.857 148.504 105.903 148.307 cv
105.948 148.111 105.971 147.684 105.971 147.024 cv
105.971 146.368 105.948 145.942 105.903 145.745 cv
105.857 145.549 105.771 145.369 105.646 145.205 cv
105.549 145.082 105.417 144.974 105.25 144.879 cv
105.083 144.786 104.886 144.738 104.657 144.738 cv
104.429 144.738 104.23 144.786 104.063 144.879 cv
103.896 144.974 103.765 145.082 103.668 145.205 cv
103.542 145.369 103.456 145.549 103.411 145.745 cv
103.365 145.942 103.343 146.368 103.343 147.024 cv
cp
102.372 147.024 mo
102.372 146.254 102.393 145.757 102.434 145.534 cv
102.475 145.312 102.548 145.107 102.653 144.919 cv
102.803 144.641 103.048 144.379 103.39 144.133 cv
103.73 143.887 104.153 143.764 104.657 143.764 cv
105.158 143.764 105.579 143.887 105.921 144.133 cv
106.262 144.379 106.51 144.641 106.665 144.919 cv
106.768 145.107 106.84 145.312 106.881 145.534 cv
106.922 145.757 106.942 146.254 106.942 147.024 cv
106.942 147.795 106.922 148.291 106.881 148.514 cv
106.84 148.736 106.768 148.942 106.665 149.129 cv
106.51 149.41 106.262 149.672 105.921 149.913 cv
105.579 150.155 105.158 150.276 104.657 150.276 cv
104.153 150.276 103.73 150.155 103.39 149.913 cv
103.048 149.672 102.803 149.41 102.653 149.129 cv
102.548 148.942 102.475 148.736 102.434 148.514 cv
102.393 148.291 102.372 147.795 102.372 147.024 cv
cp
f
109.047 144.682 mo
109.047 146.624 li
110.515 146.624 li
110.878 146.624 111.15 146.524 111.332 146.32 cv
111.514 146.119 111.604 145.881 111.604 145.61 cv
111.604 145.283 111.496 145.041 111.279 144.879 cv
111.098 144.748 110.862 144.682 110.572 144.682 cv
109.047 144.682 li
cp
108.076 150.223 mo
108.076 143.82 li
110.581 143.82 li
111.129 143.82 111.563 143.961 111.882 144.242 cv
112.061 144.398 112.212 144.593 112.336 144.826 cv
112.461 145.062 112.523 145.322 112.523 145.61 cv
112.523 146.022 112.412 146.388 112.191 146.705 cv
111.97 147.024 111.666 147.248 111.279 147.38 cv
112.765 150.223 li
111.613 150.223 li
110.291 147.49 li
109.047 147.49 li
109.047 150.223 li
108.076 150.223 li
cp
f
118.609 147.061 mo
118.609 149.435 li
120.403 149.435 li
120.848 149.435 121.181 149.311 121.402 149.065 cv
121.625 148.817 121.735 148.527 121.735 148.194 cv
121.735 147.797 121.604 147.499 121.338 147.303 cv
121.116 147.141 120.828 147.061 120.474 147.061 cv
118.609 147.061 li
cp
117.423 153.834 mo
117.423 146.008 li
120.484 146.008 li
121.153 146.008 121.684 146.18 122.074 146.524 cv
122.292 146.713 122.478 146.951 122.63 147.238 cv
122.782 147.525 122.858 147.843 122.858 148.194 cv
122.858 148.699 122.723 149.146 122.452 149.534 cv
122.183 149.923 121.811 150.197 121.338 150.359 cv
123.153 153.834 li
121.746 153.834 li
120.13 150.492 li
118.609 150.492 li
118.609 153.834 li
117.423 153.834 li
cp
f
10.0708 315.595 mo
10.0708 307.769 li
11.2578 307.769 li
11.2578 314.478 li
15.0767 314.478 li
15.0767 315.595 li
10.0708 315.595 li
cp
f
19.8159 313.286 mo
21.6704 313.286 li
21.5356 312.891 21.4292 312.581 21.3521 312.357 cv
21.2739 312.133 21.2065 311.935 21.1499 311.761 cv
21.0923 311.589 21.0347 311.413 20.9761 311.234 cv
20.9175 311.056 20.8398 310.814 20.7432 310.509 cv
20.6406 310.825 20.5586 311.078 20.4971 311.267 cv
20.4355 311.456 20.3765 311.638 20.3188 311.814 cv
20.2622 311.989 20.1958 312.187 20.1216 312.403 cv
20.0464 312.62 19.9448 312.914 19.8159 313.286 cv
cp
17.9966 315.589 mo
20.3345 309.182 li
21.1343 309.182 li
23.4722 315.589 li
22.4526 315.589 li
21.9604 314.144 li
19.5303 314.144 li
19.0205 315.589 li
17.9966 315.589 li
cp
f
24.2764 315.593 mo
24.2764 309.191 li
25.1948 309.191 li
28.0908 313.743 li
28.1084 313.743 li
28.1084 309.191 li
29.084 309.191 li
29.084 315.593 li
28.1655 315.593 li
25.2695 311.04 li
25.2476 311.04 li
25.2476 315.593 li
24.2764 315.593 li
cp
f
31.3999 310.109 mo
31.3999 314.679 li
32.5645 314.679 li
33.0977 314.679 33.4932 314.493 33.751 314.121 cv
33.8564 313.96 33.9229 313.786 33.9507 313.601 cv
33.9785 313.414 33.9927 313.025 33.9927 312.429 cv
33.9927 311.856 33.9771 311.458 33.9468 311.238 cv
33.9155 311.019 33.8359 310.821 33.707 310.646 cv
33.4404 310.288 33.0596 310.109 32.5645 310.109 cv
31.3999 310.109 li
cp
30.4287 315.593 mo
30.4287 309.191 li
32.6699 309.191 li
33.5459 309.191 34.1963 309.55 34.6211 310.267 cv
34.7793 310.54 34.876 310.794 34.9111 311.032 cv
34.9463 311.269 34.9639 311.724 34.9639 312.394 cv
34.9639 313.114 34.9399 313.596 34.8911 313.838 cv
34.8433 314.079 34.7471 314.312 34.6035 314.534 cv
34.4131 314.833 34.1514 315.084 33.8188 315.288 cv
33.4863 315.491 33.083 315.593 32.6084 315.593 cv
30.4287 315.593 li
cp
f
40.0732 308.821 mo
40.0732 311.195 li
41.8672 311.195 li
42.311 311.195 42.644 311.071 42.8662 310.825 cv
43.0884 310.577 43.1992 310.288 43.1992 309.954 cv
43.1992 309.558 43.0669 309.26 42.8018 309.064 cv
42.5796 308.902 42.2915 308.821 41.937 308.821 cv
40.0732 308.821 li
cp
38.8862 315.595 mo
38.8862 307.769 li
41.9478 307.769 li
42.6172 307.769 43.1475 307.941 43.5376 308.284 cv
43.7559 308.474 43.9414 308.712 44.0938 308.999 cv
44.2456 309.285 44.3218 309.604 44.3218 309.954 cv
44.3218 310.46 44.1865 310.906 43.916 311.295 cv
43.646 311.684 43.2744 311.958 42.8018 312.119 cv
44.6172 315.595 li
43.21 315.595 li
41.5933 312.253 li
40.0732 312.253 li
40.0732 315.595 li
38.8862 315.595 li
cp
f
106.949 315.595 mo
106.949 307.769 li
108.137 307.769 li
108.137 314.478 li
111.955 314.478 li
111.955 315.595 li
106.949 315.595 li
cp
f
118.689 315.593 mo
117.288 313.212 li
115.882 315.593 li
114.787 315.593 li
116.747 312.311 li
114.91 309.191 li
116.009 309.191 li
117.288 311.409 li
118.563 309.191 li
119.661 309.191 li
117.824 312.311 li
119.788 315.593 li
118.689 315.593 li
cp
f
121.124 312.394 mo
121.124 313.054 121.146 313.482 121.192 313.677 cv
121.237 313.874 121.323 314.051 121.449 314.209 cv
121.546 314.338 121.678 314.448 121.845 314.541 cv
122.012 314.633 122.21 314.679 122.438 314.679 cv
122.667 314.679 122.864 314.633 123.031 314.541 cv
123.198 314.448 123.33 314.338 123.427 314.209 cv
123.553 314.051 123.639 313.874 123.685 313.677 cv
123.729 313.482 123.752 313.054 123.752 312.394 cv
123.752 311.738 123.729 311.312 123.685 311.115 cv
123.639 310.919 123.553 310.739 123.427 310.575 cv
123.33 310.452 123.198 310.344 123.031 310.249 cv
122.864 310.156 122.667 310.109 122.438 310.109 cv
122.21 310.109 122.012 310.156 121.845 310.249 cv
121.678 310.344 121.546 310.452 121.449 310.575 cv
121.323 310.739 121.237 310.919 121.192 311.115 cv
121.146 311.312 121.124 311.738 121.124 312.394 cv
cp
120.153 312.394 mo
120.153 311.624 120.174 311.127 120.215 310.904 cv
120.256 310.682 120.329 310.477 120.435 310.289 cv
120.584 310.011 120.829 309.749 121.171 309.503 cv
121.512 309.257 121.935 309.134 122.438 309.134 cv
122.939 309.134 123.36 309.257 123.702 309.503 cv
124.043 309.749 124.291 310.011 124.446 310.289 cv
124.549 310.477 124.621 310.682 124.662 310.904 cv
124.703 311.127 124.724 311.624 124.724 312.394 cv
124.724 313.165 124.703 313.661 124.662 313.884 cv
124.621 314.107 124.549 314.312 124.446 314.499 cv
124.291 314.78 124.043 315.042 123.702 315.283 cv
123.36 315.526 122.939 315.646 122.438 315.646 cv
121.935 315.646 121.512 315.526 121.171 315.283 cv
120.829 315.042 120.584 314.78 120.435 314.499 cv
120.329 314.312 120.256 314.107 120.215 313.884 cv
120.174 313.661 120.153 313.165 120.153 312.394 cv
cp
f
126.828 310.052 mo
126.828 311.994 li
128.296 311.994 li
128.659 311.994 128.932 311.894 129.113 311.691 cv
129.295 311.489 129.386 311.251 129.386 310.98 cv
129.386 310.653 129.277 310.411 129.061 310.249 cv
128.879 310.118 128.644 310.052 128.354 310.052 cv
126.828 310.052 li
cp
125.857 315.593 mo
125.857 309.191 li
128.362 309.191 li
128.91 309.191 129.344 309.331 129.663 309.612 cv
129.842 309.768 129.993 309.963 130.117 310.196 cv
130.242 310.432 130.305 310.693 130.305 310.98 cv
130.305 311.392 130.193 311.758 129.973 312.075 cv
129.751 312.394 129.447 312.618 129.061 312.75 cv
130.546 315.593 li
129.395 315.593 li
128.072 312.861 li
126.828 312.861 li
126.828 315.593 li
125.857 315.593 li
cp
f
135.321 308.821 mo
135.321 311.195 li
137.115 311.195 li
137.56 311.195 137.893 311.071 138.114 310.825 cv
138.337 310.577 138.447 310.288 138.447 309.954 cv
138.447 309.558 138.315 309.26 138.05 309.064 cv
137.828 308.902 137.54 308.821 137.186 308.821 cv
135.321 308.821 li
cp
134.135 315.595 mo
134.135 307.769 li
137.196 307.769 li
137.865 307.769 138.396 307.941 138.786 308.284 cv
139.004 308.474 139.189 308.712 139.342 308.999 cv
139.494 309.285 139.57 309.604 139.57 309.954 cv
139.57 310.46 139.435 310.906 139.164 311.295 cv
138.895 311.684 138.522 311.958 138.05 312.119 cv
139.865 315.595 li
138.458 315.595 li
136.842 312.253 li
135.321 312.253 li
135.321 315.595 li
134.135 315.595 li
cp
f
111.492 351.173 mo
104.992 351.173 li
@
111 345.173 mo
111 351.173 li
@
117.496 345.673 mo
110.996 345.673 li
@
117.004 351.673 mo
117.004 345.673 li
@
132.5 351.173 mo
129 351.173 li
@
132 345.173 mo
132 351.173 li
@
135.5 345.673 mo
132 345.673 li
@
135 351.673 mo
135 345.673 li
@
138.5 351.173 mo
135 351.173 li
@
138 345.173 mo
138 351.173 li
@
141.5 345.673 mo
137.5 345.673 li
@
141 351.673 mo
141 345.673 li
@
39.5122 351.173 mo
33.0122 351.173 li
@
39.0205 345.173 mo
39.0205 351.173 li
@
45.5161 345.673 mo
39.0161 345.673 li
@
45.0244 351.673 mo
45.0244 345.673 li
@
12.4922 351.173 mo
8.99219 351.173 li
@
11.9922 345.173 mo
11.9922 351.173 li
@
15.4922 345.673 mo
11.9922 345.673 li
@
14.9922 351.673 mo
14.9922 345.673 li
@
18.4922 351.173 mo
14.9922 351.173 li
@
17.9922 345.173 mo
17.9922 351.173 li
@
21.4922 345.673 mo
17.4922 345.673 li
@
20.9922 351.673 mo
20.9922 345.673 li
@
57.1313 56.3771 mo
55.7295 53.9963 li
54.3232 56.3771 li
53.229 56.3771 li
55.189 53.0949 li
53.3521 49.9748 li
54.4507 49.9748 li
55.7295 52.1935 li
57.0039 49.9748 li
58.1025 49.9748 li
56.2656 53.0949 li
58.23 56.3771 li
57.1313 56.3771 li
cp
f
59.9263 56.3771 mo
59.9263 53.7453 li
58.0059 49.9748 li
59.0254 49.9748 li
60.3877 52.8185 li
61.7456 49.9748 li
62.7695 49.9748 li
60.8447 53.7453 li
60.8447 56.3771 li
59.9263 56.3771 li
cp
f
90.9912 56.3771 mo
89.5898 53.9963 li
88.1836 56.3771 li
87.0889 56.3771 li
89.0488 53.0949 li
87.2119 49.9748 li
88.3105 49.9748 li
89.5898 52.1935 li
90.8643 49.9748 li
91.9629 49.9748 li
90.126 53.0949 li
92.0898 56.3771 li
90.9912 56.3771 li
cp
f
95.8125 56.3771 mo
94.4102 53.9963 li
93.0039 56.3771 li
91.9102 56.3771 li
93.8701 53.0949 li
92.0332 49.9748 li
93.1318 49.9748 li
94.4102 52.1935 li
95.6846 49.9748 li
96.7832 49.9748 li
94.9463 53.0949 li
96.9111 56.3771 li
95.8125 56.3771 li
cp
f
42.6001 173.973 mo
107.6 173.973 li
107.6 192.473 li
42.6001 192.473 li
42.6001 173.973 li
cp
.732845 .672084 .657374 .825711 cmyk
f
42.6001 173.973 mo
107.6 173.973 li
107.6 192.473 li
42.6001 192.473 li
42.6001 173.973 li
cp
.676844 .618402 .580743 .45658 cmyk
@
42.6001 245.973 mo
107.6 245.973 li
107.6 264.473 li
42.6001 264.473 li
42.6001 245.973 li
cp
.732845 .672084 .657374 .825711 cmyk
f
42.6001 245.973 mo
107.6 245.973 li
107.6 264.473 li
42.6001 264.473 li
42.6001 245.973 li
cp
.676844 .618402 .580743 .45658 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/GSMMQU+AlteDIN1451Mittelschrift*1 uf/GSMMQU+AlteDIN1451Mittelschrift uf/AlteDIN1451Mittelschrift ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 17.0%%AI8_CreatorVersion: 23.0.1%%For: (Dale Johnson) ()%%Title: (AmalgamPanelDarkAllRed2InkScape.eps)%%CreationDate: 29/12/2018 14:05%%Canvassize: 16383%AI9_DataStream%Gb!R&pL=!1dK$d1^cTL,N_P9CH4)![OH>Pn$oif7A&E#1m'EmQ4)U;Sh0\m?:&s%SAi,qoc&=KBb>heaQfI?$]=@\fHUaT\@VPCl%8l0/bc/ks$mhp#@5UmFB8!B>LQ&I'3GRTf`_dkfr+QM^.1*0)\O^T^S,KWV/'htS=R7%B]<F1Zn$YHs6YcAAREM_35`H'Y<dbj]f%m"YKD:[#,K1S:lM4=e_Ad7j7+Fg^"TU4rDt.5u.DG_3MpDDo_/)bnuLf1&fH]3VW';eBkB7\Pq]<2Xf7\mcKJk)>1O8U-GV%Z9$*%I!iP3$lLsMQAD<jYlR2cOTTh0Pi6P*4#L\&^n!*af`:RCGbD:AFOP0NgBd5%;t3O29#["P4.]"j^n#!c6Y59)'U;5/j68P76\8sm%GVkQ.,a'$a-URsR;cJKF:pD97SU"T2RI;T6@Hl$Y[=%`=R'E^bJnAYcXRjLh*pj2EZ(BD`#'F3$&Peinkm[?OIe)S#.8ZF/P`15b%TgXc#M^@<--l'X2U^gr7Qnj/'cftp%AlqaM!k[\lrrL'3ic1."TD6P,G0[=Qb:2e=,eTDY`4T64R<]Qg)?5/.:*U[Os![+F(O2V+%De9*]EAcXjk%E#g!X-kQ/c'AiEYF--[+EOm@F[_IL8[L"RKc/+!QQO]YrHE,1)8*1da<:pPE)MMe6*,T5>Gej8!BTN-?DX&PNal\%,bol\#a==P4=['p8Y6h%#S068d")&N!M%PLVr,s72AD.5OKp=Z1c9G;Q?\.ALEU!'"Q5De$nt1<lP9OBNWPNf,Y=.k6o2pnjI/IN%E"KMu"&bFU,G`2uGR".?,q3d<U)aFnM#NP,A1X0?$"O)O#=>]VaTd")F<fgW147Qi#X;"53%X;CkcP&]82Pa\"q<*bAmCYd%1V0l%P-H:jLVM,lIr?1Ljs%XV=:BX*POK69#6.:AiGL1N^LK"n1_t^>@kmng>(pnT[us<b.[brkaWrF&9Ys]LA@3o:RE<6"R1(VKRg@os%A72B1#*skUi$U'U.`##Z&q%#bJknub=Jf8U:TN#V'#%YR_WTH!IKsAAn\t92M"iEH;g9>cEWSI6.G-!B#tr)m#qa-B@#Nqj/-B)Z%5@M/-9&Oo%S)>[,Jh;SHYU3$k>Vg1.r.OHlhs`77'824AM;c?MY[-`3QDmpD4e[?Jk*X/UMO7$*'>KB.Nj6X7A)&b[Lq1l&64*Q#%Q@eLVT<KZtK=KJ,)=B6S%84P2#sF6HK&;:LK:hW?[LW$rr5=u?47EoLK'e2_\/-ld@(KhB8.9_aJ=$`B,P2kn%oXL7_K6ITJm48?%LR;Sa0O.khcsO;9n.1h9XV3Z-[LU$2>E,8lp;'O,$M-2m+/T?n(Oj4VY]Vjj^tF>+@*2m`R(EMC(3i:+2MaBU'[-r:>R5b8l&N$d%<6&r4h&tiHNsKU?\AM2GFBgnV+$[gG0]lIm0fS,Va0`Z?<7*qS^QPtaGAJlt=s_9'kTo[^k&,b=-2rO890=Ij]%"n)Q)/q[(^ZF[%DbJRkE#%jWi8T(QRhS;cJ++Cm7>h*]NT)>62uX$e:A@W]`rBkX6iu8.^@As;$=?H`pg6(AYL@1dG+/G4.,ZK$2uZl0ibRcts0K8Y%AUI#E`r@M'HnBd,J#)iMlZ:^&n.YOH^)!m@2eZPT?A^,1A[34K<R]kfK>4B"r(`MCTl`++79AbmRgY1@;1(n0#OcE`Qe)5pQJY8%%!N\%Z!E[fN);^(Ti'7!>8.32j+,5cY&Dfi9^=n'EE%f+4$35-LZB3*!VTPlY,$IOTC\S?R/<b)GX]Z1ma>Ar0^_>=QlbIu]$G9;.%j#ca&pmim%R`k6OVCh_!\AHrt#R^P?V#fJk0]4mgV$n1sWn1/\=8WG8Y1K/9NWLa>lc$WhAanG:Q-3,=eQ`=X#_F2,?i(A^gpi$F%[fLXVIB<Ap@(ssZd)RjJF/gs5SIW(2(\=(MO(a#9YkNEA%MqIfT5$n8p22gD9C\1*Fb_*s:_JKZTF@gf#snRsEWVk"DGf<QgW/n=%Q;+oe'"A=8Ji$PCV7=l-J_+o/"eK`<oY.-QE3362+>d>,P&'t79<_*e7&ihd<NEV^W>u&2+heeNKWWVY;JDgOXInSO-.!B:">Rl6%A#Y2Yq3"`DRmG.`\gAl5&CV)TL3cS(-ZL]`dm-.>Z'Vp$^('b(6k)!iCL-NoK6mm:9e!$N+3u-j]]WK]%86J5fGAf!jEVO>&h2+e%Wp7u2l>Kp.)DssC*1+09q&Y89d9Kh+a"AN?a_M^b4FC?MLQic)eKh&j>WT98Mc"uk[MqRJ>.;\?;GS*R.7KK'ipg6_UZ>HAmaNJ^%Hu+Jk!]^b^Zr3pRe/-,DGpt<%E]t2oi;5\]a?AHpSuUF@JG011kO6D:/Z)6^;1=[11J.'%@%3D06<s]n[K`m8H;$O!n&i$VHSs]t%hA+n%s6]]CHVDjJEilEZL\@>o)X.38[mT!/kc[[FjmU@g.'83R+dRn:'km=O?9<S!KNO@nC7:)kH3rK=h=<YmDg;jDGoFLOWZ^^!%%GS#9Hg3i_pE9^*1tRATrY*9Sa`aoJ`MgNT))I&OreBq$gNZ]OKl?r<k>\8\=aOB25qNMhYh-/qomI0am3$BZ-.=X3<7$sE.ob/L%S!V'fJ:h7c@4d=Q+Z\\b1'YIgi0co)#\nBjT8QO"Vt,sTo%0nS&%LBOGSH8s-[ZGc3HE>s\qSjXNsVR0/h)bO&::t\/@DF6Ccu2@%`:'a@^3^CB03F;Kc%Wd^JeU[H@8t/iX>%rjj&89Q1DM1hM:PQkTETcX[SGgi5qD5/XJ['A>U;R(0N.H_d$JRbmY.#Ed_[E5[]u'>%mdcIXWM31`_@ZG`VOH<*&Dkua9>U3'dAl>Y$+;o8rP@<sU.#D?Q*"*@K'LF.^mFW>8P+7hSeB:n/EPTZb4C=iQGD(CGR'4NkZd7>%L!:b!J2pQ2*Q0Zn-/c8Im3(U(r2o$Ra\TjBTXP)P9l(hq*LLk^SVf.eqTZTPPdQnA>U>peMd,m5d+c2'Zbp\f_8jJJU*P[+M%LC)%1i)-OAF5eM;jK0XrN6#i;9=5V?Uu8F`l^Dm"d.q9rf1F::Zu^gWoO_u0Tp2`m9#E+'&q;15+Y=*K+t^i5*tSK4Z`/*Un$&rM!O)Q%O0e/;8@h73WClP#nl8.K!TX:(`sQC":+cFa4J^KJ>2P]^o(tP08-]Eh$#;9kpb(c,\MpF&[2$HpN)Os!B.8/9b<PQ9AE=_E5&I;j%Y[t7L</N=8p40rFQj5#O/%'!;rf\PsK(XXG#]*r8O771mPVB0/,9W!d#i<$%*CO.3e`*:Y[O^Ml"A[L*DQ3F9CPS:/(:nuWUB^:f%'R/'eSbc,%mAg'ZTn3K4\4GiPST\-SgU,h';bLhOM<"/eKUQApbFI?p7Pn39Kh@8<N,m)?Q?8:gO"AA3*-4DM8<F7]8>+`o:g72U%7S^K'/GC^""r4BrM5*s;`(Hl.e=&tsdHkTRosggi@^URiOY\d[rDJ<3NuTE6/9sC[nBf+`_QH(hj!f4Cb'T#e'Uh&:I9U1iX\/&?%j(DO4WUVC8MR/1<A=Zr!WfbbfY/>0.4oYXL1M8<9Tfk&Bb\^N?=-#ZE8BG:i==`ZrIHHodeSe,=\`ToLF6D0`i&NZSEK[,%i+V4S%,#Lu^9i7&M"YCnAeNhCp`^OT*9-)KHhNW!@kFg;PCc1oHV:dD),Q,Q&g[M3#btE&3.\8(b#\19R-!9a6\#S)Q`=Wc?:=;h(49g^J%MK'6&-UR`9h&=D<`R&/g-0:AQCdl`I"!o5fC@(s0:6j_iO)'_eme;i?8Y9.PdSmPX$grJ2n"Z-nW[5Tk)Nn/KMr7Rrn#7Q3qAM[!%)b4%Ug?u=PlODs'JS\ji#jXSU*!Iu69+tW',)hT2m&LgF'W`?Are6`4e-gYO0J1@K6C]4=hp=iYcSGmn:O)8[ic5,"I#DNA*lM<@%Nehb6<=DCe$RDf"lU^M4`>'^;gf+,%YNZB-e8@+7$S,][=^f0;a@nTtZEZf)2m)Fbj$,7f:LUuRqA+F@=LUp8J;!'RLYY2*`?fb<%=DnNb?MJC2[Lte5<u;r3G(NeM=$`KmNT`MCb9Wr#N.^`&$.)A,3"'M9eE1a$8eR##;0eP[rj;TA/W&*U_qpp.jf0lPE&fiU<E_!4%@XV!RW81l`o@5dK-N6J1]$+cu[_:C(RE4i?[:-T0npAZPAWi0oQMuMflb+NsnW[Iu'/!0j_;e(#`/LVc3?>*GU[<emghs"\0b\7/%`GCZ,nI6BQTi#Y=H8K2'gVqd7q("d)AaoRRWdH'kcCd+5&I-"maBiGr=/WS).5!EAQ'mM@QDf+6A;/40E7pMXlq/h@_Ph9jd4Hu^%Q&=9>>I!O^rr-N^a;?&@0Tcs?GD+^)ll<Hc@n&.J+YqiukKG9YVHHH@ocsUq=O>7]E"8hbU4a"QgGgrlXoE"2higcF_pW$!VK>3[%%O/FPEjZc@?]dZ$dcT[K2mJ4Kf(1K&QnGjG+lW<:Af4`fe[KBWjb3(;48r\S<RW5rIkPJQ[%5)BT`>Pio?_ur$jR_3?N%En0Ro)E%oE+sogbg,"F7=eVf%59Q3d2C"mk*a<B!L(6RBMTlKdjj^kL2;)3ObkU9Vd2#UVJZ)s&FoW+HJ(o!2Tt-5[T>0!Js[M_?I(U>tOe\%c11Fe.:a!PBHk^uiib#$`][MYZ7CSWOq\LHFG6a$7D>Xl_*!&EaH8?1ZPl186%(?,foY>5&OCL>MJacA/I,Cr(+I=,Zm,BQ^mn76%OfMm<2":HuS6[(CTa!.!`eE-PqLj%$EJ[1ji_a%,,CVJ(4iMEiM!T!6&IWp'6@NPb>`9^IJ\WIh-/'-&CmX$9]3WYFm0:YjC<=[D%,9"4-H`3TBR`+mWJ_MfEm+Et8Lbk*RR]7o//!u$V4WEU]Fm8(9]gd*NMWiWGdsW9D0G6Wh$7ME-YZp8KmknU%V32NGrb#1[('.rV%I^eqh>U1QCjVJK'c/1;8KVUs=J8Sq3a:.RT7\qO^UHh=cVY#6urVDBO)D"^V=(KRY`nM*P+B)+s#3s&c9\kT5(X+gdAtq,<#Z)@7%hTi&n.RL>T$\.\KAC?Sq1Z-Pl;(BjI3=sJcR,p8J(6+N^n/S\2T_nIm\=*pPpfl/:"=F-KF@QT.--Qk)h6,_#oUn"tJk%\A[9Y_W%?RqVT0O>3VZQ;qk5hc6H`b4\t&%M,"Gu:FY+<8c.bAV>OQ3l$h[El(glC;IS1].fsM(XL#o=)oef8<j)YN*6[jWD]o[?agNbF-u6%RF=ft4[\t_l<7+?:j-M;*iVJ.OP)a#W0(N!2&n4I&C=;)DGWUla;e"aW,Zq`kT8Zo5?I2F"PB(DNeMb5.lIf<`44CdN7j.:l?`9<%a46-YEQTlOfB%3;:g->0VY`:h5qR1`G6G8.fWud6jX+UNX4:IT<q/`I62idR$d8Qo_!%F-QL-!n1!tTk(JmIKYT*McIjlr=*A'8/%iVs7D&e1oXAEllZ>$s1YMt#fRp?O'PU,fH/3"ZS5PcBHf$K&2Fm:X5K!.q5GPRP`Ws.k5@\#)M[BFo)97ZN%%FLT^.,LL24=Mq63%ZgNKQ1J$/PP$P?0"<<Wej&.:92IKrp#bcf>-DADg+)ZUD#8Z&sRg"=i`m;p=HTM9m[m9u\5*#E`_AF0SM9/UTEKg%id,rkG%6UA8%]8-B@8_bS:-N!8-G\?LZQo;\S)d#P;895)"#BXsO"\i+%QG@m)`dDE]>C+,U"`9CiF9/HXTa5qp[ZRk[D!LAT[L%fNjOs.^i8P[Q%p]7l'"Dp023I?0%cc4o:o0"Su$k-r7AtRi'J=Z<9^3.fDr"l"<c&hr?=AWU3KJT#u1n>nk=H\V3.3W%>+nDgF(&b>/N@DL=7q`Pp%`[VshP0"+IN<30*MRW%FB2UGsmYMKLa"ka^]L0Y9<%8oL;Il"cTPXlGM0PI],nd1Z/.VETLln)^)9]f9$.?q/l<eF.ikM5*PQ)A"%V#DmK8H2aH^PV7T?Y'-QBeg>!0/b9tq[[c</%A5jkF;3od/X_Q[)3F3S:^FB;*&P]-5Ni-,Ql6>9'aiF#+5%]Kq71ZgSE]<#Z:*e%+5>)47\,[D;\Y?/E8&?uCk:m4]t$K<<8\=_Pp5`C*//pnr'1*r:m(%?:?=U@_HoiZ^1IogXoXa&X!nB4e*Pt\fB6dQnU9mP;Yb+A%@Q3puc4i6ufl0[JD]`@nf75sk-%HFH\S(,OB*HW^pCnbq\.d9JSse'sU,lY`fH._rEYEsU.PFa7B`QY+?\G\%']nUS\`n&oT5OYr%DJ87R_:R+7L,qt=ifkkn@Qb7&[1"[f+<B@;K&UOO=Y8]W,ZC?G=HSk0Zs'*E!8X$&;+\)4>0IdPU;Y:=Q+o59.K/2M=Eob&#4QI/%l8#-bEm3PaO'.)b[J`q+eLA\0]Rj6Q^Sga2'.IrAIu)Vpa<'@<45>rj;:`5Z<h[JPi5Ho0WR&4R$_2Y(rNmF8Cs=^T_u@KBXo;_\%2:MVrnI),fFF?&N_9qDK1H6np=pf20!dReLYV_k1%/k_Yl"<@%ZuEsIf)'d2N2PFLRC$<>*7Z*se'Vn=L,1e:KBf5W7*U@]J^:?*%oc;\<bo%K-Gsi:X.Y2MMc>FJ:Ed!L_R/V`F[gX1(,=X0>BQ#iqmDe3-.PA,P#J1bbr8,;9K[+<A_bBQRaR`-l(:6\0<W9Cn0>ZZ[%BGW`NDDqu"f1:I(BjSXTb>k(*IT`YtA3(g=$r=&T:G1TTr7Lq\()Xm$j9C+\/9_T8?g)]Zd6Hjj<[\@EF#rEK+rg$=E/L^r;<eRf%BOa]X!c\2P!=rXR0W1#FoSJt-co(s[=q>1iqrXs,N#>i6Ro&ZDh1&u$.Ds_@lIRIASZFNZBi"^]$$u:UbG#K)reJ$$2K,ta_!q;p%eR\\$+(dMONrIBM!33pd49"Pd!H@if6KS4X;TaFdq-Q6&s+eRDRnlQSlag3*nb!e\7",F6.Bjb'V3cD`q9Ng:SNX`56XR%AInn%R%M3Whd"okp2gYLoFUj7GoC"hJEl"6&ic1oJF_YHtd,F/PHLGi(jA^VGGA(IXd"+qk"RO49s0/*Zn-L@nDm"dqHnGgN\!\eNjVbpPM%)gVo$Ugrr9*/TG\bf;$2n<C".]G"'Hm&Ce2WmW,h!8$-"S/tBN;b#`t)TrDG8gY1UKMgEL_/"rVd]'`RW)$GEW=uL>D)ZE6p_gPL%=#3,p+:8=X5S8Q\1.pdS!"6s-)c6Uo=qnTf%+PgY(Z,I(1jYjFZ6&B+C?RL.ip*]pBb6H%?<W`)fCWafi>$]=^MFpnF^6Tb1B!rn%#cP43S?QM[-ra$0RFg[tGr9?=7e@\?*B<[r93mBc)fRZ\UF\&IJ,B:`D?uN*=Ypm@_t$XGXO*n`kAqe9f)r,T#_Js:iM,jU=q'P)%i)7q\MIsnA,C'.(=nM&bl=JGM6a<!.KFk7;DS>%,N?nbNY3E4,o6fqu6<;&X$_!RD>:F"9)6]rH<@N5XQ)s==j/fK@XMe5<"p\%=%K%utm\J75["#PTqnKo<PZnAi'ZQqfHns%m"6/=piPGSbA7M5iP2FJ1Qi7XK8=ZE&#PrDEEZUgb&in1=W=`Og>kYhI]/"b(j*:8M;%%"LJT6$i-hJCH8FdmIF%5o_!=ac!B(OI+B1E_,%"(td)I!BX@?Z"):q?XFeZg#^8M9I&!/c1DDu1sHn^/j-R28JNYD)jXfNCDr//%UVD?k:WI+<a<m.S&6i,siY\@69=*_p1]nX:!+#t1!4&>eZSfE#/``dem@9K>($("BL4Z+0$HBI:\+Z2i=dBekA#eM+P*D^"*FU;Z%!K:>uYq:rJdeL]$=?7d0/#_G?^&3NF,iSD'13o`AS5A/EiI(&Dq#SWSJS"$HlD36$Jt=H0J2%3d%u_j.LNf16(#Z"SV,2H+!j%iN%V0?HN2K,S5&u`qFSGrD?ApH9%'e2GCG%\L!'3_+M(%+Mg(*B4qJ\GdZ&$($c(9<H12\d'$<5?HK/!S1C'l[03_P"3^MB+M5h')5<%EkC$R*\/T"W9>*9S8'`&#`9#'*:kt/7WWYG-'S`<(W""U&A.='c7'l5B9c59Dc$3\F',/5n*'&YlHf<KX:D]*'O0"tl6/bl;i7.1%?d'M&ou2kJ9'$4%!ZiK8h$uGm*0R<Cn/O$b7WoQk9]RLp3#0$'cn.*nksUqjS-L,K"B!ia3nM=OdD*8MPp>[Bk.F<ufZRaulc.>0%S_k%_qa;(bGl9guD<EjGC%^WUT6.][SQ+FQf(u"grZMR)B:0n?*]lZ4YO+5L3mjt7s,m9]-q#o<hDH_N_o]d=LI1;)HObM7m_FT@%>q>'*)T'NXJ^5#*hYXJer:"sXA`\!_\;$@5kcu$uTBG-D)]*sJ).hdg#[J4oGHj%#iO-S70+-shcPQB<]7cL]2HS-:/d0"/5:g?[%YIS8S1%6]<$fA+OVVFNA?6VcNjm[\S"$]*dH<MmTln?#!KU8CTkLHaPrh.(t-;f^sL+Ko(D92e%P)4nb]NY/X^\fJTP$Cd4_["Ur%]dRe,iE.VnNtin5:>t/uF&a_ZIh^8`qd(.$Z`iID:Yf#gDIXcEA;HWBa;7DF5f#`[U?+l2-<bT,B$&@?FoTcPm^88'-^302n)Qj7%rt;FFTjhQ<\-`N?@<97\eA\Z`*l%Kqo?Ub4:"`Gm$V9<^6TPGVkU(NngqF!;oJAeJmFbGeCX9lSBb/"C`k@%B$?8`/Y+&))hJU51%Xk8-60AMV0mU@L%LdQR&iU>Zb5l#/<=`LX:rO(Who!:=!Ne@/brj4(`-)oHRi%nK=XSHB#m'j3$I;c/&eODWgClWh<l"*!sW8+bY%r,6J;$<13ZgLSO=*W>S*A9QcS!`p=!`D^GqSLnr9q.4::4U/J\[<T:jQPhEBWk<^ZMtu`,cRdNB$H,l$=6`Y:c-:NdX1'TH1:Snm%qi3>VP<XV-.!,,dDN#MUS#\NpcXXq>_DP#`,2?8$^lB=4@$Z(niaKU6#*<&i6?c'r!l[e(X&bnG:`s-9$k);rfO"Oa]uA.5S!tpN%Qf>aW#P%:JKYp<6#Y/F4+RJ.b%mcGPidb[p&jbT]2\8bHhcE#A]:JHI55u8pCrVN\*;(g1_+Um(*F:b+hGp$B-i"IF#P+DR3t39c%+E%p2_X;m!&rpAqQ>f:q6c,)iU?fO0-NNU^Z=Jsak2rk#YL6\groSKn#i+*k7'QF5,=6=6+!NfUq2!,doTC=5SNDG_;@F.YCn*n0%qj8WAmYbj))0C6;.;HX2l2487aAh2B,5XoY&Eb:*i'CVZT2NVXeTIA&oe+"9r/qBu`N6gJP[5@4U>fdU7()WU-gIl-)pr?&*CM]j%/J'Mf2'?dX!?]^/-QC"[YV7B7NLMot83T6N^$UlOG[:P(`67(Z!hd1h5Gj6t]D3E9q2bjp_qog.(dG3p`7Oda78-bSL7#Nn3jHd"%Iu./e>U+\f:VXgp(p2PL#/.E+f#8T?]BF4g]p%VLH_?TJm30dJBd[i_F*ikW=kI!Q`)$*\T"alBmH<0aS,LJs?eFsds4:SGgir/9%O(R2(G]1gnXg`W2hB(RmmJ$4aV>YD_Ha*69:sW?SDRU.f`5"QA!6AO1NMq:%#V&q9f'i<T-f"c!2P.sb_qnsq%X1#oEVQEK-V(,)%X?3@_5OD"O@f](<31c.gcgre[rr2*";80_]46g+Wl=`?*/fgLl]=?n[k;),^4+&*iHY.,=clJQt0]1]?j!WRYZ+1jtqpNF!\I7:i%HTUu`oE7hEcG2qeiZuj>5L'E%\8Z':#/AHak*g7Tb*9qLNtk",S%qt>Gou*"SPS3\c1r.>Fe!R)n`p%`Bhk2):N#K'De`\sEPB,n%\QnRcgQj@oot7i6>C,O+D@-Er`NB$[<@#>jY1hrSijri1qHViU3:H.e2p\Xfq<Z]jrg>*=5D.:BC]-+o\;;p\GC*r^4*T>j=M*TB%qmefCTjHRNBu+S+\SK;nds^gM>Ikp3_+XOG?#Af&a_BQ/bp6WObOSTa]aae/4DsR9j9[Q'B2?27*ql,]S\KH-buNQJBQqLgcJ)@E%o/--C4WiG#NTVhF%sSkl`k\pKj`<]eH*/b+DtkjSlqM)T=mtHJHK2,,c_%m05V%.&Q<guom>W04a4KXCG?uPYhG(7hpN_Y?a;69/%3keRoFlgepE+*,@\'4Y/iRulXHsM'hIBJC'DgM'VT_O!!l%IqorXJY?mT50.q-O'nkN_T*^E.GOr]Bk3p@hY4LOV:]hu'hFql>4Q%)S?9%^@1e]1qae1cKk14T_qB1"`AtSH/RrLR17Mdc5$,b8V[BeqgHWL$@2r;@PCu&g]fDuX4La5X%n<7&a'Gnh`J+$kVH6G/r$^1%OF?pY$\_heJP[g8.YJ/<^JCQcr+d&4-/N+)caTgAcn'Q/$#RFaaDdgIH4s&bL\#J6Z3F.Bc(=YYghU1T_fYLT*hH^lk7RT6llm(R%^E5qn@n._@g=AJ4mHc/8H$R(%L]Bn<7".3>6dk9P>`c3\a,J4gkULkkkr?c@GPR(8hSg,g'#:>K%<'GPU8V:'KY$OH-<,UEDlC]V%.S:/LdY_5Z42%TYG?Tel00OmMeZ(Bc2G5.jkd*KYMZULS(&_u04>C3R]8S&r^<]n1nbF$fUl*d/pP^mMqe:JVj7]B/Blh6<Ro1AX%H'*-fYPS?Ir7UPo`0n?'MfUU#QO(h5RmcBfAP^fJ-!0(\de4tVTl2^V)t^%kIXa)=9N.SVA@39=-6MZfKB.">SL8nCI<Wj6(/Le_%^2XmHB=3f_F/jF!SYa?mb+I\5E,<(!5G^$uol[iK.`Tpj=6I'WBf#dQEO>>b9U'771.?D*S[kdp/i'&X'?GOs,+/%!qfg_0eP6+8%Q)eKnb[d985$XCjY&e5s^,h=AC=Vorfu'@FPi#^.j/6\=q1^5g/kE/jEKMpQ9J8Gj;<*7'^\KL2^Ks)W6b.[1o#a2j?/F"ndH.%a%CgO9J'="TGXiXmTQA=p1[nVA4C@H6GHN._C?+Y0O:hc6-\n0c?m<,InUT;4ONa:,%I&(&+j9qrS-f=U.M#;KP>8N*VpK8Y/^J50%%EW<Z?o_nD^q!l^pU??"Z;p=$6(WGO*A;_PKR\RB)7ff*['Ya7\8qgsEWmoj@Y"N->>-I:?hN#dYp+9@[DMQ-kpSUTV]`,S.<[-t4%Br.3jq^RYF7%lC/0D\\pdgoMCO%_=Z>A!S2*O[n3NQCrKCPbmaUXnqj![tI#fBB+*)t:+T1=If)b8kb,J"BWBl3mXi]+KF(?8W'R%hbW;&F]<,RA8:J=D]?C'^1&(5lgD[OrHcn%Y+"5@/(_F]q<0\e:QkhUEk5t1dqldA3J\GfY#a.Qn@'aXf:O!(7J(K#VT%!._rES"%o2@b!D?Hm,a_`2(H+eVu3,WXN(N8DYpniAo/q8u1p8`T\D#[OJSkaAo4$&AVgU8ojHu/5,pTNsi]"53)[52-Uc#raq8G_bfOUcZ/%MuBI>Hg+)hIW>70h2O,Va)3JL5O<j+IHq-TrYB`L5NFF<3a$CuiHt/RI.WJGNlU-p1]-sqc/1[i&*L9*io?3eh+XthH=-*_c]bQb%NS@]6L$u4cVjFd6rks7k<M#EIpRgVl^jH(Y4hDU)"/!k<^\n'jm(^;)dk:herHcR\>.KuT@!;4KW;'Q"e/.:tD8s:S?H4/*X#Jqt%Lj1G\VCuk+_tDPAnK)l.>jpjbg#;hg?+9L@HC1ToicNW=d3`265,Ke/iun9p=;`s.<,++5Sch6*n](:/[%q<++0V.Gm;*3gkZkjr%7).eE?$b8hg^VTu4.Teuh!5AOs6tK%^>8EtY#1O\?:V&.K,uCmh`p/5&]p%L]iQ9h^EsUfkOPIjbY.-n?a9Irkc=[S]`":Ij^[2Q%BWUa[m^`Y\1N#WT@X$#e8LLh-:$+6tS]9Q7kL7&`m-Ab=gB,sh:U2ckr,gftMkBZdj)UH*cc<@u\WE8"5APRo;7T?Gqceq\fUis]%Mu6"fZ1s,UYEp;K`j;akW41k:6=-gHWUOMB?&q.N-GumBFd-](et)6eF1hnlf/D6!qXZ3,qp_;+/.i7GCd.dR@gE!4NUs]p1B6g.%&>TMZ^#\UeX0:cX3@gm#1ZXm$ES4f*NM9^(=H@ZSJQMe,!=s*LIfRN6^bO_[RjjP1CO.eqG.d>tr<IDMSStCk3?s2CFDHIO>1")B%I9^CK5K1[BKY1TE"s9b(i(Z_eMXn1'no,Nt>CoMQ9Dh]SHhgQUAOmGg1"uQTdXsNe,R$Ge,5Nh*1M=mrZpO\,\jS'a@B`:44osWN%$W#VY%+(ZLb'5V1`.3Es!Xo3i[*r/>/mC/m0JQZXY(QjRdJuZ!d]tBq;;<b#h`[4(e('[AD]+:;Zj'j?6PN(\`Tqb2,LWlLaNnT<%7_$n<3NWu!$,`;Mi._C,nlpq@mKPc'D[9@dhBI*HiF^Or0Me#kj'lu:-^J7CBNG>SP,$QT/gc(8d6KV=L4\>[5-@sS\8B0P1ad!(%BK]%De'3K!.2qK%,7[VoMm'l3Zg_qZ0]U^8<u<U-i^<aW`SoBbS@Z42K9_^?3<j0T,/!"/h\i]Z0K0n%eL<TF11*:?-7ed3K=8U*%/+u%U9Q]UM[-".8(2E]`(oPVXTtts;Z"Cm`4<M@[FIDq+dPX3-rd@gZVggrI1Lb?+_,@Fk1dU&B`0OqggW]KQlh/o'EH=tBC'jCa%^fb?rLf=q<5?H!!3h9^n<O#i>YS<Od1Ta8-mAeci`G2KC"4`X]+hnr;U<54Y&$]/GE>Y#]1YhVL.@\h^d[DosRQH58NJ6?BHtHUk%qJ8p172\XmN2pJ818;mP*CTp2LVG]'b:Y#[i?e(i9ClmQm6Yle?fr1DnV=hlI4[D:nQb?f$[`IE*gWEk*G@b#D,tH<!+<PtXF`a^%1pC)s-;@oG1nQh)=jF)g.o_eT,kO-'[MW#&Wj!5N_@lN/3ZchPbtJD>VA]iBBJP20GpLUZb1"rO#S0F6]JHP(W\J<.mO([+MOFNu%FYhhZi_5KGN6B%K(P;"AQ89Ca\C#UdqV+[Ub'MQ6+42(:')53J.:^%6+6ld%4VUsKS11</Z8iUk9UfUd*B44gO\%9.Q>(9N1\'r^%BkIfG^dRW@gF(IK(93\d?YtKW7$FkOUqiF<c$ld\)^?B>_%D*JP37e(ijM4j'T6Z]0W9htcssQjX!+u5"hd.SW3\cabQ]][=Y^sE%"0+3cZ0G1WRtJ8UZ9DPt/>0i'a_T@W.Tf!X*R_,g._47&SCQ_O+ffX+<@*AL(K[XG>k(34*)N2XX7aP!Ne$<2Kpa5l)/5b=;)Okp%/HlK#gGL2=T+g/MMh@n']PUYCdeIN#c3S]A\Qg#V(d`Y`jm.7%GJe&hbRjR(^iLHe]m74cmEV3im#S*e.'inWeAS.Mk^766,6MRk%+Yu_Jq%m,L47&K2a,GnuD1>83%2$W2Y#_$K0^.cZ-BoK%rgr@u2CJjOc`)4tL)hRQb#bMU#IcClB)bKC;E1[nikPo;-kAZ^Z@Pm;%Fr,i&1<3V-;Pq>eUT(%*U=']`]4@ad$QbsH=<?O+.Dh;>6Wk-kJe5Z2G&KPuMmXb!+>(jkDH9J><pj?&fCVU1jbPODbSZ,[Foa`6%2LqeS\C+QS>\0l4`U=_FK[^&7KJ7&6/<G0*C*@HNUYI."Fp["g"p,@-fcoq"r/Tq9UVKmh1DS"(L(Q0R\-W=ZP>)JbMT.=;Z8(mc%SbNRU303/B2T>5gVDbJ:mP!hq(YQP9T1/pLpW3a#=[+s(:a+Dp\Hm-EX&&LCDOQ6jrL+kan]!EuN)h%IF!>l#gr#$`64qO,&X^W-%_Qd-r#[GnF;(h"D6[6RkmE[;grct&e=Jl7&8\_%EYf1H*E79-=\]W/$d1r7>BAj,_W+S:9C6t3`,'0B;E8MJbpWcL1r)1g7c>urG%>kBW'h9pX[?EUqi#&).d81bKCa`kc-h/+ru@b0h"?QqK*W=sh[fL5oJj&am]0&`pR6$V)GRs)>ckr'"EMkY2p9fq6]pYo`h'5UY#%2`=s?-WaU#Wa<:'(iLqdSA1IOIqdc`03jXs&nkHl-#6[5jM//)"JW#o?74b;6#<+(79U\SSoYG/gInb:7cI^W]GUgK`20N(?M%_b%F5's\fM*Np[\[`lGETQ<Ff2]r-V(]dTkWap4T0X+""nA1n8?"B"T$-Phn7dEJ-%,9Cb>=Ba>Q6!RQs*-[k1mYa_A*DdKY"`GZg&I%YlKYn><C>=g`F`:[=E:hi(Z`IBO]tt4oL6F."m2f`r"(mQ1WsI!ju+M8S@>FGH1n3X?Jb3FateZY"lH&Yj&MPhZ"j:NgE7QTX@VQ%dhmh329Gah6RR/P*KLF+78S41a3HX80`h]lEEH*3C7fp8?Je)B^)cdq_QWLQRo04dNN[LBl/SLQF/crI5SNatIA7%3Aj>(RSds-4%.(Ssq@hMT\0+qBin/g$\>*#jnq^ZNV(NqIp8\%tUT^;B9EnO\]Dsm:(X0#ni;n:<WRWLO$4n`,"BY=@?<o<6;&l?pj3@f+4Y$%RP%eHB%`DJsZKHC4/K>Gn;#i+/-XGFT5GIttg`<IZWd-Z/q2e63<gPq)KQT`'sR"Z4nLc$C4?j_Y3J?d[Gk4P>%_,W()+lb?\>k."'!%!kn-1;dH%S=+3%U'dU!jTW^PbRq4QrTZthfF3FbGRR"K;gpmP%l!ug,gUI$%;%I>sm!52Og-Al&D>/B::29k6)Q),\<k<-rX@6lF%4ePNT[uTQmJED6mO/L;*!bueUg\R-RqK7?!#)1<c%a_[Eq;-SiB`YWP3;[RiqrbM;iR]@Eq^-]g$Zsc&\=`GE<lr26mf`b"Gtcc>%G2C9R(:]MSd)o-4W<4t_-_>4t('[Cc2`1miO;B#t3Hk;l)M_]&4$qD>SGPLYMZEg(af9o@qX9t;crnAl)JS!fc#!L_[CN$'.rS]B%X'q=k^32c7U"tj.'dhcWaXR:ZkLB?pHWt&8d%%QXP^ih+$jfTAWbi7J)h$USY8%364U03tQe)d^A60L0;P@(5r<%RN[q_T&2!74k%@D?@A_TK=<+,_cG"TfUc4gnOOQ9&?_`:1/:JW`+U^!4(Sc^VNN!#kOt=;NMm(bQm4Y1SHn3WHIRp@KG2DqCFR[kr(j2VnKSSYmM/%Kqc,<6gHbrK5-Ke'qJq2<(!bsQcW4W8\q;d9Ok8%f"t6!%;9^$IEAA?n+D@ZgRCp+\p?q^5AdoeI/Bm`Vg9iFA+mq)]\0f<E8#4h%anJgYOP&h\9b)(4='La2e)m"Ae]F\7+jK37gD<I!8Ya+-9gq+^T%rH&<mpq;^K.Ma;[nVl0"emG`D^++m@sX&a\IaT:[>h_.J`J1%H7DhZVGR6%oYl43Dr9DII^hZiT_%gOB+a/J;4XVC?^kgGRPAODkPb-Mnt$?U]`%8J'tJ\cl/9#uBL>LOdEg35HSAIMI[bVsX`!KB%7f2Edq*+?H2!d7;F$8?=HX>\iVtDsk?4QC4q)bbr4q6sEN><K#]A`lUh,-LT@B]al$h<X6CHgX)B"`ZF"nAS`o[;pK5P]$Xl.+L3%YsuL$7U%)PFd8pfIs=$m\9OPWEmC=nQ83X.i1b[X#aXqOi1g3'F=nX@n#L@7Is$:"3@b]8joALMca+=3%77U1blBr`4G&>rUL0.Q%o[6)r/t]Voh#Y[klTta>LeKIW5%*@&/&9hp..np&O*WE?+l:mlY*@uGPp6L`s7HH*4%&309N'G^TQ/kY5#?V!,GYAJ7kk#q=Y1uT%3^A7)]SrBlFFa'L%"QobKSkuTD'`sT[P%]A.=e;]No/pk9`S@d/'7Z@#9*%lD([i"n+-3.TOYIc+TW%BcQ@(JJ0lV)gXb(Dj8D14%P2p!c"TB`jJKiu;#:T'gJ`e_OJ:b3X^sWEPCLgH^.'c?bJ\nK"8+KN<^d4`]2Vb;rV1QM65iC$C^)Lt!j.5&Y0%kD%<m'+MQ\8C"%'HrU*A@I2Z9;X@MWtc3j\_r'`KAJk5`SG"[#JWmXrbEX^#aF`=Gn"h[WO;0qQ#D9P7uif;E;0]94ErNGVN)Uo8'bt-a+:rXU2\Q2%g,ja[.4,#u+Ae"jR'I*K3(*aq3<2>\!B.,mb$Y(G_BL]C:JuL?<u%(g"6d^ebd1,7l0][g^Hs)M_+?&=f*RcOI6_C@3#XncD39A1%^st,>k9D66Pcm5n^ni!15$PdTPTEGe0hP:9*SDS3^_G=XH=EVX[TZ(#OrSo*bC+Eln#KZ[UREd@p7W#n\SU&NZ!?_u`Md64KLE-O%K/Yp5@#mjbIHQ%erF`IfK=1,f5@Q(B'&(3(f$e1(rL'5So)([EFGDcu_47p-BW%bG-96VE0OM_Vnr][n#Ko:VerVt\==VkM%k^k^%#C&h*\'eFi5]$Il^%"sn.dpV:X?\]$@?^#JX'3us)eBqpX1Yi!L=dWn*eYW=nrTo,<*#Y&h,Gh@6`K_B2D+&RDmj1S):R^XPGZ#R%bR*Z+1;o6=>,[Mk4a8f#Q-YFnV9SB*i#3%<3!-;OXZ[S%%P.<Z<.?A,6Sb4:>A:4_]BQ?hp1opI\mth<^9ZT3*Q#2P7(/4Il$tsW%^ImHdXf?p<>H(:BGJiW:4lk)cQ@><?Y!(j+Y)5YiH88S/iX`c,n6El%c*bG+_jK7HLS>;c#GN?L#&hl^)[]T!m'3,(,*Q$bEYl(K%Y;X9.UVG499BKEiOhmb.q(HJ5bc"0Hl*[Na^q5Z/Tr&!:ZEEaqnoP<RVQ+,;Qs#C=W&5teXss&/m_GXI^H5DbV70@kneS=,J#umM%!;RdH9J"i1Ls9Lg<5u(&<_D!]UBJVcN7>e>LK%TC=Y'HK@F.S(5?+tAXiJ6>=7i+qdTPcufaP&b&$k2&FVHXI[_U&**kHA)c=43Z%%Q*p+:hBNC]G\]4m(0kYVUW"D;,!t:p8/ZKfA[Z">(#anP`BN"MFp<1$)(44+7"/m[C'htlKPSB\lAi:cVg^B4n0bmo",rkh\M\^%*G*0!nWaT,Ej#A?UV[6"#ami!&9V`YK`tNYNg5,UH9KN@.0V5XoL(@SghY;+`(UPh&">R/9&&nZ7!OSlU'Va4L,#=_W*+Kh`-#5%%k0il2nYE$!jH_H<b+^?UH[0#R>Mb`98CRXXY_J<a%Hua$p'BBn`C!ftJ<6epO7AZUeji<*!&XV%b6m1*@9!>!2N3Xt!:=hLh*12o%2rFi*c%/8anU["&TH%<<>cVAX8)Li`[9*6USZL_$[JkKEG_VecrmQB=+(ao5L02"gY)HXg,$&0&Aruic8eJhnm"dWD]sZdoBgnB<%&X$q;M!lEY!-YYHKoNS\C1!k_k01[rJQX,2,t(:_<5l9!Jj62J?CT,q5AV%j\DA*hG?\W7%ra)&8VW]t*Rc.P@t8cFUNBPs4u$^4%2m,dhq']iIQiXfpj>!<C>6=*R7;R'FJKiO81o90ZA.k<YZD_nED+pE"cnVAJH?YauM`L0n>'!T]_k:m8ESXS(KK:(rRkiDjUY36m%a@fGp!br;#Ah(CF4$kt**Pghr="O+0MB1RsooQ'flSDK?l_]!8gID8Mj$"`I=h)hI/IQ9VZGal9Cg!Ah+KjT5>4p\$OufG[B@V\>%8pE#6BA6-/J?<;E6-,E<XH%J.We`NX0orf\b/iUcEXC)K^HF7d0D,_<2mYfrPiGUmb*bTLXQZ8K(eC<#/`N;1\t5[0.Sq_p\0lSo%H]3?aPptl$orJOlb#Dg>>'HsS2rQn-1CQ1.V77>Cm"jUiiE%4>%46K[kP0-jq&kgJUgN33gdW4,YG'>b-&j6bb6'=&-lWpYRa#B-%K4\]UBT:#%i*g3HWAGMPM]Qdc_-F+FrHR"F4GcOSPVeg8O."U08YasDVY(q4d2im\%<NuDng(PeN::)JD$qaRm$uSrTQqSW9H@kP%.6KEULj4FPI-"E]lI&u3YlC/mkMH2U[)UlOkg0DZE]'nL9%JB=hqY5ePtA"u[&UE70rEo%*IXj5JhZ56Jc/UZ*,C_4=u=J`6'(D1%O-M"&W`mnl(fZQQ'"3UU9QILQGR[Af<Fo4*IQ"8#I8FE1I'W$;gK^VNiS3hKOUW:-1`=([g\7?j:$6M_a"31(TX+O78*99`H^2#q%c=?PGP;F$r22XP2g%P`1@ScmUpKFtt;=+)*nB#o+KWCg?)%C<W9iP1&FiQhZpSo,@iM,h7C,F^KqdOCSTVeRXCc!'QQVL,q0Q^M0%nG:ceB+j<n.1?SU+E\kDcrEnHPWM(7Fm71t/IA4N[WS;OTX'6)at3#iT\.\h:U.U'b@b=SGA!20Naa'67\OV(`H8+N01&9<81g3t%WaR@#HPXbTWILX]06AY>@7atrBX$\X>Ic)!I35Sf2^[Y3.Q)Wd.6c(:I3\'YD.."j(5<UL"nfK-D-SHGORt-EPP+&BP^R7[nL\+5%g;FQBrNB*YU0K:Hb7P=:-n3'NdX"QE$X`]8OCV3(O`.#r:R3R;GG2QkVVp;^?'lS_,!tP@@/h3-is\!4^RQL':*/BJc(L89Qt(1#%N&0[Z21C,s3dmYTK2*bY8*/)8B@+c,"cpd!1X;XljGP%@6YDoTVoTW9,)=H'K?cG\d!?1mEB1DoiWM8``Yik\-grUsfJeR\<)K+M%Tp>57LZd$`(*os#CQ1;Ia1\q>p<)b`rB-bNYAt>`L6Mm7X>*>/S%Q%,CAJfH8$?87<tKN0<n;q-aVF:]3pO-6l<,0dFRkg#1IH8I%W2)L&r`W>5oXjG5r"bLc!]DR06`on-Gu1t"ft'AN"[5aoc<5"V15D2d._HSF%8[\7El9s;_*ll`+Bt'He"f"qPW9Vn,(!"E@J`@a%fVi-\WE)H2XncE;SNchI(sgI[p';W36^CW,1n#bTrJCd=h*SE:el!'=Q&oV"DC-%s<[,5B;hV/YI[ZDDDk/Qd'+VWl#_Jf6Lqq.A%1UKi')K?'!+12;:CFu29,-#6=\OH0VgRepa8g\GZZ9,,,.Af"i`WW[*Jl]Ht21\WdfkX''X+guaX9?h5@D`)K@2*.5EU@iS7%>`2%n;oad+UdXZ@r)J>PK0R0\*UHVHmb!$eFpIV8O4j/PW$'fj_VdTab=Joo[gm:?,s/:0[8X!RZ4k)jRFg]ZU_+>B2'm(B#h@8UGA$=%&7eciG6HHtb[_Lm.sU#Ud@0m2qL'9mP;.+e`Up&p%\T32<X?]i#pZ_uaXMCGWRL"PA:G2,[d82Ym]0`Y_C,]%?59>OMf:$Nj!m_;%c3&bb9J[bL3>:YclKh*9>u`8pem1htZ_f/e/b\RLMlsch$l11!=nZ%+opnsSS7j:>G-ZF+7,R%P>7j`A+T#dCHlhKI1%+h%]&_LZ%GZ2jYa>?THJt-&L,>g7kn(]TJ=cl%2Q!Rdu[N2?>l*Jl5J_/snj7KUi_A:"[_n5j=dl:3N1-irm@#s\&na@F#M7DR$)_B@XZTk"f%egLJSp'gEVOVt'ZrFCSG%&J@r19`>78B$U_PD%BPSgoNE8O"Y!1NK<W8f<c5;:h<f+qo$0f#GnaeNB^qSjP@G%9pnas*F_;*1]8q%>\cc=1h%7:dW;@aB<S1HqN][Q7q?!?RM:lEGX!LAL8M_U6e*=Cn*?mF*?C8nq.Gr*D]"277MlNT3F^:G@<rEV:@a2e-#7(fpG9S?%a[=>0&S<QT9T<Vj'?.P.Hqn/=OjXd)n/2cQ]p@f3qhAgEaQo_ng0&2c]C\Zh;sY*)SO;#R^%Moafb5"l\\Z\tb7/L2<S#-?H$,ER%lPZlIKR%\U;FjKJLZ#kp$%jA!Bl]bZTcSaNn>PJH;7+AZS;1KhY08:9cME!<a5k/*bU&sA\5VS.*Q;NSoANADW1GCZ%]rR8Zsr`r%HoS/EWQ4,<WNl[<c3-)OLXXk@Vp'opAu4m]WaS%4c?(.kPN9X'qW5P4%cO@63#RrN[6&iiZjr%jW&;tRq-m@a2QQ3NUgZ)3M:0Zr%_hYFP6u..6lQct`*&FtZV&:f$WC*>3NnK.doNtEX7rE*nCJd+<3dK^#lIe,:?7V3Iet_[mn$Nr\&s"36^RNgR/"QjT'6u9c%1&ZL%.KW7P#WfgJ,KaUi%$0$H=<17lQ1Z\!NYO8O<V>`L>N:7jqmb%"41'W;qujV4UKW0Z*pLA4H8NQ:<K$+u*Oq]Y\%3,&=B*Tq9RFK'%jT[NQHOoPL`=-Qi5S_1gpIoW@Xj')H*2HMDUqZf!/0bm/Fh3O]\)3B[Uf)@d8N3LaWO2UNGYC80/Xh!,hi(N2cN0H0],@T@*rQO:%p;'36+BP-8@4dgM,p6B\VQ(CLW?T$1@[QfmGJl3$2&X32Y-pJZ.\(l#6cj<I8h/Uk^\fU]E&MKgY",A+W@54QG>dDDr(8!K[:^s/%L15tg#u]`X'bPgKgn(KaedOo*QW+=Xk>q&^,<X2N;_4#,c&D"]=1?5/NVqjHc,re%n-"W._oaNHA8!QA9t:kHmTbnY9jA#qZkh2,%=/DCG%Ta_8%l/JA%KIf"k2S'im(!=cNr\"p1ZL=E=h`l**KZ]cHMpI$?`LeW5-cWG.dY4;i:<R(UIrMHoi'P[>^+B%5kj5Xobg;P%?aU@lk:'E'hl>_8kK7,NK+SIb.cSQ5NF]NQS3.``Q0dYsofMa6Pp-7q.U.5dX0U$h%(j%<=Z>dXT$0^h!_%lZlMsX?i1\ln\f#[>%_[O/"9HPZF<*KN*Sm_kbec+.C`psum]6+``),OlG(clD82o@7&JHo`2Fn3h*"rVUX.NMOj<M%7_]]ePZ9fcPLg[_7KZJ31Y\2\-L%.)W32kBPATR]a9Vdi2I$ke5r#I(.@l50up`Z)[.j-f2!kpr-n*D>fe5<B3aXh3,#UBq\#ee"83o-jM/d?#;(>i!ETCO/kuPE=,3G%3%Z#M\X-@O>28fn&2iEFc4Q>D/oS%7Nn't[Xd\nnrK;FtA[BY"/Z8<,1tRrVY.6Ug,WRIB=*s[r@nr1c%Z'm"3Q%'O/CR2$l'^e)%.t_oj8<&&9p"/jST)3]d+``I?jO7MhL,grqEb0BiY-?rn!E(7W%9Pn&XmC)3p014)J<KV(aog^9A[YtFmUB6G0;m'le&"qg?r*(_%Ve'_'B;V1MRnbKlV&/AZ4I]*s1bn'-\F\cIflUC*5k'0_.C88^qPr+R>M8=S^MLL!U=T3RdqO)B1/:#12I/QmQO_4<.C884p/*qL%2P$/kXII%SE&O7&?>)7UUtKk%L>fWHkE/Q09rG\Yp=.c;>.q!$miRfhVj0nfG[AfaflUE.FQ1u*-d/C9l9FAKP#Go?C$!cW>=uqH%dqMg9o.*V)9kQ6!H_P=;X^&H4.;!0*mR8krflRuXG(ONk6"o>iFQ+]lZ>;QR$XImQh?gLPZmq/LGYaT!Vj0oQZVKb@Cc\]R05^1N%Qu"gc>WTQ>71[_Ae*8*Y[FWB0dqRplRJ<$PACG6)6Y#9WaD<n+K@G8%mupJD6HS!`eAt0\-1?*%XSUl2GOF5(`)*:cl)d_T<eu/<%Ndft$dMCE9$`iI@Bc0$6XUFIXeS-V-:nPd@EaG;:3iPl_eQN2nO\Vd.Kk_\BK;75/:86Pd-%6$F?@8`5P2>E/Rji/C-Sl,q$`.,<%K9!Un?V7RF9$G;\L:Pq-Lbr_8(Y?eQ6#43_;AebNA*u0%[X6BWJL7pLbhX?'N#Zi]SbZu&<7?210]j:qbL&<[B#i\0>G$<00mEPa%/)u9MX:du]\O$7k$,'mWLE(B5(b86?#Mk6hRN?N_F^MX\mP3WZOr;iqPN>s.Z?MUt?h$0'A"su"/aGR2C%-5Th:3?h-dnD&<a]L@%Fn=gm,!Lq6_WkJ9kP"-miNSo="po?anuI'_ACG!#N5^1=c2p#KWcP7&$a$+?msttGX+aRF@L"69SSg;apQV_P]#PoY$E:-XHM_8;%qQ*GGW+o3)qllZeF)#\HarsPJ>?\*uIhC3pk9Tn!F3l24$@#,i9WZdsTGZIrA5BQ_+KVZ?T=cAkYI'I4!\0+33b(\r/lJ5?+t)L`%j0qEKR3QE"[008]iFY:H)JX6;jH(^HM%#HdF?_fBV73alaC+ZD_qs[3-Q)PX7rJq=WNA?tkePE_F8oS/Y0InP48T^6PWAeZ$(W2k%HZt*Oh::beodCJ(/02[(m9(P4Z&m+94d!SPl^*9$4DD\(CXNe1`DH/Z]D_=O%lrUo+SY7kk>pVC"NQFoq$D7G1EVZ>iD+PohU-*i%oM;tYi2"#Lj<Z8$\C1dk)Wul(X.iQ3B"uL^45iqQeW&+t>0:`:J>RWdDo'G"Ar`,Q2R%/1WhmX;g-/I@$k>8_q.]m-WO+H':Q\`e%CD!:D8$'7QoiQ=<D(`/@N_HNC[2A??[pOU]PK=`^rU\c2)IiKC)qU7Tla%pm=g,f/'mUFUmO0u$/Z,UO+QYC!O\`@S*2&[jgFcCJ%o%)s-Z@.q($n,^:E+U8'.-h>s,il)'0ki'h5gQ%9@R_>GF'11+-);#E@M8=#g,(@76T[<2V6K3Ph`?LcqE2Lk.?Ag,5#2I_R?;o=%>YAMMo2k&IR.VHN;V4mQ\Ajtsh0lFkA]O/^VkBE]HK,\ejdAp&fZ\DAi?<K%+8;_jK;a9g**5^Xa[gOcdU#9b,apG6QH`8ZS>>n@%9D-I]ec%r3V8D@&p#O#5W>H\A9#X=70&u<$Kn79%=!B#p[T/m9p:-^/C?NK?&?c;YgtcO'E^isf_Z;1KUUFJI?=Mo<>nAO",Wu%L%5L*RU8!Ml2.eiD*Gc(X#ktkoIWI]N`!k#QuHS(JE[8hVb>;j9R5h2iJn`NL0>UT-h/iuK58$->?EU<C_;Q&KqNk)b]?g++AVgGkD%blukuC6\V)cqcVHX/h!\?(gU$1DrjVU/&U9%'gjkn"03'<c28[>!QpW6t"!mKkd9)41tthP6[.tnU-qY/][0fZ/iHl)WP`fCZTpa%<)1Y3LpiHbWttKGn5XTm<tCiU:9:LV<26#HM$?Rf26a^->fXP3CY>N".;!0b@FPl%rTp.`ZW#)LT(6I*&C\'XC6Ro1.]Xr']U"U]%>,@mU8%&EBCaGl3SQ&7_F=.2CA>NF9>%O"bB!t1X3^9aR=S%'N4lq)nBr0C,ScqO)l7-3uPQn5gNbs,Th&3BDg.,J&F]o\3jY8[*%IZA`0ORR!T?1ij9;oG%f.dAfg%Z%r)fJUtFfh[lCk,hW%k+cs=GSr@*mJ-J/7qM_1Q:?61o_Hm5euHfsp)ZWQZ2h"F6E<1K_CRrf%q-p4]']`f"F]t)lj;*^>@<A?kRAK;Q?aJF#9,_CZh4DbZ4sh,JNq6<][fkP@&-+X4M]0eb>1n0l),n@56RW]]e99mM7qB(HfPO[_%Ll`@DV)QF?P0)mLGP3+?-7qhu]W'2\dtl$/B=BV,q]&_D`oTajo_i4=lCmG*\>IdM8#10;2!o2BSrf7:!ILNRQiX>ReZ[3h">+D6%TaZaKrnRA,NRXI?4Hs=?o6lXnQt^$V4qoe9jMuQkis$4P8Jg6k%g@5=j?u/c;-AEMEr_>%*h3B^iF&1@ANM@LnDJQ^?<MeZErbl/%@(2:&B^GQ[XbPOg$W*mZZuQ/3.ol;f!jkQq`E9Zp(801t5U.B(4:BN)4/tOBAt0%GA$aW6Q1ZCDasZ5SJ+6?!I82]Eg=l-p5$cLo%UkeN/7H#dF%N?J3-dM;\X,$8FI,oeA:d-C,\Dn+]1WpXrc(TMu'SAsTX,$91ml,,PVcN^icZXcE[Pu]EkPA?9)sZ'srV0'hPO/gU%IBK2^aB:1^H/E]A1n/Z?]qL\RqADeW%/,G0lWc[7;uMa5)i?l3cT#0A+huIR\UKiF%Ng,%T>G!n3Rs0T`U"9>?%Z)Sp<)GO37lJ9%k-1>sFco.g/*3aZLS%qQ4P0&;\E0=FqJ#Q!E2oQ+kmZ.gofHoBWo\=#bjm8[FSLXMWI@H755\YMj&>o`m'/q'p"M,MmEfqQe>o.)%Vtq:Mq(3Qs+J.nCga[!<kP?'o8Y.9l*?A<rOFXspH$fi=AZIkQmq<$W51NGM`p/(qrJ[)RBq1Z3d(+VFSf4%l35N.S`Z>oTYnNYn%-^%C!<'SWV3T+.,&W5_MIX5uN_ZeZ9m^[edk+HTmg7IL(ktMlM;uNfMQBq(_$r?Q&/GgdWqX&>Fhskt&g8FcfFroPT>70Sba*2pf%KD\\5XZ=*_cLoYW]0\<DinWj^kP?&Q*!i8/4Rp>8os:*PG20WWMYsTI;uKD_R)O.F%^a7M4P*AadJ-Z=:2q>IiFY.JSB#j7c5ttj%I)h0(m\tZ0&1TJ7%R8RkfLmpN;.m(RrJVb3XW7l^3S.%WInMP<oXre(ch0(PF)4kcSUgOHI[5.o3r3)G+WXGW<5/O\j#]MEC7`Ii%5lRiS/Yk72CnGeI<8hXn1;(l.)q:#RjQL-!q/!o&kP?(:[I>e*a.M[q80?SHePA)\*HeNWZ.go)bE:ua)8#:1<$$=fT7UN6VtqG!%=/sU>1\3,>'\Ar>qO(u9Sg*>h1^l6;otr:[%bU&`LJ*S$on37e.F.TB:5IH0a7_UHcS-LX;X@?`A:mhZp:"J;ch0)c>gV.EB^^$@%2!%Xue^)*Y92"IE)0:J@K<Eb<;HiV[cJ[',)e=(!kIm=$@d8e11UDleZthXVWEsg&j(,:17<M-o)8gJF`88+f#J?.-Q:<U!-6T*L%V<-ZRV(W03_?fV2DbGa-Sss]#Q#R."=rb^T\H:aiB($oe=4SC=\k*SKaT+866rmOGk47#iFN0r"FhZLb`l:L_WqR*Ps!*qSG'g9A%CUWT<4Nq=V8p4FRK@F_mqTdDND^S8VS&sI"eUMpOC>JgQ:@>"Na'.P9gDeXihSGj!nGVtm5OCleE;jEiXTL6P%I<;*4Y.On')!'H%MRZ4?jP9LX)YF0"^lA*Rf=>RWA(S$1ZFOe,nA!RmLhO%V&"J^?H*U')Y/onG;jFFE<juVAI61ljBeI>A-W_A7'>,@>>d3Gq:'Ebp%qQ0lQe$lNb9*gdU7TOi7!R#mu430s^dF@Q2^S'rA.rJ:7W>8[fbJN@33W]q*fHhk.:\"0cRoj_]hOQbiJ(a`TGtU9U2?We-h0t*L%I^eXRj%Q)kMlogaG4#+l2D0RIBA>GfJ=%;`]'6=09"!G=J1Uh&c<b@@#^6%cJI.k@?ta8\8nfcs`TP]-=%$)_0`bAiO-N/5EROV,%VaN0!agtR$Gibq"gWN)Frc0+p+%D-QBKZmoh-B-X*Zo8-p#P:Q+Hs=Z<AVqtEU!GU;+E3lqni".'eJ!N>IUZeP8DNKGQ['#CKpJ_%)\&h<OhE/;km.GSB3?+sIPYNqGnu8IlJj!)TmoFKN-E,R&L$p%(bdUEZWQYC*_)>Nd]Tnd%s!EG80[IhQ[iQ@'tDHlcm97dqd4<1%&)k]UNX;Fe1$?NpB6E-ZD3A6Jq="6,MdQS:9c9BR1PK(_MN@\@('I:5U%f`YJ+-!g`<TiIKC?u:nH#V>&oolW_P:<WC+E;"fkKt_%5ZU\J,<QS\K]EZp=VBSLn3]P%Q@oQ;$`]e7`Sa=hp0%``OP#_Y:>T>[XBJl&q=HL/%Nr8_7>115!]!3oIo+CeOZGf[#E#l5n9i+r%(f5[Pi:<!sDZGL&fRV.H!$u[7S]/D!%tVN]j2(hh"97*r?BC:u.jP2p'VKiN"'<U2:cUjL\?k'ccXZXB'*"(.3,^7rT'rK&ga3ui%"ds7>!057NJMh2m#KIW3.]>hoFo!_SY#Y'7k+UQI?P<8Rd!qpmQ0:p\[Q,i17as@=3-`I2drDYO1k;mRn@Uu%LJV1p5sX!8@,g-T%"Sm?$f/#u->7D\Loh&Y.4>Qhj?=b$PcrWRq-N"e&;$D?fcL)::LX:hb/tXB*ls"#o9(MZ!4t%#8+gA:V=$/[QED6)aK89tuJ4)V?%IU.>*Ar@q_(9q=0Q9JqFHs`^AZJ$qVduLfpF9XI"(H4n]^s7cnLi/g%,1$qJ.[ps3W_n$ppdJ,uYAk8AZain(?Ec@QnJuuiRpOY6%]/ia\6M?o6kD_!E1geHii)8WY/W]s\opuRkHI)7No9j^A7X3<5k@<P&R%9C"/8%\3AcI+"9*?V,cU>#3;'CNM:X=^_p;IDpl>%TJ%"Toc!J*TMLQ[9j&dlHp:LsY_\N<kK[)9#D^9Eu8H`>s-TpEG"kKVj9AWF$5,m[>d1<$o-A"1P0ALW&aM+(MN@XGPY/pV=bB^MpqZ%(mhE&OD]Sg7!&`!qPu<R1@rFGY8L!l+NggC^2GYCOm2HaN.\:^?oEO/W0m1hEimte9lrRM&U`>4ofdcma=g6%9)6DcJ*.!nl7sJQ%'@<aM&H[XngX64>/_-oV>c#bL@2pl54Q^mk]kW[?@b??"_BpS\LW/-rka_*"</#e+I5'd^XhZ`"XVA_J@&apNCu?LV'RT9J'^,1$%Q)]V>'WaW-G<L-\[G7<[j^DZ*;O4P9\X&Q3_2[S1CXUkIZP#%iGrp>&":dkKMn<c]nE8-(N?dI`)+-pAD_L29bG['f^m,i,;..[r%0;G.8`)mnd'X>_B<pN3j^iq:*hRUaY0g5p<f=34E5AqROkRs6ej_WVd"<5,l@.*Vn&!S"qNHT0AC;uCGP,s6+m5OM<_K!!h1lT0r%fd=e<'D=VGTVHnPL_gfkf'1Ck/&-#U=K+D24Hr%d.eV)OZFTP@Kh.om=A68?Gto*"X#F@VJnja5d/L`?pDo>uhH#1g\4U0*1'&<U%U%cKs1Dt@:k\c5KlF26"WmJ+#>^74A-V2kjPk5`L]kd:IJsL%;Er%@Q<fJb.d;h3onPgNFhPpGKp$<_WfNN>Pp;#509rRD_hGSsa%f`8<0q4/\%f-5*rK(N['O_rnVH8F%0bj2ss%s%+9b.SH-a%L0k+eL]ajgT94Fu_'8P[hJJ,Y'c-RcmUVDc2RI]),kVgN^U*HI8M[%r-=:HF=mYlB)+6k.rWsFB\K>V#bT!Drput#'qSU#ms1LSo;aq,Y7?/,8"om0d/l^l43LuTgc^fhNd1;_75*oN\>Qa5D0$^bD],t]%h]/`_Af31]g,W0NKfhPW9g>l@ck?Ycp+J3?J>1Zf=Fhd@P04"uL_%eHV)2)F2V5o:BQI&-d^9ieUtlf*ZuXDX4[H;;H'Z(`gWELD%UL8fSaF9Yo[$Fe$H11P<'R;"r&T0`tm?86o(*0&2G%+n3?p8DC>3U[8@pLQ!B:e3h3LoYZHg0.729]CO7I-1][+iEYFdd)eBf-_]%g=hAd$,uu1=-!H5jd7q.%:c6b5ad=lU%DTlAh5iFS&Z"=1O;Y6n^sG.q#4b_DTdL(\:jrP7<df=S_e$W2-69f:-F%M*]%T9&YiKD%1Z%H[cq`/TX.st,?u$4l/J[9!_T)4d=<4u>7s-a^kX]<YUR6fY73WSNhVq2#^DJ7`Dj;qs1L&5DC]_@,0FG)#"+BS=D_mF]"c6&:%oRZp8dH`&dnJl^8j^-+;#4J9-]EoIjiRlBf#(JrV0@K$:r]\GhQc4+qs'@9)&tal5o,hn]nX@)p^#?B^065SsdN"A>^JZ.A-E\X&%pJ8o0gT1G/k0ehj+SV7NYBee$IIKL$5*PAj-$/):`M!GLc&A#IR#I%0rquTHA5EcnJ$PoSbN7)+:fs@7,r6_T1E7uK:H"Q:iHX@U%%!Y?E%7g"betk:O0F,u%1o$F\e%s`\.`IWID_=Ub%aS8tANs96^2:%O2=/*=M%flLq-%mb]_aM^NgI+#jji:s#;r":Un^P(j-GVV%YCf7h8+SArd:"`/04-*"&[Dh2n"XjW!+X-/(CVneGa/OE`n0^C,_Ees-TFeMVg%iU3.A4@hrbg&r-X0=0THa=lV.?9)IJM)\6A=#%9&82rl`TM<`j'O,WkLfL<bD0hDr_R^^[GAI=Q/NTf.-QF3kbk/5%\?SC9GgXf3k7[HHu(qJh]0MeQ/H%C6Q0Cr]G@*rc51_d"!/=%,)c`HQr(YgX*r">rIkXITY#u(*QW)jpQ$&*$f$K2E7W"o5iI;B9-1',NoI=W[#'WYmA\,9'J;)Rlm#gA$5_q)4i@_'%eb?qK*2&:%FS&b9(ac#CVdf\7&6tFp_W^Er$91$^86cs_X/r5s;Vf!\[1iA>L\5qHI35oDF&XeuG)WnqEmA$KU&E71&,fXgo,f!=O]rX"M,X=Z%`;-gc.][Rg_SW=NH;Yi10.RsCKfe.c1iZt=/%SLtIMKXc:]+a`X"MG^`lCK*qA>4t?IJhHaLra4`Q(a39)RSb?rcWYIXI)81d:&E%^4p&AX:6gEaA[ZU/l(`5OHbORPU<AR7M9YS+jh+r?W7P>n/'`qT=/uu$$Oqoi,`:3+@43,qqh_kO$=_P6BUIJ?7_MH@%S/CDg8bV%h/V$.1)t!9e\Q(iY869mNs3-"rPD2HM&b")f4*+A&`lc6QFY9#/PV('T2c12GRXQ]q;%$O]J-Yd4Ph+jV:+RP'C4XG*KRefk5(E+%hScib;9(3]]D/ir?C47^G<6jg4!3ecpGs@<4,f7!Wu[7I!3K#r2`lKgn`>jmk@J"qj0<=%%%Q^fiY$SDk<JPPo-uRtGbt&N;%eSi%9D+RZ0$@>CaDhqI<Mtr:Q2Q!]..'d2Wf!<7FOshKfYtCuT&K_c>_Ps[7;uF-<=gQ=Etue$NI!DZR,$soGO>+)>YX]`=+5Gl@@u;T%<L6Ygak.7=<<^^pSUst[eB?$!?5&4K&$6U;MuP8FkFn:?r07>4=#gQ<53'!_F:\"N09#A5Es&onmu7u]%h:M_[1W>99Gc+F47V[*%GDS'$ED:C4\fEuu.hAiRL^fgJo1sg=31oCi.S7"nRsTPgBZ=gGQhoni^-bc4C^DP3JV\BNDF#b#nCXXtK?%U'GUqB;rSWj:=OG_/%Lo:7ulL/0YcQeT(QsTh0JTb'<5')SOE;=^.5<5^eF[ZqUa[r^bD2TZa(=)"RL_,X[iK]B3"X7J+)%fIoit"N\N/a>1BJX+7'&`R%%8-H\+7YG%2G9o3C]Ob-bUd.2!Za<PqR$.NA.1F[V&D1*b4l_A1h,5$a+<iQ61U2g:0F?B@s&C7oc/fs,n)"6lW;+0kPu5qO6%!FP%P$nMXfdtI#<VW]UJ?fA9WsJ&<&K2AeV$_%A_jV1kMj.CCa_,'(d>Wkg#=,PBRmC4c.THX%45!-k?\P5+TMJ4h&]LhDGL1i4HB>5B%i3=1I(t>PC1<QdE0W.<0[gF,qj:rdV-5a2<)mT=3f?75]kLrNJe4c^UJX:f&ArqA]L.2?2c"2SA#-ni"$5Fg,P&PF7>-k$!=MukX%KW!LG1lpVujfC.l<i[JeMZf(d9LOq-ZBUm"N7]srKgBg#^_AS5&bBUr`hX;(+,u_/XO`4rFa;32`(+;!37L7_?f%"K\-hpZ&Q;X@%4]^l:K<c(l*t(FUoU/=*K/=dQYm;Gn&Q+s9@riZd\>&k7*VkMM>V=r;jZ,)Z\-sj-F76$WLKsPL_L@/F$MEIs]gR?Ws$5a-+jU6_%PeoCc9=_Tb./S7X.IMAuDp*>/Bs@.GSR9M)L5n_oFBjH-1pSOa$[OBg:Q$+P\'"YJA;`*[W"JkdZCG(Sr?%`GUjsX`dW]PLi?Z@Y%?0ScPC_0n1$shEbM(XSF>bLsjc?[G`Paf9UOc?ic7VW<+`>'#Agr^.A&%c<#GLsFEhCJ0fMht0Kajf0SdbhjbG#!U0h1;-p5k4)[%:J[V1p[(JBmfT=a7oc9.^EY.!FX3A`4K6ELDC,)%.NrR6m_BPR]^"^<ns<Zi@$96eN\=,a(Ss*ScnEaK&:,6,ZdVEMMi\R`$+1Xo%"O*0a@3GC.;a5BJrDWo0=#=n/F,^qY_.2l8Ok#d(/*j`5;$@-M?5fY#mli-i;9Eq?2N]T2$LAeW=fVY<dXMToIBTm[Y@3)I1>"j&%3aCR(bu0Ee.:A9PmCk&dDPO5DT95$GnjG/.?A(8p="jkWHk#=NoO9"tK+L#ocuJB0(":o\/GGN+;B],I'6@dQA@/ut?LsY/4O8>H%f,0N4/SjD6#BIQN<O<`l%E.&2:Nlf`7Y/4$*g4;TF0f6*69WgeXAB4'E*Hao"\Ki#kJN90[:oBm&%?2aacQO0HXFKoa),qo"FLGd%Yp7r]AT-d$Ync$c+t&?:nWM4=r)lBa[%peL'p=U;q.$"EE7!FVW@H\WUbkt]V#6DFp-GIY'FIio6Ih^C.,V#l+91T/R#Q;Q+hdWa%7sCDYNSO="?F[cV)E[u`&(UVShtjGNn@bCDO$r_Cq+:DD?79.HhJ$ls*RBSr37L;"80jIDj;Z.UE`KjP;hs_OpO8LuB`I`N?+!Fc%`fJTt`CPA"I+EC`'C0)@]/e^6FGiB%41q`/&Q\J0ML8dN47<EhrUa6[jRE<7#N,OZCug@M'd)niG*0B??V1:8j88@=qTT"V]eMgj%7D+*K(VY?IC]EdHrVS<rrVY4Wh,+;u)0iTVY1K$"/"_4Y:PaIln]go+^:=hoepk[ulT][E`1-Fl/]%\Oo'Yu(/&nWpGBZ6*/FZd[%@eCGIT6sRs2cJRB2WQ5HggH`Yn;C(dk0;lJ[jKu1`Vs>ZjSjpY^\+)D(LIs!O&GiSH&/*M<o]bF5CIqmm_[uMp#b]Z2lFd0pZ]W+%4f/-tAr<36QJS$9IUcQ9F4q7NVXJrDHgM_?IGYau/ErXJDstC>c's4\T6lX2^H?lClh=3S/)5ub55>"Z5E'g'D]XB)A=edalU9BS%iBI-HB);D6BK$d3G!GbB1#I9Vkkbm/Ndi)Ip2B!bi!94]\&Q0Hpo_=M4;bulj7(Y7B]-]O2dUMHmDV;<Z[d%roX!,(=Pc-uT(MfC%Sat_5Hgf8SgCGdFhbKo`:QLriJUHWi?QREMAQOO!)#[lR:]Wu])uiD5'mPLJn`'#LBHa>ArO9e]55P9)Di]BFX"POE@p^"XR)&*'%^H91,oYVd.3</igGQ.5O1GeY&pA=##s'r]"?GH<sNAncRrNMK_!"Y9t0jZ/]7<.<'IYPm3Fn"-MLDbDb0(cW&K)[C;Z`o(0Ih$QZ%NnF)iREtIRX<Eu#hgHjHe5sm3621,05PEDPW.955-Wp9Yp#irrn(dcofmI;BHY3b*o&D[<s.54ur8S=VI6V_upci8a,B1-J`7Q8<%H[FgeF-HWN@\.f;!X7Gr@fL/TpanI/&[%a]bNF`#1&ITu^598h=3PUG8#J#\Z1E@EO4V^U]Bl,C\VY[lVrqBu+9)),e&'`-GnFqc%f>%@GU\C[CpFIlbRP=VW:B;P5s7`(d^+A#U^J;u>h(O8,H?AlVfonp%::>(XrGcWIrD1W-S!/W*+.jPoI=:bVM[rSoIm-%W\_+X0%^&.e1H_5c@]+9r4:ELWph\p_8/rHO4F?B"'%dPC9f24=$nAjLOTC2^HbBFI\r3<bU7lqLDXREk2a5Sal(Ziq<mu6H$[iRbZ$kM>$%U*4o<;u$rRZW$e0)F]g#6$c"toNchAh)d^uoAe<f^Zsf%9C0JB2+YRPhg5"LTATOhE.4_"qp'[C5!JqJq:eDPhg\^Tpta!b^(/P=%!pd>3W:kuUJigd:=b_.1Z#fD=o^C-$T0N<ekPb5bhs34dCI&6on:ir7]6LLi$SO93+2mSlnGD877qVXRGON's,0gGNh@CRLc7Clt%95n(-GN4"`HXl.:?3%h`HhXX>UA_@pmB%L9@eR]l]`mJV]8QG.X_6eY?;sPe)SD#Oj7Wo:IZ"7f:i)acn+j.4LdR0Wq051*Bb5L^%MZiP4rAk<:KYRH,HZ)hVO<=8PT7!0'c2?K)n/K]>52"ha31O>n?r1c;43G4a<f7;VPJ"3*Y^r`,IHA"Vm<MQ;l]#Zf$QFm/Ss$9-%/8QFY^anrD_SQMO!^+H*.4f9X.\qF:<u)Q0&/Be8asP!Bl4@H@bT65NCN]10Df3;\=bH\2Dd\eOroWqsp?tD`q55r4cE2R[q]*DD%^d]DTF1=;WUJ6aRd5PS0c0:13MIl.>XD)*mIe;4$cm!T8_@D^HYYpB.P1Y84F>/HZ3BF[bR(+I%iHT6c96/53TY:WtlePcBNS4[^%!eZYiJ>1pjn`/brm)A9qq&kpie&'=X!'G`Oj3B1iEt*Qj]^=\86^+3qm>TcN(a/"h]<`1p\1.tMT8o(n$nsT1l&NX=-i:YaKH:>8%RO":MNgaUUi+U(DD@%;)MRE%Y0aTT%I]@abU%6#1DsYO^TM&`=11)c0L,EIM45RT]s'VmCcHRKaq.;R<ZaZ3l_V*U(J,1Wt4H!"M%^U9.<4J#esRkHE;>u^"EA/m(J`srjA<I\$Z'u`]3I/["8aS6jcJtIP5IVHQBoBr)lH"Aj?r?4];@H[5-pK?V@jUR+8/o6/a(@g'q%I-0VRelN-:FlR;&YDX?XmnC*KWuHqKV'C4!NW'Si&B8qnGl2,pA[j\qfI_)T^d=71%$u$Hn==rB*jI5dj'V5U1>&Rk\\7fO*/#DY%&;#,J1^N"/&GXiG&0M\=>(;QbG<SZP;#gK.g$>H9o[1og>0*>r>,P39PcJ\m5K?BoQ;>4cV"FU@;HdDCS;HDI<K('K<`XaY^SZm8%cSel;X"*oDT/#oX<P*8NCkE'qY0'N]S6rTA7i.:l?F:`5QP5Xa@.N?b<BU6)oj"W5pferA+%2XPNE>ijpJ*B\*dh<g(#M6f*f'RN%^1L76Li#6n?T^<k[t-():/rFL&oehoFuECsI,4VXnO8JBiQ8QK2h(W!MMj"]EIMp(S+S#2C2J?<2EPM/pPr/U`SJ;c4-Ut5n,#X;%pSbL=a8^QhA5'UZIffcJ<mm@Y.X^a3lZ&JB8")[eNGV:bpE$Lc&CUh@@R"Eqj:^9.q)LBud9C^VDOb!tlU2Z'p[`=,\)P1"h=&q`%aOU+\WJ]U2iGXdli[Q!3\/*]4Nr7i!TBesU9cG-,iAu$!`r0K!83H\3r-B(Ii8c*$!kTB2HLT6T\5%3;IPrXN&/'K*I:EhNhqr/[%G2ZY=bPU7%e*P8-QVQRK8`-(\Lj/;FqI]NWUPYEJ:ESJT-\5Wpc<BX;cb+;okg!l9+,s;crH:#.NReiJ=mV1"I'6#sQnA2*s#:?$%a.&8&SO1PTT=8b*9H&$Jko2Z(#^g^j@Qk@uP`1-/#.`4=A;_Z+i6JrQ'0mn,4*s&"C?318TC0"nS.+k14tl.N5>7rL:YnfXc6)i)%TBtAXJA-t]Z4Gj*op/\E^CR31RpKk0LF8!U^'p.1DrPC($Ot/t_Jog?mmRHA0'9+f0/OeqE7mh>#qm\LpLI-K_#_)63:;%Jp7_V/%#9uiGq_'EAG:48F+@!>cgsA:I?*HOeBC4)aHZMBRpu6B6`G^6PHTi\MiI']c:O`2[RupX?ccfr$%uGWpdkZ!hc1.kj-4]NP\bl8R%g_jC:i_]u!RhXmK$1``ln,";rn),&Vh0<h#cZ49>aEV$>)(>;6,F@#-#"H5]hAae<-Js+;ep'/7Nj35%1#hjmH<M#h-1LMh:I[fD%VCC[#]5Psmqs81."TAsK/t_NaM\\i2JE,,)G2pF%d<)JK\Q@d7J^1N%H58CdF$0K[GIIM7^\heKhZ)g#+Wj'h^%$i,o$u.,cd,G'%h>cEsd?BdmK3s\b[`\"-5DB+JrjNiTbGsI&SF\rbT'ehq\oI_Q8,^^"rKF?mqu)SahRL>trn58G:C]%LS=U^jrORCrO1tSYrb"4M%$pQ?Hrc.hT^Q5"YG^/E0io9=HK:afWc>V^@']1o40Vo7$5C*+pm-%t2;f1uPH?,-Er6N?cc]1Ke`oDsb5H)3/r:8%jaiR?ALBl.c%(8kf+G#&U.O3X@<*$1[>cHgEHmsaB5J+?-2p90+H5L6arq>'D80;.U8r7#D/j45_:*5C!3+KE;BY+OX3Hb[40VW4B>X3p*C5G((J%4aqXcHh?q9/)u#d>a2i>p\a"/jrHtF=/4Z.B1E1C:]>KYG^=abH?)2Is7u+Ame,NbH@>S2oU72@*/7n2W-54VkNq/g46OAM>TEZg%k;#E_?e]r:6K)!U&C+&n5'c;j]/W%Rq<[V77m@n^Mj'ooh%.:"0S2C*io.koc'SJ&g*Lu/I,ifN4'o)Vq"da5os[`bJ,T/aq*uY7%fVB>GQ$IDbq=MSlgY:3FkR773\%(n97fRj^g&Dk8VZ6+o^Yk0JXe4eVq^0(=qYkn^HMVa]l5l8ZdDHKDrUfm<l.O&'flJC>=*;-h%35\GWIWP&_r_i&/oAJ<.Vn_*gjiPL%qnF+6H1^l@orDP&1[i'=79eB%3rI`[!&!*n=/;n9k$<@^o^phag&:Lis(`'PLjk5j??0\N%*F(_`3Vr9dUVi"il7Og':EEi:a!gkK4*m12HZFG_V+Yb+8+lc$q>Ge+3IgVXl"0(H?[Bi-rUJh1q'EV!HK+,Qg^DnmIOD`qO4AS1%\^T*k*Bq4tH?OaoN_\\CEX*\V5C<7fj:_&F1:0^HF+3'_&-?Ker&1hBc$OKs75jOYaeqGs*4Be@h#@#^?Ak>W7F'L/kPr"8B03aA%3F@]7Y=6ag,3Na(o<l[8InA_6Ni]3k6hU>r_kS="WKj>l;l`+Rcge$NkeV$@q>#qDOj&<#Eq8_lQ^qJ:Zf0P\?S[E%Rqm-Ehq.)g%^L)<=bGobfn,"b6*aUtC7fTC\s)V-Dh1=U=Im5seR_Yc<l/d'#jFJ0Emcm10pp.4!Z3pT;K[AA0o94f>4-,u)4ude5PsGtbs(?$d%U'hJQS6h$sd`_YN!]`i!O,hL-+*]QT9&KI3Qd#mS=5ent_!/1X_^?7%&d6/=06mPXO0?q1LQ`,&cHdk6/hWom/ZmtXO2=h?%@1'4%M8Pt3cHqPI_,U\+<Uc0liHK/6\+r9O3'DV5FEVp*o^joP(N7"J0%X[BW/%[jdd1=Tq&d?K<W?m[T#JCVll(@2<ciU)`]hi2jZ0nu%mq$^R?M$VDC&&+#r4c!&f5(S8=ruRJflDJLkaK)mdL*^On94TtV7+RhXQPX?IsH-ZWDeoNb"M0eK7ch]-i[U&4hpkKr7el:&0<L:%hpOTq2X\tnC:=$6YNmX*#Aed1j0;3`HAR&<&'JFlN,!MN\pm]i%kbnkDS=+Lc!K58n\p:`H?+*6%JPQ7lpZ6I'\f6u'oT6YX0NaL%<t;no]Bs(T2I5&IA_jqtWJV<alE78cY&;Cfm.qJn\umZcZ7ihinB_&sd^=L-Fc@o+hMWTt4o+eZCV6WHq>Yp@X8h^&s2RA%UL1IQ%@f*@`J,etHq]Qs)^[s*0qUQBUhmZ>9%:,pY2kh/#cF;%-Y1l.s.\/!>B+"%\69Dou7:3I?:psA.1pnuI^UI@Fg]r>ab+?On'6.F"%^3].4`7KSK9cj+CUYeGP_CL,X8IrbunBX$cs'_UlEbH7JnQOuL\u^b>hLBeHi99b;s6qW9l[aPoM'2Grp%f-cJ.O(hrV>-O7lORX%\[Po9`Y#@<DO6^So$`3r7o(egh<Bo#?jCspf3[%!c!Hn\S=Df,\2a?a7WBr[O0CIT^Ib%+AUZa)3u6_"57Yko6X*aTZRKYR&hg,/%XV7?!s7^K5c1(>(d!-.'o2jNr\e[6G`d]"2>4!CHT$&3o\SC(/"iG,6`Sft%rg%=X.F]r<[OUEh%c?f'7_9T0p!a,0frEeAK0l_J%PZ4UDIdXBZKkp6opd5JGl?W#Cp"%GnD/[FVVBUdrMZN%sn,84Rl1+?%WPWl5lnC;%6/1M@b"pXJQA74QpFSOB>MgDXfs\u5>5Y;R%qG18*oL3!mTWg]/DXVGM[AChl]Rpeo]e7k0Z:0X)0H$fk<$5%a>CX1(0WZ>B,NaP4<86&LqXBM$dhl\&Nq0b*HX!2PeV3_'Kt9tc%[:*Hi1Dum#BOJ$1FZ]9.[Jc]S=]1YD7-fE(*@WF9R2d_iVJg3sAt3's'nN7+\'Z1S8nJ,D79,c<2.e>_#COM7!;E]Uc#B[LIO[,G%J=Hhu"uf;2-Y"q6%e"XMh6?%!F;WTBXUG>=a9s?@m1S#WNW-FfDL\$*;trl^"7q^-kOer*/,IPQUb.h!bJ>ka4\aiKm=ZA6=Tn/!%@=g:K);_IS"?Xg%b0\t5aNa5)15oD<,qKqIR!k[5+djY?3G=6Z`+HCMF]B^R,oKH/lfi5H/,sa\4[4-`fQK-X[j@RS4/!gW1@:7j%aC`asfNV"5Yfd:^X)u"k;fHB'T4poSJhr+^K[_l&-#Z]&Inn&ib6eP2mi'qs20E2:-)`#Z:Y6DY$ghR7,u2fEQ5U(;]5L*LN3H.%%Yn,9L.5FfKhH":.CFu^Nk-k\6[)ujS-,XNITNa^7*TXc\"dc,O>:;jBfR6Y9g._rdkV$.2dU-p^Xm$@chWc;3>CDXoG)H9>Ko!SM%:CjJ5KW`tH3\*6/qWi1*8,DQ<6Ik^pRGUPblf\8XcsO85o$h=59=;/KDtTBl6aK?s$3bR:2P.Y.0t:*ra_W&.C_!rN3]DRur;.g2%L%8/C#drEd09hkp=\kN&o!hcp)+mcC`?+.adoOg&m%SopCI'&h^9_b/ZMHaPCnkUri6r5h'3`XQ.9GFY<u>":]kSfm&O2H'ZLs[O%WH50ZgZlm21Ir@;L.8JmD%)^)7VUU<$A0sdbpm35;T`2*j.d7;=/K1fU(%HTAkdN,Zti/M2Hj6>^=QkY=&h/`9",N$>J"%^?aI*r%[ka&DT"M%@)'Q`s,;7NUA;[%k\`18b&6R)$k-SQj;/OGF0r:0XDrl_pkjGuJ*RqP,1MFBS:`6kG.N.Em<2NX/hH:HuH?bG]-3_)$%QG$5[h@V5S?X$tFXkh/5Cc@Ke);T:+edqZL')RGA@fMOP*0m)?;h1,a7X]`8CWN`2)9OY:@)c@Z3D2#HKp`+4^1Fn7,%T?-,,QNi%;_.1WOQ!Y(B^-O/qmPL;6^`9?"P1m.*f=2SU58hK@E2(Wg<UOTg>q3#Bp-dVau!<;)G7UZ3n:R\pbY8XkFSfR_rkGmmoS2gYB/2r%eru6+h0).+N]K\h]%GrBF5:!HE@Cb`NB-q#pot05nfN,X7n+:bs1WHQ['eFS7UPGeUA*bP;7$4&s'Vbq]bo)GVn_u8^:MSuj-"63%Y!+#^WEl"-3rX@VT3Z;@8HJ58>&ou7T7j?#mfI24GZrfM48%ZZX7?']Oo@5m4.Zc,K,S!un^$F45$qu*q`/"S5KXaV9qcPn)_V;j%+%>s5?f.O6ZcLQo](]dDkbr0S+n>[V'rj$Cp/)*tWODaI[45I^YPTN^S1pJ0B:u!?+Y(u9.s*q6H4*1&9.1ug1FtS5d+.oUR9mWs%dt=Yf4ftZ-B>?=\j^(kPW)$-<(J*XXI1\=>SJ]fE8N\P8ja/+PeY>n6a;7^5[GS0S[Ct..+&H'6W?!(eN,mr`Xe2e%&N/m>Suj"*%<.Q"uj].$poa9>Z8R,,_N+/M3_ib/_`1O^ab^H#NX%D0HOI;D/$^jRFPi3%e)Ob\Y=dpUj>L"o9>>M:Ia`QAUC%\ADC@CfUopQ;[%iP5PeXW+'!paWfD4)Po8;JWTjCnjsl_lZt'A>UD8JVp-[-t5ZNQUSd][R3j_]7tn3ocp=V=/6N4;ND']\rb`[g(f[Lq%#V6IZ/(N%HX4RDa-+i(n[3_%Cq?/b_hNON>>(qZjiLn94hf"Kf!mo]nT:s>Y;s03&SH<94g(1seO\?YjTV_FeUibf<Va\4Bia:L*GdM5JJfjd%X-`ps!fEC(,;nPZ^KFo>G,`U7e4U)#"7(Uc=6E&YSu9!AcV_7<Z+H0.-uAlgg>0W<XlR8W4^%?cYRC]l#aXm(\*E<hec#)e@E<C<%=`^&Gi)PngD(X_*I-miCYoeQ3i4LfTN-N!jK71ug>5bT[]ZB>Ug*2OQeEB8m$Z0OjY6B[3Y$Wd&"U?2V:SmC),@q%cf().5A8`_J%rHP'L1B1I[bYAP;IOeEFChq\8.<;q0Bu\_63,l$ViI6&U1OGN1;R7Tk=XLM2))Ga8)uXN1r1O6_gG1;C$s(_PZ=*/^=sm<nH:G$P%e/=Am,;=7?<ab3OY[tg6;oB#:R6i.9m?mW7/Ir@1<PcUK[;HdcWpK:5Kt=[GE8m\I2a14022ZG[0/d+Wbs^YEXm&]%6$CRN\5QaL%ql*16$lV/^7E,d%[o#;n.ip8RXm`@XW;16P=o0XNF-oS/SXo!1WgB9A?C]_)O#)JF-EYQ!DAs<?[HV9p+U;?X3PK[^42"AB,(@K-%biAZlZ'BGm/O<nT[9<*)fB+=i2soChkdp;hm!<8m1n3</$ErI,+al/*8Ln9lbnM(U]R<Nflg)d1b4kdJD38cWDO[Ng0g%[>d(W=E%?lO@scQ>kZHKt>N,GK@6TiNc=m(m\_j_!!LQ\NqD%&M,pLVYW8F\l:.ZUIQ'F:iBNb'j\$GNQ.OoLr'QOGE,Q#sH"Y[^p5QA*7C,%1'D4<m.ZeQN310!P7]?8h[S70,Nr6UmP>6ETDUQ?a]`U1VA49B%_<*rRC-iL)I*g(fr&kEatE]r$ar2>lA=seDqh7KahpAE=(quK%&))))"t(6f[N+I";+D?`C!>bao%+On5!?1`;b6-aK4.8R%*:%JE00"rW0s;"c/?O==cugH17YXO0D3=5=UrpERAMEn?Y(>5l7<UO%F)R)iO<I!_V-9FRc^3n/+t^EVBea[]I;j,un0p/>mIBsR9@J<WiObMgcpSq0h=>L;pM:F1_KJ\^=>kK4A[\#N`+oD)(U5`u=X!Ji%717T_>0.K##`7P4@%;O29Ki'u=Z)LfVR*-IQ6%4@om23GA(bB2B'-q63]itYFS;b=5<h&*1]qNm?2$Q^`7f7;L":]Fe()r=9r^51%Dp1,-,)2*3Z.FptN4lVL],V((l=#EfoTg%:-eMI?_Jt^5m:'<[VJk4WeYMRDR8oYhO^6dhhs0Cb'pmr*R5))HaNT?LI:bri75EZG%(=Ltm:h,c;W9O(<WqPe0nfcfJllH39GQtC,mnF0mR;9km>k6!E.Eku9#>8u=i>Q`[m(j<ie`I'O<\`<u&bM'*]XL?OCFS`L8bl9Q%p)2+I[D3Q_f(!"=mHL*dHMSf22b3O;O8!$m8]+:.]>gr.Ha#'C>/<"KXA(fU899V2j7K%0XMHTdN.lX-8%YgMGA["Rr%1BqEuFC*%=M<U6aj,OHMYC;'SugrMOEIQ@>@Z0]_<<3`lh=fb@8%h<PcdNULVr2PA4PKi?H2h)\GTI?C$4'Ub6]$1fh;,"D!0*Zf'8eTABijR%$0?[]$hW!g%/S$N=RZt.^VD\/PP$]$DR=6keh!Z::eU2q5!@uFEm8!H.Vg9TMTsd;,jAj@fu#@!.un2=`T8.)DsR+)O0b^cec6S[%WPKFB2Cas]RG+T9=VMa.i1Gm`a=QV^.+]1ooX.bYgn>UW&"0#SKq.VbCC8CEYf_nNX:4G3s0l[IhGIkC[@4A;Z=q9C'uMP[c@"LD%8!QNgDot:%/Q@+t/;A-u%$N3X]J>udc^TlH4?p<fD+<l+!?.>LS=,Lsrmjs\T'(KIn@Zt]5o?Iod>-Dtlu3mjNgVZ1BKm:I>$I%l%hjSg4Z!@s2:mi>ZS<c,uX[_;S1A5u8R.5G:s0=L`[Qh>pe^FFr[Qf'l8k%$n+Y@O_G%up-ob?^q1YBCfp1gfE\fML-&^A+'MI?E=%O6r`S)?30[Y2Rn&c1?eT<<cn=I\XsT&&"BX@]]7]nn*TW=ZCML"Ye*"e>a<J5V)8;Lk2RcQ8]7V#-_S>hsIfRBO/hV+mT:"ZlW`5%n=@!IltsRmhe?*:])MRNP%a4d!bXA^HR6LBCI#=ab<OjVHJPUk!ef$gb"N'-iH8YSCJKeZp)8S4;Q[WU&E4DWM]iarO4PH8+%A23%X_MLYAYZ/4UI*ugQB61#IT'p@)je*a@ghP[gs96daVSt8+L<2tKfV$8eiI9DM'*"2DD>jr+B'OQOL[\1F#h2lK,P7d(WHR#N;#.u%RE'URm&c?YVK;bUg<YMTp;9VWXHs#m:&`1;<A8!pcLB&Xc'7s`NTiQ,aDAu<P<79iLJH#8BZ2<PN-hKBn&s8$.kC47D:_,:'>_uS%_Hjc7oN=u\1qlU(lOeHRZ:Pud,dlOg)MD*0It@@2CTu=*`X9XU_/bL9k#MQYk.YM[rq1#^-&@gPSSci#AWUVZHK/R+aH1p-N]//i%f]PR5Z)5P[gF\AI_t^\Xl/"B9e7$i"ccqe%6_@'&\nb.5o?WmPcSqf022ue>j%_`qIH_MGPRfRA_&9>`hs/F1Rd'FM'?8L#3g&K:%n;k=fqf-<:qZsiC#'hXQf=$@Z@Z1n9EZ?He.K`CW$?bBa]3KP-`6H&;o\!f2Wg04%SWKL@P9oTs.]0a#Q@,ulElU*PXnLc\Kc08u%CI`JS*X2GnFBoX7gLP&*OkkMm`Q[W2oIH\O(2A:W/<j!n_botSAC=#JAZlI00>1%UVU:i]jV2cQa')ASa<5&R<FXKP4I;A4N1*o#%>t304:N_#kSr"Xc<k/@]AjknUgsP$&hUW#YT'%rM9N/(5LnPY@C*K7Y);PkMb=Nkq#DPWXFiuUC2Z^7"?!1riq.>?CH5#,YloS.u%.X[XN<gNn3ji2"&EbaH)H<ReIa%7e'j+sajBVW@:[p#PrTBBlt7bi1L".%m!8U3]#bu0WtT"CS@?=m3G%4:.9@G7!Tok"mt>KCM-%'J*<-%(KcBfQ%882#XGsM2ntB;c`RChQ!+FjpY5c4.4*U65]r@K>,+)h-s[bS]k)nVTE/K.E`IRELJc0`(cC9_B&Vh8"930Wg_r@%i6RK+kDE86R>L4/Dd603[K!9:H&0&Ss(]`cEc"l%lVQn.Nt-joqm,[]J'qE$/'Fe.4P?!EWG)*7\'Ykj'*#AJDjmQiOl",%ZVOg!%9i:]jo^1"lI\mm`09Cjko>U3!s.jY:J*<M)m8,ZR5inH..#57pqPFa6W[RsH'bV_@iCVp.[B#&%0;I*L*9q![B,D*Tj'V]D?fQOc%iidkra:EI!M8L3(/m3?Pd4oh<DJ4F@q`m2P&C@^3r05!eY$f!urU^duMk=KqTsAAO57X0u?N9:Ok@YTr>8YJL>WK=JZ\iT1<oq\.%X[D%fph)GF0K#XI(2Yr(&amgBQA`'6L2%"O4bPi'BFo$eBIC;?leYQBGh3=ij\XQH#[\UP78^GjoFq1?]<83(%-T3rPi_b8cb\80%lDg8,$6Dp$l\a%,Ce:U(cS)?hDdT8De5[61M8MGO0OmJ`]J6ql(Ik'AeNA/#,?s0l1_$Rjeo/@L<Ul9%0WU5jFfoNCMP7l_Z1V;K%$l7AUQ2plHS/W:pDONc_d_g33GhmFi\+'iP8Fu58eQc.-?M*RCc`pr6]s-);cAeWq^Zm,0hQtOj;KRiq7[-A+<%N@]#JBNZ+hl.[%KFkG\e[Vb8m21U$QOsW@oDB`^mnfA<\9-fE_KVAn_pe\diR0T?Fp/U(!bNNUPTi<pW_I%>kt:FVdCuW`XkPI/bjYCn3K5AI1uWm0%2-nZH_`Ruh*7kDbpuWk,#OT#4@,J,V+hiZ?]QMUl:c-XZj0"dfbhdRW&uf-P+_KC]FE8Z,]./!(%QEUlklFb/L-/7Cmo`BM4D$3@%eMoHD<F$9Qi!6[Y\jTbo>Uo(W9nleAn.<6rqQ8Wa2[Pt1d0?gn>lst2e[`4@T()[/O=E_ee@8mRDeaa1lMA(a,?4;A?&f%e2Y:!6%7ST]:^l2r4!H-W02\F@p/Y]C=/-E^fg,;qlp`6\uld(nl'\!IZjIn=E"\@^V6-V%slmK=5HZ3.sl'n9?Lo\\<HN*"0NPsbcPCm7/%C2Ef[e\rP"NN6^$`DFnma>j8[DQCj1jD9F3a+9LtJ3C->\Q1&N!Q%bsdO`ifHj\%fV0[b-@%^Z@#b?`G^$BmfDVg<#=SKO'eISo"%<SD6/Xk:TM3UgeS&F]+m2)dt1"GH"t0&XMl'MMuZrbAEE;Uf=S#kl"ic.IV^"HG8lD,VUL+V@cc-4']l>=W_OnT3LrE<<h@dX/6?%)uuM0QZ6XIi^?9\%Z^PCIV*#^eZ$G-oE'-/)_\(5nTC9h*$M\#=][U;7)U&@a>X3kA2FfTZj>$W`9;47=i['j%)q.i_dZeQ9aFqG%E1+-M7',aLlkelgLqMMpAQSQRaFoEg`j0I;]JJNI8L+I1]0_-\&!=,K9_uTMe/F(9mTnEi.WT6&ECQIo!J%nETc4<dO)`(l<6pc9%VeJc?qZcI(S_$`9$(G=3Dgo5EGmC5-->m[.WC%E@au=+7M>;G$m[J*[m6DQ%3sZ[/.UCct&^W`p5S"K38!AfUrIg'A!gP$iNhn9<%>X9R$f--SR2AkP=B#q1A1:"@%i0r'44Z*M)?.12"_bX\%ou\OY(2]<6n_Jac$:7lOG91WLaFp%+d;FcgcKOmeM\C%OqqJo\7bb9,%33('<4kM).5442GD@[?-[2>@Nf=^sN"qpH48TV]r4#bJ45jg-41#e;`D(/S-3C@g*T%m-V>s_nVSDS9XCoqD?"J;,XZ?m#s<Ki4L%Y't@B,*o.^[G.QpV\'DHUsm+#8eTT)>aJ_ZD;63!jN^FS4=J,oM%UbDqJ)\gP*Jjs,tmTuAkEM?Ou%\g=Ah^93:_5%&!7#_@i=E7%,(S2t'3c-U/k'Y:?72+#@u-CSUl@J&j([i1,Z(_hZ?#7)jG""'--f;eZL+r<o<Ek!b>&`Fk6C3B)eFnLYc)r!os[61WW7i<aj7D8%8d3UL?Ob3$:#e&]"qpXW[SE'fg8SK9&=ad6I8W;\^n0#j/2hE%3+6:9X'p6L7U[lff!K[1)D?f%7rh=[+\S%F^_"eqDqg]YlZX;A%<(#&hU*e/3P*4]pjYn0"P_?Jn2&GtRZ:e.c4"Eu?lr2s=[M5fU1BbU$:(%D`(m$9L(@HF>oO,MHOmAb^L*:YQDsA*\ReJMOoCF^h%$d;3f.P-IkRm-5U!X[6.=<iBPTEQJsaERRuSG"K4,,E1GI_(enW!_8O\U03Qjfg.0%-a?1H8?_F(>Q8Va)ce%g8Ds>qs\Q>@gdM'%2Rnt#o:B^TC(^.3rK*D4`3+5r\KE=V`$A#'[<8FL3TTF\,dn3E0(#k1Z/U;)DcE,OU^T8+k8j=W['HiI;Y)SYC%FM,!eiO(ppG&i%,kr"_CqH\H^ljsZ@5+7k/_=#Rp)=B,Tdld7;3%Wrb"2rWGO%G]+FlokJA92_#)m^D$rmp)4R1O")+B*DeBEgf3:6/X7p;)DbE2O8%ee+%]1s(mfg^=_cHC>!<mopVemRaVmF&XH,>6\q;RNb354jWfob^4n0J9531i8eP5!%TKj;kI:DFWKR.fs,#hl\TM5h0CT2FM=a7%?G5Xie2a=e*re])5dDd<8LdNfo0J06&!;mV)$WBqin^35MpU=fLN\=-Dhp*pTT0^&7-W^anD,7"O'lVB$5q31WeNt*\22ARSRHb^%W+,?"30Q:A1+'`tV:m[C('#W_(;RM[]4co^MmV7@lB8^^N.dW4;,*ekPQ?uaG-"c\h'*_>e44l>q/g]V$rsWS&o+7l_U(2>Z5FXP%Xi7-1LXl"<I[40S^rk=I(.k\a'8[*&EG%1?J1j?o&h$Ed&akTH>D8ccJK(_*Qbc#l@q:-i^$?J'Zlk;h8io3P)rRqC;^X=lEG`%6%KijO1j;^Z;og#_7@8T$$m1C7;XDfIQM*YF\L>[C3eGQ[Dlddd[=E5F:4\3Ru@.UHEX"'*G^E>r\ku<l5#L]1*1ZV\]!i[DC18%k`%)7Y]!XT"rUjAf,%/p(f!kUq2#1`Zsk_.a\4iaBckYWrY.78n.$Si*ga8\G/8#U8m--/f[A9mHt2=/,t;W2ZWDT)lq+C)BfnB+'Rl%Wpb9TmC&n6?q>9T6IiBV3*YWZ3Qd;F+M_!qHYDdLY^_d\2Y82.GTl0aj/Qe#P43o1:1cHrWg4prPK.u>/@S3(JB3U>0*.NcS2cMq%jM91;C2k4<_%<TG.?`Xc^"`;on)rMKr+as5E0BHVT'dE:A/LK-nd._:$)3^rX^CVYBfkpT/+"C1fE^C3-fk#^:C2#->*8_N2KQgj%''kUH2"K`8EEk8D`4[)#-#eoU5&k:qD//*s(*[(mnQ7"-P#(?TVQ*8/:go0CGnWKCb]9(/D@QE,OZ$h]L7%braS.[l&>Dfq48Xmo%FgsT19dpXU&1Q)r$-I(S@k^JmLbU646qVo_qS^";fCcc^CDNQFV(`6`%$jb\HFmU>gamE7f[&@/J1tq$d:U(T3D_V6aTK&5E6"YC%ZB'UT4c2Nr,d<HVar+5ka",?B4V9^qj9:?@3a9+GHo_XtNA0g^@l7bB"pk[<US\,"r?_R;2:(B/0le4!B1^+<N`CJhY6SUg=RTP;%5-iV5FfN>&d<=78X*UF=EGT'up*P+rP(cBY5p9c::'g8EN]do6k*^6rrD/k@+S+1$D2#L*J45S1l$1;:"B]K<a&p7NRar\RglO=J%:;HumgWbJ7kd)SROh&`[Z"Y^!-n393?JZ2B\2C1:<X6H$SLjh9IF/mZJWbT7U/CqUS'jlNL$K8sAI&1(<s+P+\/`Mr9.*bhb?H6%%SEg@!#<7,3^;GdU)%#G/EkGdrhdT8iql=FMk!c/-C6<>c`tiioG6OFG_(#PnM+5@55\&RHGN-D`Ul*3/@:GC*08sm<["JR;1N@qi%8VR?bXZ.1L*KD&B?I6&:<So+.`g/MW'tQX3/I!kK\39Ij&oP+EWR!r7>W1ja<,tTm@"ojBhRE&*bSk".%:g%Eq;WIM\E")#3,Q8f%R,&>S[o&lM3G(f_"Fs'mChlHY^0.8iH'f&7'jUL-WN`Md;?@]eDHdE#.gc'0.rhd8i4/G)pKCI5`tl_O4QKkMLc#\g(EDFTDdRYh%::iIuZdHU)"V7DS.;#gFJmq"#?k5tM&SWc,(C)3XAS>i3&heuH6lLZ?h3J*\Vpo3Dfal;bjt-fbF)oY7d);ah&^A\:Kj6\2$><F=%`%aDp'8:NR>mEPI%iIKYP2HqFB[?b\O>?uk/OY;7TT@FD)i9?M7%GP:"aps,OH^c9Om$$.GVHD.R4N<FUZI=tcKeUqgV`@fK"3`!%QkjS6PH/&@P8ugu1(OnS[:;_JH"24c$bg6#!Lq00_$,@fHif1p1<c,"b73ipB9=@B(4-YqSTb4(1<J2q%-fg':A)j"UU*2uZ@YZ4%=]U9Q,Wos\VGK5;cP`>+/^dKZa<u8`=KpunU+Ho$$O]fDC*q(U)Y!ijM\DC93QGaY.#W_.83I,7/kr]@Ca"6)>+es-071rlQDhY=%@'RL?FchY+q^-Su82/CdXl73?C;.#.IWYDeorMtd=*aM+e1jWeZIb+BRE.cl'FmX2EEYQB)<VJ_p3/h_Q1DG9Z#e1L5fbXuL;C9:%Z_0*oT]DZB;;k&)MC"s?_Qe#_WKAtHlij0"6QAB,AP;nQ_`2'=bTE9p1mIf!/Eulg6BBV;Nm64g#ckD2'-LDQ`<HXg&:)>>2fu9U%M8TY<59_jpQtmu-S_ruGJOM6N@G"3N#0lM`_%0:1RF=1i%5sF7=9Qtn[)n_3m9)c;'),!Be-C7YP"diG/[].t(<Z]9'kLeDF&c+B%#EKTH/sb3PBarEe>?CEM+!n=?:^C,h0^GO285!fjB3OQd:.]:^<E@#/VCW]W-S'k9g2K/ILUg;t_tgAQ"<1(U.MbZTRfT;6L@:6\%Q&s]\kig..TqjT:Z]f)n88U>O&^)FkD-\G?!O1'cLaYi3"qjg<-V[0!C@`:3(g1V>Ud)#Hg->Z!(r9T]#r=G3D&n<.kU*L/2C(Ge%HGKjGY)<nXg$6@N)]T:kSd6dQiBX![)n"2H8O#$\[08nZiL-K"G\B(F%Zo1P(1!*W0GELr.\sMu.6UR"D+O"?,afpcFgu?fG:^*r%'BiEAK[aU1.@.*sB^m?F(F#h1K-e@8X+^eb!enH^8o8N.&L)4Xg&Q9.AI5=fK1;gL"Op'&CcZC4fFk<^2@iD1"A*H=%3uI1.@?h#%65>__>?<=LOeoK]h")1W)g6h1-!hmn[LS<.:!)V3cLjSfe@'aV1K%H/.?gKjg'fOO1*#,ROP1*oj>*COV)J)WFOEQ7p21FS(/j^T%B>b.VXY7Tr%.c)W>FG=C;F^-LRU019MKC!E3DO=G:9DD?;p4;PS,n;?p!VqUf[uAU'XG?IF0+nYl'P!\A&Vkd<t)ABo!#Am*j5?F%CcJ4npeO@$E?(=L_(R](SF[#="\o*YnXL9%Cr-Af[D!':I-a3_,RI+0%Q@&(j`Xc/HQb/EN>^Au4*%B@:r@+b/Wr;P+`(<)6=>.$%;QSP1FPIA$Bu5MNmN2UL*9/HET?cXMA,DYNWYVT`oIVa_hQfR#4aHQA&KS5j(`F;%nur>(Q*?^AJhKWsLXho/=>[,KZ;Vu9%I-ib%\>U=*JpkK-3#:MHO@C>F-+dLOi8dMLf4sAN9>:Xj7iXh'dXt.D9H>s+QA<J1Em>(E-Y;E5T_'[<ea0$bdo^eAV3"_eW8qAlg*VpU%_(e`LW)r6IML):G+5&t!@IkTINrR4p()peI?,hgFFS9Y26MS-2`CkOqduorC.5_P/]T4&-=jgK?^sM4!:#%^.1T_&pBk-0;-[P7a%3&JhbBK-MW]]oKRJhnPL$hjjGkZenp_In)ZBG>K0#jZGMO[m]XMJ!?8#.+*f5n;T[7/&U=F\#IX<%th;bRtLCNjR7"1B0Tt+X)^>%hnsgE4ijZ2isFlCKodLV'NJ&`$_RYRR13L*$0b>KV27&d/_,GT&e)EaqJ(nb0IgP>j'!D<n.Uc`.`=qT<_]CK')X!A`1]r;Ooj'(%"+o:??*0,&VO:aVbqJR"^R=oZNc4n@hEsIB8:g*6klqsLo[4M:6-59C;&o$8&kj(,E2K/l496F"*"e]HQKd6_i'a7uX00"Hamm4W%UH%Q]2[aVD#(+BI^VJ:N"_,<mPQo(&;aCq:F8J'OV$;olqa2>;*,J*ILu\<@T`V!T9*igRD=lF9?nr[p+iJQiU.]e=H<.tRW<#X(%!W5deY)&%87S].l_5er9;1Rjm)BUBu=?+BuSR8,g)J)Oq?V5rmW\:B,JYJRc]ESsSTqCS2=JJ4H9I(d4!%XL`pcH_V#U=/+]EZCD%,/(Jf+(f9E],_DNJ.a*3=@(\u7NEA'n\ocL"d46`d0o6J-dl[b*09V'N?Z*^]\[Ub5NG<P,FPW\!jWJ8@/g'f#q'/ikI)CHX;#lI%E1e!p`aEd=O^jQ7>Y,)&1nELmjHnsPShkY@;kuEAj5uQ?=tC&WlC7NF*3^`G5X=AO<B=Lp@$-JdaOMCi@i!!F6m?L3C^Oa*KDB'B%!uUe!2?[lQZ]"IJOa1%[Xc6.+UW#K]$9f<GBL(e^0DH)HP(u7:*D9dt(ejq%3+G^tR=YB+]8Rgd$Cqe`QZbYd+TgHN?q7q),<.=l%^6AW$N[2f$<?2m:a2fnY@-f&q-bcMWK2FTE1rQl^"rAYYmi2IhDi'$S3mij241F:[)L0a/FUTZW1E$8f0F^H['C?uMpP7Kk>9por%"g^J#1a7s5;2beL*0.[H_tjs]<Lbq_0fdr="/AL!0V2i0M6Tuh30:&%2P<V^CLP@\rMK0Ha1_)?&?X+64?d2tJM[[)/0;_cOl=)(%q3MsQd<.Eb-RXr`8o?fnNJe+@jsAF6YXfr`YiOsZehu.(/=Ju\i#<?[9jiuWe]I@s3!imQL3!Z<X<G>X>hbqLoNL%7i5\,W\)=;/%n;`Z64MIo]-;$NqElUeLRZZ3eakmHf\%$?#930Phe.`^W'EDgcgu].+dsOa7=[7\!M_c?7$OM"leroYeU?P-M##0:i`q>j,H?q=l%9Zo2];q"%Kr,b&=:MSP[]IOaq\k+hDWP,XA+R5n>6,V;5Ep8.G9#IZg;`]a5\*3$f*q";.(LSeaJIdq<e!n%,0K?AfpmG/5'j_YL%4$]a4XcU?_%^;P1N](k\ouY"RVl*]*]h8[T*icPg,=Eu7$#uphfAI)"ppH+l67JSj/5+s3,rl:;/Ci9]@hu@L=%gAb"=BZ:<.[&m%/;7ReRRWU>E2B%ZP@UYq,[5ebV/Z'pN:]H&_QE<<UR/9N`E8F(W0!jm*V$KWZRchdp+p_g\7ElqPiO54^F=.NmO2@8,);;U,^Cdu%8qBm#!lta28Q%NT.tl'5ee-3M#GH+A,_]r.7WO@F^qZ*!^85PA1LD_*iVZQQa(]2)a<cNpb#(,fT-'4)eP16$U]?+$E=up4rE[c!%N<@@"(l+R0CFMKIeKj3'N-fStPk%c9Uj=BLV[bUWg5]9a_BCj2WC_UA65.6,'15Yc>0`8o7%@saMGFFe!=;02ijM1m>sg&)iV8k\%;APmTdDi'%-]9>A.6+:4&]sS52Vlg/iY)T][!ElZ"`bu1/R<q0(UTr0q$DLB''g4]8F_a9fpcOJ2tBm;B;A.K;KL(Qdu)8l+,AH@%j<js7)$sq3bN(%18I5^eEqp%9Tq,[^.EP@F##A:l=X$1'JXlXk,I$7N8#6GkN)J<f*oTU-iZhu6_Bm3bY]S@M,@l:@^$liakK3sF%4tRWj_l7(%]Fd=C2_(>Gp6,*-LYTT1+aMq?U5]F='c>GJ3>@KGaTN]S>L&@\EMu%-JpGV+KWDGlT?NW;p%,\q8OSG23/AWA=WeH8%%C&Ief7Pb1VJE5]"f9%gUWjbu_[hjU4qf`lrBo;B,*N:V%h%*TP5H5MYL1ol@P@-ik-5u:F4.Hgq5m7/aJfAE_YH[pbLe0:HNNK-%>Fn12\/,PD9NqtsUaUm8K&af'2SE3`Rg\oAZS:5<dl9W,iX&At)rc4kq!k-_YF5;MI#CF@$KogZ$q2+[0@"B&^GO93OjHpn&r"D(%?cn\"p45boNWa.6^_NdXLi<pZ/d8N<C5WL\"*Fg0m_oT03./LK?.K_;EG3<cLN',Sq#>m22UT_KA,:9[XImgjJHFPM?QB,`JY(?0%*>)#Efo23?`eQN[mos36N,G9j?eCs7l$;=_(cc75b)"g'hGsi?r'$Y7.r@B(N'hYgk,'j0kQXVB:hti.-%BSE#pDNqTp;Y#5a&:h%>.W@d:^A$Mbo>PK$NeVd%h;@QH%^3.;2@J3N`J+2fi\k.E!b!)<^:U4a;n7IX]c1]=TNOBdctHeY[_o5Y_f6>1F9kt%Pd^#[0fUa%C^Tb>?.&a6NWY!\95U@q.b2n-+u#2SHs#5rPC>Ujj_98/4Og:EBHYitJj3K!"fd^STPfPk<SrIZMB!6MkS4a6nJ,;e2@>HF@ci_;%4b&Rfk8*Eb=r$2]#dU]JII_fS+J'tXq&j`j"JmDMJIIcMnEsXMNfCZoi"i[o%Xt]-B2_>^[L[Kf/:C<DXlpRX!'@U%a&%(j$:Q&Q%BBEo#UE[^'`VaQ55-b"aVe,\sdD%?CDgQ0lj0PMUDb_@FDVl@^*?6/LHLgRhhrF1//l'`ASUX_q]6NfCPD^dn:S/Vs5<4#MTDiiR%3bWoN6(Y)3g]qMnWe3c=ps,+TY>msK-#>df"#:^]64i'RR3)!A`EZ8Oc'@HVYDPH_O!>pbMi#Hb9\maFcg3C3$N_h]modCQos4:-%id/;Ar)3+P]VoOT423l.XrXB-S42b/s0cT%s3^Z6IRR3V@NR0$q@-[<o'<El#oYi,V;1k(KD,leIm3l&o\oj>a0r'Fk]P!,VaKX$%4ph=onk<b"-'Ba96<p`sMlTNM"rF89J6!BT:$.l_E"Oc!lKMPP_]ZUHA?MoJo*pS*.J$!%c^al(jdI)u(fg6H40,,3d1diRl3M$k%)K643Q;C#E.<%ki?mQI\@41,JW'jSBUG>O[?!+s58_:plU+,S6$I5@Z9b#Nl>:,fU(<\Fm7A;4?Wl-V1(5\p\=%1ORh-uX_9(u@3%RSr/k'2>G\eqp9Rr5_9)@Tm?7.7jq/d1h_)bVH"#:M,J^7'!XfJ`&PK[![("E#<<71Gt97S&d@=[7LUa,0prWNoD8s9nbGX_hF"B%;cpPO[&2lYUTp=.6tD`)HEsQO<)WmHZ2/aC7%UBOV]3E$e!(s,JM&b#W:bJd<Mh2UMt@tZh3N[DW_??D]LAkW9mPBRkE3tF"_EU6%,FN6Qe4&Os3n"em34bY01JJ=+5t'h'!_l0pZVE@]0Y%J3>Z4J?qBDaR&\4bqW*+k,7BS*4;3>Ze[T;LY;V`&?VY'Y>Cf>(bFg`_V%0/D:HRSh?gV.`/+Ro3c2ZV;n&P8U.f(8nH4%DBjYU#,Gd6BVUbcDdLEL`BG>jV/Ig/R4EZb%&*5bFDKL<&pj-/<WW-P]2l[$6gJ/%h(hR"1:Tk*"e9(#jD_gS-hC)uE69G-DjbhW-tUd\RAYQoFD`[/:B>#gUJ*=@_JGNu&PVaEi.XfO9euTF=]FBU[nK!iPf)DBr)932%^!J-)i)#L;TH#sdAt[;>+pF7OAIba0AW"_bP>It/-&(R2=f?j0A1EdWW.8p<)juHgj6:*//!5W[e!\KLAT3ol.c>D[>iqa^/T@:#%R>_Ji'DXFa2QB"m]S-V2W(?G*nkfGLEs/%q$@#^L>N[ad<>\YlCa;qW!U]-cWm41ifqsLmUf;TRVMciX/(M-27(Q8'TG,>H(6XHo%9;U7C9M?15Mf,$,bZ$hrg(osBWe?q2%K^0Y.\Nm.aQ-;$jZ]a3<#XBaVcNE4fu.U'<@+Tdi&.F*$5=k3#D7*iF.&d1o1F"C<KaA4%Os++DWQO.`VCKr_gs\gu#jih^-(Uta:ck_^,#d%%P/Ii*fr0FA-8_9o$5?QWHq56h@>:J]<J>k"')=+J\uN!Xd2d\(YKG4F86E9g%(,Gjh,u,SG^!WXW1:TqKjgg"7m'.=-BrP-_5ENB)U%:R<)O*^$>-J4_l#0UP?V<@4$WCjCdo_<n`o'D+/PcLcE0[)r**i[Pikc%X%F%p\<QPllT'&ur*W62F.bC:jo'l]:J;8(d:KOR>Y2))VNYL?U!Z$'!l[ZZLL;+;)-^6h2T)Cpf:R4fMn9sthhRB-fLE]*r`8`V>T%;]*]rO]@huTPZ=p9;XQ[VFbBcUr64t$d(i4ZW[MF@.?Ut>qK/_=!+Tn`>%';GcA.$,LK^aeS:`kWj5iCgeQ=u2>Mjp>?1#Lh2;,`%`sQr3pLog$$*<9W23=U2@(9f&:o%>!aA:Y\k1(Un79<s(X^eKVHD8f+JWk-tp#Ob<d5Kg2gd+o]A-WB'9i7Vo=L1r3WOJarY/!_<%<m6tT!\\50L5R7<*fgb$`]6<5o7D$g,M(Ht8pH#`3/sNSdpd.PiLf[>Pr(n=Q^Y!jL]S@F%ROeU?cV),b8=Mf`IS@b894lGqWqb:%('O2'MZ2ff:.aMc1H:6&E3P9^$QsK:WQ?A_6DKTQA97$!^,D_"eo:)#3ubJ"W?-p"&8Gl<\?m8SG]cFI?Hn1.OS)jQ+k3%'\BN/Y%^*T[*`pqjm7:dAN#&o8sXA>iL_C[[B?BT.?Rc`i&9YJA]"86r9dD6PAnkg4`MAnrTf*^P11X_._;IUi45qAo9JcJt_q$dHlh/E'h%[NIN))G'QC6)G8%[%GED]dK/#qOUqiVPS;nW]ni\<Wc:ChTHK_-"#c5+@[U=O1CIGpVbH)[0S*-M/53D4Cj6?B^fbj"mag8PchY4%@gK<31d):`LcaQn0:A=q2C,'UH>^;7#dC,484HB7FdH&Vq.>=R+8f<)+s_]mAhaZ*#Ejk-jG<pVM(NaNq&4tI:nQ`\8Z%2A\o4d!%<q6!>*g''Jb;5nr0i-4RiB^XC,"AuV,l<a<`=fWYA<dp^DJVc9K>oDHge[\dN%`T"#htaed@/[,(st/P2<Xr!aciui-%cfV\.?#^%D=VI9?Lh$H.Wl+&29VSj<D]r':TpFKo3RD8(jP^Rm!bUnXl+W.(47`a(As0P4]F">)mlW"Ud?:q?;b4IF42"Qa%9Dk-QabJVqhDn%C=;1j&DCk_)\+sFlm`ts-2UH99%9)9&C0k^R!q)hn/,F^%C$eFO[#XeUYmh6qp`2p6$l:"C$'ri-<3J$:15)'Ej`sToLK%SLfo<)%-\@SM?Ip*lLct<U"l8e`9e92:+42OX0tlXEKX`e-.uslH\jO;**l[UnKhJ^JM`F/g)a24Q6R`)"+:1TB0m^:$,:2mf$8f'Z^iq-L%S+12"229:2nZ3-.j<uGCTT9R/cQIK*VskTALU8GMV$A_8)2._5_UMa;U?a,1I2/]'ZW6?7hLU<S%8RRQSB!nZ`("UEIaBR-mg=5Y%mpsuc&?!%(.T:hO>Rd43OnK=h"AY,RK&ffATX[%W^F-mBl*boH?VpqXh+teTU^6I1JCGVcL0!bK4aa#,IO#WZ[cj56KS#&nU_aA6%i%oaL\!OWu&Af^g/h;ej;M)d8i#7h*'E-$>jO7&P'drb9%5mQg_9"(d(b,#[6+FJ-Ytru\6cYAsp,M,HX'H4if,0on_j)b3br)O9%_4;tLF23#HfSJR_m'+7O]8hNL[,MoP=HDK"$AfdX*-n@YaZ!G8p_d`p*FADda!:4%D>nl!450X%TKGG&1&cLOHBW%CVTr3jLM;7T%q(-(`D!A*7kX6rO>KStXMX=6]'0$[sAp,b_^`=u^a&?n7Hqb6UM(qD<.UA-M9N6j?jTRj:"Fg8@Sj*Q:XtY*9WcY"hii6cd)dSBG%/Vrk]c2^j&9c.Sjb2E\*-$PoalUH.6Zrep55N1.[#Xe'_P2+QVm6X).n-a?SQDQKlLEIpPKo5LO<c>gW*"kTBW\um%XB>-M@jJ6r%nbP!:-g\tYmK;gtHq!kPYgV0M7<t#7n<=VSEg7OJZQnK^ARWH\O:]^Y+]Q_5+Its[C$4+Ma)<lKP4^1AESb+BgPDX;WfmnJlr?EZ%FL3uc._3s'KmN=EDt0[,g"n/t\]64=Krb(GpqMF&d22A*Xt.Y09_DT)\_l^uT)W'OCEFn5,5jmZ:%MgY=b]JAFkO^&$CNMJ6RXe#%X8K`ZjVR\`gZ>H(\r>IO%UH5mEQ"c)XY3Xqf=I$*r=%!*VO9#!+27/U0UbB*L[*%Yq1#:0p#MdWj!C>4ejMMOrQP:hFUiu-dha]8%+miN!PbmQB:&&<Z`cl43Ib=KkJ&OR:@PRT7](]=Hl*ZL$9-![aSl=3/=.s?W25%8K>C3d;L=('X>%UNUGHIaEV2k4)OsQCZ>e%YZ%i+WWTYnC%XLW<t^A5&&fpQ:OXd<t"YNPG+"GZ-.QMn(?'G:=,(8>ekb7*5]o?i(OI"A)NOR"_QV(I7JaPb?^F]uXRAoaqPs'Ad=4%LWpM7*_Dbj_6LLa^#OL"qriIK53/Sq"patbl=p\L;\aT4lOGb:E.g%G?TJ,NBY-Q.,>Pf:^I:Xna4UN9"/8']Di-E-iCG\LJ;U`!%N>'u'J9-_hi(5tF?r&$iLD!Z$B/-GQ[Kpm`#=p1<&,.@R]ECng$lc^qW2dt)W!OA=&kt)LV#1&S&V\]A1e#:.d3&_-BH3a_a4gt2%r)_!K:r0klLTC=:jA*INGV3OWemHI_$bG)'>7Zjd:*OiL>Io&q7LgJB8KAP`^5&.KNL(:__FepKk8J?m.5-LN'_k+<RX.P<*p(bq%RRf4g&c#P@/C<o=2u@T6W2Ojn[Yt#kTmG8^Sr\a$THU7$S/a?A#bi$2.ZCm)XF]i!g5-m'?t]iMXpjR7Q)1g<nnK*foo+VLHQ+/q%nDT[9,jKfa`5K^@$<9eZ$XED\YQm1+L:N+;&*u`i-95dpYK7)0Cf(k)iMr(!$r<2M\sfPCVs[82Eme+9YAn(qO(MCb.D6*S3]G"D%E&P&LrY1e\9Fokp_Z6LBpY^4*\-eui*Ah90N4'o1.J234Q0AKWR$;:C"qs["P;&cRl*+kikaI$b27MOP;kTChe-C&2kT0jl05eg-%17V[dU#png0$X8gU`bhm:2[A7]hVg=d[g'S\g7YRN07]*S/l%I&?CO4#/3K9PL3=oO<e)6-qP#e7C]4GO;-dl@N6XF.St21"4)q_%Iaj3cC`;[VI!aWAg$r>T4]ocI&ArFRJTgVTNh3&$cg/gQ"uA]<LdW"45Vq0Cj?t-s/L<<&S80QV^k%[!9$m%u&s=?&CJQlm/R7_E%?LW!",d5PsXI5$;*mLA=bSpJX#X^=:8QD)F7XA=]Ou(-CIMM\X-6F)"Cmb?.g$gXSnsIW8^^WUk%o<ELgs7C@<KKXJ^f:VNVe("M%iJV)j>7N$oNp!C8pr!Y;\m9>+%`2mAP4L*D/r3Rs=*Yh!d)[4l&5G>*nu*ctZ>o_>ptQkEeE!]t.mRgHSVS2CH&VSL\g4^ra&M:q%[T7/Nn0hlI"rAO4.hC'R0#77Q0[+"&BVc7t8*9l1,,ZD$B;0FX\E-`93W782`2KZ9Bm2b^TW/qp00X!DV9!$h:"RT)$qqI)'F]"X%.CjuZ@f1"NE345o_,<f/:8!E:M1Z]N=R%P]oeqFpEjL"Yc4V.O(E_m(;2M.W`E^gH;XecP-mU+4A.r\Z0ZlO)IoGjnd[@`$*K3]*%D7.GiRR6Y5Y2]Kaa'65W8ONtHcS=W#<l;Fl;Gq6><B]c1iM*?I<FuV<#bdJ^-8,Ou)Y^^%T"5mm[Kg+:lL)]V_+!U5GB2\6+#iP*%#:P:&<s:9O??[P6jlfqXq6J)L%p4rX2W,WT$>&5OiCC7M\"Pr[C/2QCoErOc9\2@Wd:HL+kYnE0TTof"!8"#g3?:'g%BdLP*9SeH%SF06ph?[dVd-9tKZcI7^$_5*"$lk]N)!tr<>:DZ_ZI82YomAk??D[S.S=q?Y1*1Fm]YAtX^>[j#6u.S\pIHc&I*p%LIY>T%aK/Kb%:JbuQ8I9r,M>\TeFUDRu:qG\>f_>O^DU$"C:j:/#K*,+"osi&POKo:@S7c=hZ0-#Gb)G'7)BsaTi.Vl3ar24F-`ke&!+Kf.>2UBu%ar'Z'pYp>*Y.n1/Tk#J#akaDDh,0'<D@=r6lQ<K$af!1>e)f+S$Kr#%*.!&+('YT/W6IG=>Ra+j3Lb%s:Y5LZ?<&0M0:"0n/ZU@]%RgcO]+Ggh<@HO[1$U,"s<JuYl@DSl:WB_odF;Wl+1?nr0\Q'@L+n;MnIq:AcAl,1F(gKIh`0WQo@,dt:mXd\SEjH5Y9i60j+;Bhb%i,jgZW^X(2TVP4\SFHm;^qihspo?2D685XrP"H-j5a0qnKiCp$h6e6si%U6`PnlaQgC\p:,#F8rc)P0^:nrAQ-p*075_]HIj-?]`%+(kqfCg$<s?7_J61g2NM?6EWt^?1C__=f+7nmf]@,f55[=6D9?"7P4nj`)S/2b-b;g_skP3`hu\/ig*1!d&JGkf+GN:=]`U8S<\l%p'[N@1L7.KI$=3BBhNS:@t%:`/[*<]GSI+;,S_\:``Or!<ZLt0''XW@P3mW-djLJmalMbbc3^[f7hLKkp=9i4M\GNZ:*e*p,"/`0%*?,t:GnPcm7JGBc\%2R8WcU=;+0G\c04@!r>.D>E#;gIf^5_R"9ocYm2':/G@Af5s$0sJaADh"FdVrJEpgpSZeA[$rc(M^.#aM7q%K>OP>R0(7VAu]4opW,&e#dE`o[2ui"$#>4BH;HjZ.8kKmVJ-c+%j3+PZI0BnYg%a,*e:oIL!gV]NB=;-Sq%2S5\N<2/"mB5dM'EZ%Qkh,5^e/@Fd!#JefU,:i_'B<`Q<&9-TGK/?,!,fMToF.85b/`!V=gKHgF^m%!a5ruKJ]=*G1cYf<M*)1`Egm&%q&f`Qc]hHp*_lR%%gnE.+ES]5M<ptjZ]`s^>#/F\Ll#0&2?f&r;_OGN4>dN\Cf&J.9eEG_RhRQKkW$c@HJI^B/LR:=i&."VXD5XU1cE-Dodbf)X$1[@%O@C!A=h9,)%_)elR>SsV2WF$(--iCl5mn,-0HDo_%1"<a_L5'*5sV7U88(9i:1esU#)*+A[nZ'PJB?>1.mc6uBL9.X:kcom1SM''%'Mor\86%'s$nh\1K.s6V:fi;o'ZQYk.?l:bS257:>mPC489mEK6U6A$?RnKp?7I^1$$?M%h<rba$=`@m2QO,M[$ok3#%%lK_+(h!%UiE7$KQ`HTNQ!oFJqClG#c"=pM#^J9A>p5riT4QPW>#@cl(Y3+M?5mGNCkTf_!/:q:l>CP9Y$r7=]hXl\H;"ip6(YT;.t$.]cjeX%!'28hOAZbsX37M2@??hV7"ALH2MFm?VH4Tp"T92&ct^s#l?dMS&H[In]Q:%S@)O$<pioe!gC@P=.-/Z'f%/2"<l.#CD`cZQFm/&7%YrPuWUi;3kCiS9Sj_B^fa+IgnD?rbeZ%nVo:b;B@>;dJ+-k$$_meH'e2j'1P&O4_=>3-+<dD-Sn2%c0oILMokCE=aES.+U:&)/hi%0RM30_^<0b[p&$))kqIIh[=H<%FI4:boEdfW;.dtNc@o*;+eqr:,ob<nB7P;_EBfqLLpL*m9U_uDDKV>f:>I-@6X,S<d1_2m6^[3%LlTBs5-U60(q#Ys.a&tW"3Ao]@l7J^Ur[UF:34&2V*Bh_O`iI@*s7^-]9!MqMC^>1V'T&*3%E&]$Pu=^AE=u6].<e0br?$m9KU><%V:NkQn.!ps/,W!kECdQ<93^c4Wp*DB`#>r4%^fnOkkF2%P$cf+;7Ba_B@Uk<$e0uH7\[P0/K7S$VHB4SCruYbTd\Kka@u227A)1,%p0eBO>`3+q)>:3@#lhjD\&,aH#6?KS:Sr*%$jD<^ZuE\eiR*k<e.-hB!c*K//phpLMFmUIGGM9Q#b!j]OMc;YE:dUX)<mk&]Fr^2%=&"La?V0Es(:=Tu=$F#8,.m?h;X_5On8FEG`m*LJF+m;*HgB:+,Mg1MTUZf]*'(:g@7I=]iU!,ta"9\TeBB+%W*EG^1)qfRQEkH1%>7eQB8qe2GDX`m+8q0nlX/=_$IF@cAa`.8p\:in>*GhXKiiB$k5,3:mak\ccL[q1F,Xq^7Q5kTgX<hN@=DO7UH(Pn9qQa@YVVPtn%MpCV,Y6IU>%Pu7rl)7b5/Bd::%[,pf!`9A)OdBY"M)&/<lAUX<=nE[Aa!b%.2gRs7>$m/f@]D](>Y+uf@V?C265X6jRpd:P&YGI#%<Pkpt"9pO4l^.QbJ_")2E3'LGU"PVkSb3$sZU.0W"qqK,"smp9n3QaJ-Z@]n$?bWgEi0r<:p^&(Qu9]ee1MbVJPlV'j\Zs`BCksR%)BpXag"0':"m<u_NjBm*I?Qk.*42a1.Z-rG,e/<b=t;o'4rXd=AB&"siJT)Q5j^+M$d1_1hA;E3D-.7D38u5cMD3t9-n]paF0MB)%>CaA&!Rk2?FL*j3U,ael*!isu0qf=%_b<ir(iZlKYb1<?R='R/Vr14f2ICSHD[P^gG(^=`9jE7G;Xm0V^haj&`VDm?dGkppiJ:@L%:`GflP>'s)$gQ@oeag7(@!V@Iis>O;TmGZ$J@->W.D;=KmaS*"Hku*0Z0tf&/jSsi_Nucm-S-9H,/"U0\ho$r!Pm<_QYPnEbecZR%&G[R/7O#P,8d[U_<r/aa\NA_tG![p&_;VsmrH5DfK@.Kt1th%mJ@b$r`#Di)f7BJ;7E[kqi/haV'4hRIf"gjr@*3EhZ5;,@Tt5@1%Cu)E?Ek(Qu-,<q+coCdZKNT<j5`J=+QoS9rSM&9/g6V6]6D1aMOh0+6P<.:>WRNWI"'NPr<bu+-BeTl+X@^6TX/9fF?^i@C&3fZl%[HuDa/M`@KYltN==2iC\i>t:l8$'Xj6RD-b89RM?auV@;BRa#t[@u=?LMY9I,pS*a_e2eN0gHrRK!u]C-Hk#L5V4Wla=lmuNJo>I%8JrKL*Gs4^;Q'"]q]P>+A71gn?.Qa$s5\O[F-85)KH8H4**9!CA-*6(E"r*)_\K'p$dPNS4TS:^/Z^9H3WR/?'3/%o6HIq^QQh2%%?qpq/3!tP13fYNoOJ=tVA"&&?!Dd2-PbQS21pI=r'_5ftTI_-a+\6uQkuL.qRasV]5hto1bjM-X#Xo%FBg5TK2SS0K6de+.+CrCk%59YYKB]D4X"ae.A^*QQK"B[$?+H4MA$R!&+!0!=dX,s]q&mpS1-$I&>nY/I@aE_'E]s2*7XcaDAe6Hs'`'?`4TkX"*1RVkW"]Fd'%<TK]j*i^+gGW2amR=:2+*"m4ePI:gQ!H*k9HVXJW)O&f"]UoP.N`DaT(hUNW;:2;HC3HL/3%eVMEIepaj@T`7cEl,sWo@#gXdFB>%#eQ4j(CdDGW%/KT/R"&XV%TpM[e0bWaY5SM^83_&MtqJ<"/If/jZIZ!E=XMA=]j$l'cn=8;A;TAk(^[mdsbQK1OT6;/&ZM@RB7Bd%>q!^='cbI<^c5UY8<QA8F@EXIk/4,oGL(L1_Zi$N9R16erh#5G0WI\I$aKeipN=C,3s-Hk"\]]reA/#624RYMs)JLmSINWJjLG=K%"j=&a@2,"!#P)'0_"LgXm^s(^E+A&OWu*8OqQ\#_L/QJ'&f:GL6>P$%,oGG5Gj@Wqh2/4JET\T@?UI,70qdO$2$Ji8A[pJ[*&J<2%HUEaFQ(38RGN)Upk6d<7:kE4&8S52aZ=R-CpsFc`FtAb`F/6D3I!aTA8R"Z8;D?ONr7E]*2=\e6=2c<26@^+2D/E^33EuU37'N'-%,]5,a;</k(]f!a:Dn!\(T$1`q&NYLEPo^KARE,_DE86_:4"=b00r38rJE\U)SdmWad\<Y\b^1Lb%W+BNXXVg*EO>ia3b+h\,*hUG%OE?<S5urFC=d]m32-;_X3>O:p&BM\o7VXUo;r]W"A1>Yo!g!I`Km4f;.$ZP?I^$Rc1p=,<Lq#s>#\'$kB5324-@([ViB-EkHX#HF%L3N'RSHYohrZl"Qo7P[,E4p"XPqcGb"[HE&;q3BH1e(hKY8;UlKZCOhOolAXOUcYdPoss>Q+Uad![)HqNaq.FMZ(>dJ3SefinKrR%5K&G`4@lqjjrbhE2@YI5<sAEKNIjtK003m+^]K?)O$^DtQD&VFU2>LE1)\5[jM;fq*Z\a;X/>7[Ari6?/="UM5h`:?5!pg88lQ]e%Jd+l[b=YSJ4dNJ*jRDOs];h0[@4JA"'+#WD4=U.NV_"IWBfQ?"?b>E/9NeerVQ8A)2nkp0LpR_Rf/[B*`HBr6f$'!<bC6^tk!=Zu%b1/'98(Hrlg`Nd!?8:SgI\>th)-I=,`u2PNj!LG`&nTGbafuj)GhM`%:R!:Q@t:DQ`lBj]mHFa,BIj<m_1BiR\`AgaVBqRVfHR*m%R^gp^pQSUK]XiaCPW[q-:Pq7,BN0,m*a"a42K688\F@d\Q5;V")\36Qg.h5a%ciJ7X%u&gUOb>JD9*GnGI:SPESs]/6nea$`d=Ck%EqV1cUifNh]hjjpWedEQnD"AVOpU))8SV4>QT7/K&b/AbHVId%XbG)9RQ0!HRbUC*!3oF9LR/[.N2%m=5XQ,-e>+;OGMErC6'UB)%ol/+$',8V(k>YA(pkLioWhm^-WCRHnbBLq:d2uAHc8Jk.=k./qgsoeHAg(*Y=C*688b"5a_32c/\kpUJ&<pb<M$d=hjQI>8nOb.d%%-+cUq6pKJFNY,s"\'Z<K@qoG:]Q^Vl.B^]fNN=0q1+X?69&F!Z(^+Z^(Y-j_\XXDfl+`)(onr:f.d=!I!?:*1st5C10B_)4A:W'%349Sp!a?p$eMB6eh6K2i]M08Cm&)#uPY9^]Z7;7pf>Qq@BSAF'*Ih+L[Rg@6VQ*r.1RstI7"=84V.cY?l-C&l5n,FO3hTou1n`pd%$C8/Wb\'SRNcgg!G+Tj,(HjD!!P0/L,,LI0"'mJ1]3ETZ6,"mnJdZ1CJi3u,4.=q>R&XOK8^Yim8IC*-'h&r[.i6CF]NkdD8:4OC%6euXfLfK3f#EY],fnUJYc$I;JBs&a/=*$Jk)2_]l]$d*L&`kK3STBXhKR^.%R1u`FLN).A9j\ZCVXoIs#"aVE#@J\T"!n$jD+V'e%YSTVA:irKUA+C*/6!V_Eb!4^BXc!@fAN7NE.7J%\T$Jl,R0"&NR2iptP$C2j.L@Z(0FXWel(7'_3_Kr[6h9pg/Pf&aK/-'j"HO]Q%kZo/C;Ci'Yhn_l?\R+`YVTQ<>oXka.@[WZ$JeTJc-.G-Eoi8Wf8c6gses3A1aV4i1.Y&j3*fm%5"F#_e\RS8_2V$jq[,T/+'F5u/%k68@Jc/[+T64cFqH6;<FD&DO&08<PM\t&6/>"B6.#*6gn1,)7ll8jfVMBXnClke(k0gnnP/kL*Y"&!T"HY!/rA[@[W\g'^K$Eg*s%<!q)T-mXNZa-IKRX0R7q8%iM5PVB]OmJ<-m.FRRCbJT#fou5`(:tZ5Q3so%HQm(uVBmg6AYfU2ghgpZ+&@/qf//"]XKZuZ-9pn)a%kT7=OoIk%K(`tX@$&^l18,7%UaW2Ka2t%TQ4$G4@!n]nC,Ojb,^F4a<i>k;=e]Z\*#_I0YFh"As)3q(,#3p>>Gdiqgj*IB[dd`'1%E5r2lZ9TOTp**,;pG-8lC';O?e5uqikYiDW_gkCr/%&9-K'j%8\!Z[,dL#d_RG\O.YRNd<PSRi9^P<D9MQHb>N,DFmN6UglAo=aL%I7Y?udIl9NVnqt@LK&>d<sGFHK.nD4q9hrD]5)li8-)gM;gn',m[$EK:Ub6^4Loles2iC1mFutX-Po9chi>gpqQ?ue'tH7=_,4b-%#![%6h`SNe(8%qP]moV:l'-:k>rZ&+s6/Ok`T&BtfaRfE.-)njIJ\qTZ\.<0&WJI"gtr"ljN6BF_kT4ZSU0Vi_9'Tm7q\G7*$=8m%SgrN`\l#Y(FuLc&.n`)9c'1E^qD6R%SVAUMY$r<2o@36eIL-g>fsD\n_^dVOa>6Y;DS4pRFFM'9!PPW30HZ3m7_ISgSmPuRK(pGR%><>bdgAZS@a]rl*aBXc`@]*aW5[JrGC9DLRZ<B=m1JQG#MsJ+WM<jG)bNbS!61.huE*:tUWp=Rg\88Kne6h^b;nm(Jk`Ql\?,_f$%Y-'u&)mH[#)ipNm(Das%hpfu)DiL*g?In90at8NEXpRZ\9'r4fFSL"OHLJB9h@\94\5c5/Eij&S?>gQ[hCAB/<V4n8M<=J3EJ:Lr%St3MoFGo>!S_S8:o>:6Z$mGQ3lkE/c4%3(3O1En2H%3M+XOAq4FY9_p.@R]_*Q*.=JNd_=?[]XT4OJ>Tn7Cu=YFI@t\\4gL2f,Ot%/GcYf3]Ct6RHN1l/4UFm_"(h#5^KHGhTFF<(gYb'VCU,-KZV@[f9reuYH>@XQa]>qEi\M(M[Nt%Wi#&cctUt,rQ52nSZfJt)E1f*%YP5<0ehX$)W2d.<lDCP]Eo+hJC+qe'Xt>aq^q=GlNN[K#X.A:,=eS2'oDG&@eT$;HpTZ5^;U2AEGi"XP`9Zq^pekC,D8!C#j`R]L%,+94Lk<<BuEQJCXH7.1je`Slolni$aWiFYif<mQ?DTTn0T3lZFlIR!,oenE^M_Ebn\ib#(kn:VhCD5YA[]QQ3[V]T;CX6)ZHJ<bk%$J<K@R]]kZ20iaW6WT*(G.`N^>NCX#>Y+*3a8Qk&n'Tr$q6l&Y)J"I^Ub,6E\</Ho<aEnADp?'p"i@/V%LloeeaeT-i9d<"WEnZB%So[G)(s+J/n_t</ZVQINDgT*:XHd/%)goVh!Rsf%`bPpJ)qmUrN(aIaQ<`.W[TM$.C*^A]Z/n+g1.W^8Gk3s_7*dN!lK2;AWmr$<%"1WAFY*2J$-oc:<)=2fCa[s_qkkc'Qcnq`j6s=7+,D^?PLs3fu?fY>NH5q:As"9iDfj7,C6Qn(\l$!BNRZ*9>#"8g3'M=-b4B*c)%K^%^C!EQ!\\4*$dq#M)@juZIe)MWRCSC+!.ktMW<S-.@7.:)a,K7V7$j\cR6S#^2<M-H&'h0)(uG;D*tN&T/D<eQ2`IEdi?o!RKo%bJL;"^8XQKf,a9lD\n>?X8K.:eoFR?%A()TUI4!4KMHUC\/"Em36_sVA%YdJr3+l=8Vk1\jVGSoLT>.3*p^cSpgVq:qO[`%G49q6%`_H'!C[(t`MXY3W`:GGXcp.+qUMA/3au)O`%]u@ZV@I1!B[[@HIKWs2[rlrTQ_`MdL;jlqlem^cL&nKt0]35c;l"ofp.j;kMf))c%Jt%(qBJ[_Y6j?&k&P/eYN=+?W4NIn<`V/_t-PtMr^A?S3pOe.hork]d0q-fjh%eqkB7"6PfX%Spei.o]6M;@"m+M@C>Aq1SWOr2X%ai"(0?]WKUG.-7Pj,8O[7phl/4Rkbjet_hhIiWAJS=Dj?3dTqNm71eZk81%/8)*3f:Og1os2nUENAj&tr8XpZ"%6->!<~>%AI9_PrivateDataEnd