%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: AmalgamPanelDarkAllRed.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Dale Johnson
%%CreationDate: 06/12/2018
%%BoundingBox: 0 0 150 380
%%HiResBoundingBox: 0 0 150 380
%%CropBox: 0 0 150 380
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.1 x540 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 52 128 8%%BeginData: 12798 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0F27F8FD0927F8FD1727F87DFFF8272727F8272727F8272727F8%275227F827F827F827F827F8522727F827F827F827F827F8272727F82727%27F8272727F82752FFFD0E27FF7D272752525227525227A827527D275252%27FD0452F8FD0B27F87DFFF827F827F827F827F827F827F8527DA827A87D%FFA85227A87D7D52A8A85252A852FD04A852F827F827F827F827F827F8F8%52FFFD0D277DFFA87D7D527D527D7DA8A87DA8527D7DA8A8A8527D527D52%FD0B27F87DFF2727F8272727F8272727F82727A8277D7D7D277D277D7DFF%7D7D7DA8A87D7DA87DFD0552F8272727F8272727F827272752FF272727F8%272727F8272727F8272727F8FD0927F852A8A8FD0A27F8272727F8272727%F827F87DFFFD1B2752FD162752FF7D527D527D527D527D5252527D527D52%7D527D527D527D527D527D527D5252527D527D527D5252527D527D527D52%7D527D52A8FFF827F827F827F827F8272727F827F827F827F827F827F827%F827F827F8272727F827F827F827F827F827F827F827F827F8F852FFFD09%2752847D7DFD05277D7D7E5252FD0527527DA87D52F8272727527D7D7DFD%0827F87DFFF827F827F827F827527D2727597DF827F8527D52277D5227F8%27F8527D52F8597D27F827277D2727527D2727F827F827F8F852FFFD0827%7D27F8F8277D5227277D52F8F8F884522727277D52F8F8F87D5227277D52%F8F8F87D52FD0627F87DFF2727F8272727F8277D2EF8F8F87D2727277D27%F8F8F87D52F827F87D52F8F8F87D52F8275252F8F8F87D2727F827F82727%2752FFFD08277D7D52277D7D27F827528427277D7DFD042752A85227527D%2727F8527D52277D7D52F8FD0527F87DFFF827F827F827F82727597D7D52%27F827F827527D7D7D2727F827F827527D7D7D2727F827F8527D7D5952F8%27F827F827F82752FFFD0F27F8FD042752FD092752FD1227F87DFFF82727%27F8272727F8275227F8277D7D7D27F87D5227F827F8272727F8522727F8%7D527D2727527DFD0427F8272727F82752FFFD0A277D2727F827FF7DF827%A8A8FD08277D52272727FF7D27F8A8A852F8FD0727F87DFFF827F827F827%F827F8277D7DF82727FF52F8277D7D27F827F827F827F87D5227F8F87D7D%F827527D2727F827F827F827F8F852FFFD0A27525227F87D52A8FD0D2752%2727F87D52FD0D27F87DFF2727F8272727F8272727F827F8FD0527F827F8%27F8272727F8272727F8272727F8272727F827F827F8272727F827272752%FFFD0F27F8FD1327F8FD0D27F87DFFF827F827F827F827F827F827F827F8%7D27F8F827F827F827F827F827F827F827F8F85252F827F827F827F827F8%27F827F82752FFFD0D27F827A852F8FD0527F8FD0727F8F8F8A852F8F8FD%0B27F87DFFF8272727F8272727F8272727F8277DFFA827F827F8275252F8%2727F8F82727F8F87DFFFF27F8F827F8272727F8272727F82752FFFD0B27%F8F852FFFFFFA827F827527D527D527D7D52F827F852FD04FFF8F8FD0A27%F87DFFF827F827F827F827F827F8F8F87DFD04FFF8F8F8527DA8A8FF7DA8%7D27F8F852FD04FF27F827F827F827F827F827F8F852FFFD0927F82727F8%27FFFFFF7DF8F827277D5252527D52522727F827FFFFFFA8F8FD0B27F87D%FF2727F8F85252F827F852527DF8F827A852F8F8272727F827F827F827F8%27F827F8277D7DF8F8277D5227F827F8A8F827272752FF2727F8F8A8A8F8%F87D5252F827FD05F8FD0F27FD05F82727527D27F852FF52F827F87DFFF8%27F8A8FFFF7DF8F827F827F827F8F8F827F827F827F827F827F827F827F8%27F827F8F8F827F827F827F852FFFFFF27F82752FF27F8F8A8FFFFFFF8FD%2227F87DFFFFFF52F8F87DFFF827F87DFFFF52F8F8272727002727270527%27270027272700270527002727270027052700270527F827F827A8FFA827%F82752FF272727F82727F8F8272727F8272027F827F8272727F8272727F8%272727F8272127204B272720FD0527F8272727F827F87DFFF827F827F8F8%F827F827F844686820682020F88C8C20448C6844686820442020208C6868%448C6844F827F827F8F8F827F8F852FFFD04275252FD05276869204B6844%2027686920934493686F4421684B206F68456893449344FD052752272727%F87DFF2727F8272752F8272627F88D686844682020F8684420688D44688C%682068202044442069688C68270527F8272752F827272752FF272727F852%FD062768442069684420206869208D20206868204B8C44206F6868686F44%44F8272727F8275227F827F87DFFF827F852527D2727F827F8FD04206868%20206844202020F8202020F8686844206868202020F8F8F827F827527D52%27F82752FF2727527D7D52A8522727270527272705272727052727270527%2727052705270527052705FD07277D7D527E5927F87DFFF8277D52F8F827%7DFD0427F8272727F8272727F8FD04277DF827F8272727F8272727F82727%27F827527DF8F8F87D272752FF27277E27F8F8277D52F8FD0E275252FD10%277D52F8F8F85252F87DFFF8275259F8F8527D2727F827F827F827F827F8%27F827F8272752F827F827F827F827F827F827F827F8272E7DF8F8277D27%F852FF2727527D7D7DA852FD0F27F852A827F8FD0E27527DA87DA85227F8%7DFF2727F85252522727F827F8F82752F8272727F8272727F8F852FFF8F8%F827F8272727F827F87DF8272727F8272E522727F82752FF272727F8FD07%27F87D7DF8F8FD0527F8F8F8A8FF52F8F8F8FD0527F852A827F8272727F8%272727F827F87DFFF827F827F827F827F827F852FFFF7DF8F827F827F8F8%F8FD04FF7DF8F8F827F827F827FFFFA827F827F827F827F827F82752FFFD%0927F8F8A8FFFFFFF82752522727F8A8FD05FF52F827525252F87DFFFFFF%52F8FD0827F87DFFF8272727F8272727F827F87DFFFFA8F8F8525252F827%A8FD05FF52F8F8522752F852FFFFFF27F8272727F8272727F82752FFFD0A%27F8F8525227F827F827F8F8F8A8FD05FF27F8FD0527F8525227F8FD0927%F87DFFF827F827F827F827F8272727F8F8F827F827F827F8F827FD04FF7D%F8F8F827F827F827F8F8F8522727F827F827F827F8F852FFFD0A277DFD0A%27F8F8277D7D52F8F8F8FD0927527DF8FD0727F87DFF2727F827F827F827%F87DFD0427F8272727F82727FD08F827F8272727F8272727F8275252F827%F827F827272752FFFD0627FD0452FD0D27F827F8F8F8FD0B27F8FD0552FD%0427F87DFFF827F82727FD047D52F827F827F827F827F82727522752F827%F852F827F827F827F827F827F827F8FD047D592727F82752FFFD04277D52%F8F8537DFD0927F852A8A87D7D527D7D7D52FD0A27527D27F8277D522727%F87DFFF827F8277D27F8F8F87D2727F8272727F8FD0427FFA8A87DFD04A8%7DF827F8272727F827F8275252F8F8F87D5227F82752FFFD04277D52F8F8%527D52FD0927522752527D527D5252FD0B27527D27F8277D522727F87DFF%F827F827277D527D7D52F827F827F827F805F827F805F805F805F827F805%F827F805F8272727F827277D7D597D7D2727F8F852FFFD06277D7D52FD06%27206F444B2027204B686F204B204B446F204B684BF8FD06277D7D52FD04%27F87DFF2727F827F827F827F827F8272727F8446844208D44FD04688CFD%04684420686820272727F8272727F827F827F827272752FFFD0F27446920%458C69686968936868686F442020936844F8FD0D27F87DFFF827F827F827%F827F827F827F827F86868444468446968446869448C68682020684420F8%F827F827F827F827F827F827F82752FFFD0F2720936827204B2045204B20%20204B6869206F684BF8FD0D27F87DFFF8272727F8272727F8272727F827%2727F827F827F827F827F827F827F827F827F827F8FD0527F8272727F827%2727F82752FFFD18275252FD1727F87DFFF827F827F827F827F827F82705%20F827F827F827F827F820052EF827F827F827F827F827F8050527F827F8%27F827F827F8F852FFFD0927F8F8052EF8FD0727F827F82E0C20F8FD0827%F8F835F8F8FD0827F87DFF2727F8272727F827F8F80536130CF827F827F8%27FD04F80C13FD05F8272727F8F8F8131335F8F8F8272727F827272752FF%FD0927F835133C1305F8522727F827F8050C3C13350520F827F8272727F8%2E1A36130CF8FD0727F87DFFF827F827F827F827F8F80C3C1335F827FD04%52F8F8063C13351313F8F8F8FD0452F8053C1335F8F8F827F827F827F827%52FFFD0927F8F80C3505F8F82727522727F835133C133C132EF827275227%27F8F8053505F8F8FD0727F87DFFF8272727F8272727F82720FD04F827F8%27F827F8F80C361335133505F8F827F8272727FD04F8FD0427F8272727F8%2752FFFD09277D52F8FD0827F8F805133C133C0CF8F8FD0727F827207D52%FD0727F87DFFF827F827F827F8275252F827F827F827F827F827F8F8F805%0C1305FD04F827F827F827F827F827277D2727F827F827F8F852FFFD0627%52277DFD0C27F827F820F820F8F8F8FD0C277D2752FD0427F87DFF2727F8%27597D7D7D2727F8272727F8272727F8272727FD07F827F8272727F82727%27F827F827527D7D7D5227F82752FF272727527D0027527DFD0E27F827F8%27F8FD0D27527D2727277E2727F87DFFF827277DF8F8F8275952F827F827%F827F8277D7DFD0B277DF827F827F827F827F87D52F8F8F85252F82752FF%2727277D52F8F82784FD0927A87DA8A87D7DFF7DA87DA8277DA852FD0827%527DF8F8F87D5227F87DFFF827F8527D52527D5227F827F8272727F8277D%2752A87D527DA8525252277D7D52272727F8272727F8527D7D277D7D27F8%2752FFFD0427527D7D5227F8FD1527F8FD0A27527D7D53522727F87DFFF8%27F827F8272727F827F827F827F8270527F8270527F827F827F8270027F8%270027F827F827F827F827F8272727F827F8F852FFFD0F27F84B2027F827%F827444BF84B4427204B2027F827F8FD0D27F87DFF2727F8272727F82727%27F8272727F820688C20682044688CFD0468208D6844442044272727F827%2727F8272727F827272752FFFD0F27F86944446869688D446F6869204BFC%682093688D20FD0D27F87DFFF827F827F827F827F827F827F827F8204444%208C4469688C4469684420448CFD046820F827F827F827F827F827F827F8%2752FFFD0F27F869444B44454469444B688D442744B5446F2069F8FD0D27%F87DFFF8272727F8272727F8272727F8272127F827F827F827F827F82720%27F8272027F827F8FD0527F8272727F8272727F82752FFFD18275252FD17%27F87DFFF827F827F827F827F827F8270527F827F827F827F827F8272753%F827F827F827F827F827F8270527F827F827F827F827F8F852FFFD0927F8%F8062FF8FD0927F82F3026F8FD0827F8F830F826FD0827F87DFF2727F827%2727F827F8F800303006F8272727F827FD04F80630F8F8F827F8272727F8%F8F82F302FF8F8F8272727F827272752FFFD0927F83037373100F827F827%2727F8F806373730F820F827F827F827F82F37373728F8FD0727F87DFFF8%27F827F827F827F8F807373137F82752525227F8F8063730373130F8F8F8%52527D52F80637313700F8F827F827F827F82752FFFD0927F827303706F8%275227525227F830373731373128F82752522727F8002F3706F8F8FD0727%F87DFFF827F8272727F8275252FD05F827F827F827F8F830373037303700%F8F827F827F827FD05F87D2727F8272727F82752FF27F827527D7D7D527D%2727F827F8FD0627F8F82F3737305B3000F8FD0727F8272027277D527D7D%7D2827F87DFFF827527D2727537DF827F827F827F827F827F827F8F8F82F%30370D05F8F8F827F827F827F827F827F827277D5227527D27F852FF2727%7E27F8F8287D52FD0C27F826F8270027F8F8F8FD0C277D53F8F8F87D53F8%7DFFF8277D27F8F8277D2727F8272727F8272727F8272727FD07F827F827%F827F8272727F827F827527DF8F8F87D52F852FF27277D7D27277D522727%27F8FD0B27F827F827F8FD0E27527D5227527D52F87DFFF827277D7D8452%27F827F827F827F827F8277D7DFD0827F8277DA85227F827F8272727F827%F8527DA87D52F82752FFFD042752FD0527527DA852FD0427A87DA8A87D7D%FF7DA87DA8277D7D7DF82727527D845952272727522727F827F87DFFF827%F827F8272727F8527D52277D5227F8277D2752A87D527DA852527D277DA8%5227F8527D5227595927F827F827F827272752FF2752FD047DA852277D52%F8F82784FD0E27F8FD0527527DF8F8F87D522752FD047DA8277DFFF87DA8%A8A8FF527DF87D27F8F8277D52F827F8272727F827F827F827F827F827F8%27F87D52F8F8F85352F8A87DA8A8A87D5252FF27527D52527D7D2727527D%2727597D2727275253847D52FD05277D7D7E522727275284272752842752%527D52527D7D277DFF2727F8272727F827F82752A87D7D2727F827527D27%527D52F827277D5927277D5227F827527D7D7D5227F827F8522727F8F852%FF2727275252FD072752FD0427527DF8F8F852532727527D27F8F82E7D27%27F8272752FD0427F8277DA82727F87DFFF827F87D5227F827F827F827F8%27F827F85259F8F8F8277DF827277DF8F8F8525227F827F827F827F827F8%2727A87D27F82752FF272727527DFD0527527D7D52FD04277E5227278452%2727287D7DF8277D7D272727527D7D5252FD0527522727F87DFFF827F827%F8272727F8527D52277D5227F827277D7DA85227F827F8527DA87D7D2727%F8287D53277D5927F827F827F827272752FF2752FD047DA827277D52F8F8%2784FD05275227272752FD052752FD0427527DF8F8F87D522752FD047DA8%277DFFF852A87D52A8A852F87D27F8F8277D52F827F8272727F82752A87D%2727522727F827F87D52F8F8F85252F87DA87D7DA87D2752FF27527D527D%52522727527D2727527DFD0427527DF82727277D52F852A8A8FD04275284%27275284272752527D7D5252277DFF2727F827F827F827F82752A87D7D27%27F827F8527D27F8277D7DF82727A87D27F827F827527E7D7E5227F827F8%27F827F8F852FF272727F8272727F827F82727522727F8FD04277D522727%FF7D52F8272752FD0427F8272752FD0427F8272727F827F87DFF27522752%275227522752272727522752275227522727275227525252275227522752%2752275227272752275227522752272752FFFD32527DFFF827F827F827F8%27F827F827F827F827F85227F85227F82752525227F827F827F827F827F8%27F827F827F827F827F827F8F852FFFD112752A827A8275227A852A82752%27522752FD1027F87DFFF827F827F827F827F827F827F827F827F8277D7D%5227A8A87D52527DA8A87D527D27F827F827F827F827F827F827F827F8F8%52FFFD1127F87DFF527DA8A8A852A8A8A87D7DFF7DF8FD0F27F87DFF2727%F8272727F8272727F8272727F8FD0427A8F87DA8A8FD047DA87D27FF2727%F8272727F8272727F8272727F827272752FFFD1B27F827277D7DFD1127F8%7DFFF827F827F827F827F827F827F827F827F827F827F827F827F827F827%F8272727F827F827F827F827F827F827F827F827F82752FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2018-12-04T00:35:45Z</xmp:CreateDate>
         <xmp:MetadataDate>2018-12-04T00:35:45Z</xmp:MetadataDate>
         <xmp:ModifyDate>2018-12-04T00:35:45Z</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>104</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4VirsVdirO/y9/Li380a&#xA;LrF7cXElvcxA22gxJxAutQEEt16DcgdvSgI6jdl+WKqPl38ofOXmHR7XVdNS0aC9E31OKW6hhml+&#xA;rNxl4JIyk8OpPQDFVGT8rfMsWvR6LLNp8c09vHd2tzJfWyW08MzGONoZWcCTlIOIC1NfbFUzk/KP&#xA;U5bTRbe3/wBH1i4/Sh1v67NHFa2qaZOIXcyUHFV/aPJt+m2KoL/lUfmk+YpfL6z6cdSjjgeONr6C&#xA;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&#xA;KuxV7F/zit/5M6X/ALZtx/ycixV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>150.000000</stDim:w>
            <stDim:h>380.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>AlteDIN1451Mittelschrift</stFnt:fontName>
                  <stFnt:fontFamily>Alte DIN 1451 Mittelschrift</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 000.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>din1451alt.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>DSEG14Classic-Italic</stFnt:fontName>
                  <stFnt:fontFamily>DSEG14 Classic</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 0.3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>DSEG14Classic-Italic.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:DocumentID>xmp.did:890483bc-d96a-4cbf-be6b-bdee55a19096</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:890483bc-d96a-4cbf-be6b-bdee55a19096</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:890483bc-d96a-4cbf-be6b-bdee55a19096</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:890483bc-d96a-4cbf-be6b-bdee55a19096</stEvt:instanceID>
                  <stEvt:when>2018-12-04T00:35:45Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -380 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 380 li
150 380 li
150 0 li
cp
clp
0 .00018493 mo
150 .00018493 li
150 380 li
0 380 li
0 .00018493 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.708217 .647669 .637629 .677302 cmyk
f
56.7622 373.818 mo
52.562 361.018 li
54.562 361.018 li
57.4619 370.718 li
57.4619 370.718 li
60.3618 361.018 li
62.3618 361.018 li
58.1621 373.818 li
56.7622 373.818 li
cp
0 0 0 0 cmyk
f
68.562 370.618 mo
68.562 369.919 li
66.4619 369.919 li
65.4619 369.919 64.8618 370.318 64.9619 371.018 cv
64.9619 371.318 65.062 371.618 65.3618 371.818 cv
65.6621 372.018 66.062 372.218 66.6621 372.218 cv
67.4619 372.218 67.9619 372.118 68.2622 371.919 cv
68.3618 371.818 68.562 371.318 68.562 370.618 cv
cp
68.562 373.818 mo
68.562 373.018 li
68.562 373.018 li
68.3618 373.318 68.1621 373.518 67.7622 373.718 cv
67.3618 373.919 66.9619 373.919 66.3618 373.919 cv
65.3618 373.919 64.562 373.618 64.062 373.118 cv
63.4619 372.618 63.2622 371.919 63.2622 371.118 cv
63.2622 370.318 63.4619 369.718 63.9619 369.218 cv
64.4619 368.718 65.1621 368.419 66.1621 368.419 cv
68.6621 368.419 li
68.6621 367.419 li
68.6621 366.618 68.062 366.218 66.8618 366.218 cv
66.4619 366.218 66.062 366.218 65.7622 366.318 cv
65.4619 366.419 65.2622 366.618 65.1621 366.919 cv
63.7622 365.818 li
64.4619 364.919 65.4619 364.419 66.7622 364.518 cv
67.8618 364.518 68.7622 364.718 69.4619 365.218 cv
70.1621 365.718 70.4619 366.419 70.4619 367.618 cv
70.4619 373.818 li
68.562 373.818 li
68.562 373.818 li
cp
f
72.3618 371.618 mo
72.3618 361.018 li
74.1621 361.018 li
74.1621 371.518 li
74.1621 371.919 74.3618 372.118 74.8618 372.118 cv
75.4619 372.118 li
75.4619 373.818 li
74.6621 373.818 li
73.9619 373.818 73.4619 373.618 72.9619 373.318 cv
72.562 373.018 72.3618 372.419 72.3618 371.618 cv
cp
f
76.9619 371.618 mo
76.9619 361.018 li
78.7617 361.018 li
78.7617 371.518 li
78.7617 371.919 78.9619 372.118 79.4619 372.118 cv
80.0615 372.118 li
80.0615 373.818 li
79.2617 373.818 li
78.5615 373.818 78.0615 373.618 77.5615 373.318 cv
77.1621 373.018 76.9619 372.419 76.9619 371.618 cv
cp
f
82.9619 368.419 mo
86.7617 368.419 li
86.7617 367.718 86.5615 367.218 86.1621 366.818 cv
85.7617 366.419 85.3623 366.318 84.8623 366.318 cv
84.3623 366.318 83.8623 366.518 83.4619 366.818 cv
83.1621 367.218 82.9619 367.718 82.9619 368.419 cv
cp
88.6621 369.919 mo
82.9619 369.919 li
82.9619 370.718 83.1621 371.218 83.5615 371.618 cv
83.9619 372.018 84.4619 372.218 85.1621 372.218 cv
85.9619 372.218 86.5615 371.919 87.1621 371.318 cv
88.4619 372.419 li
87.9619 372.919 87.4619 373.318 86.9619 373.518 cv
86.3623 373.718 85.7617 373.818 85.1621 373.818 cv
84.2617 373.818 83.3623 373.518 82.4619 372.919 cv
81.5615 372.318 81.1621 371.018 81.1621 369.218 cv
81.1621 367.419 81.5615 366.218 82.3623 365.518 cv
83.1621 364.818 84.0615 364.518 84.8623 364.518 cv
85.8623 364.518 86.7617 364.818 87.4619 365.518 cv
88.2617 366.218 88.5615 367.119 88.5615 368.318 cv
88.5615 369.919 li
88.6621 369.919 li
88.6621 369.919 li
cp
f
92.5615 373.518 mo
89.2617 364.718 li
91.1621 364.718 li
93.3623 371.118 li
93.3623 371.118 li
95.5615 364.718 li
97.4619 364.718 li
93.5615 375.718 li
93.2617 376.419 92.9619 376.919 92.4619 377.118 cv
91.9619 377.419 91.4619 377.518 90.9619 377.518 cv
90.3623 377.518 li
90.3623 375.818 li
90.8623 375.818 li
91.4619 375.818 91.7617 375.518 91.9619 375.018 cv
92.5615 373.518 li
cp
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
0 24.5583 mo
150 24.5583 li
@
0 356.558 mo
150 356.558 li
@
42.1001 12.8581 mo
45.7998 12.8581 li
45.5 12.0583 45.2998 11.4582 45.2002 10.9582 cv
45.1001 10.4582 44.8999 10.1584 44.7998 9.75849 cv
44.7002 9.3581 44.6001 9.05829 44.5 8.65839 cv
44.3999 8.25849 44.2002 7.8581 44 7.15839 cv
43.7998 7.75849 43.6001 8.25849 43.5 8.65839 cv
43.3999 9.05829 43.2998 9.3581 43.1001 9.75849 cv
42.8999 10.1584 42.8999 10.4582 42.7002 10.9582 cv
42.5 11.4582 42.2998 12.1584 42.1001 12.8581 cv
cp
38.3999 17.4582 mo
43.1001 4.65839 li
44.7002 4.65839 li
49.3999 17.4582 li
47.3999 17.4582 li
46.3999 14.5583 li
41.5 14.5583 li
40.5 17.4582 li
38.3999 17.4582 li
cp
f
51 17.5583 mo
51 8.3581 li
52.7998 8.3581 li
52.7998 9.3581 li
52.7998 9.3581 li
53.3999 8.65839 54.2002 8.25849 55.2002 8.25849 cv
55.7998 8.25849 56.2998 8.3581 56.7002 8.55829 cv
57.1001 8.75849 57.3999 9.05829 57.7998 9.3581 cv
58.5 8.55829 59.5 8.15839 60.7002 8.15839 cv
61.3999 8.15839 62.1001 8.45819 62.7998 8.95819 cv
63.5 9.45819 63.7998 10.2585 63.7998 11.3581 cv
63.7998 17.4582 li
62 17.4582 li
62 12.0583 li
62 11.4582 61.7998 10.9582 61.5 10.6584 cv
61.2002 10.3581 60.7002 10.1584 60.2002 10.1584 cv
59.7002 10.1584 59.2002 10.3581 58.8999 10.6584 cv
58.6001 10.9582 58.3999 11.4582 58.3999 12.0583 cv
58.3999 17.4582 li
56.6001 17.4582 li
56.6001 12.0583 li
56.6001 11.4582 56.3999 10.9582 56.1001 10.6584 cv
55.7998 10.3581 55.2998 10.1584 54.7998 10.1584 cv
54.2998 10.1584 53.7998 10.3581 53.5 10.6584 cv
53.2002 10.9582 53 11.4582 53 12.0583 cv
53 17.4582 li
51 17.4582 li
51 17.5583 li
cp
f
71 14.3581 mo
71 13.6584 li
68.8999 13.6584 li
67.8999 13.6584 67.2998 14.0583 67.3999 14.7585 cv
67.3999 15.0583 67.5 15.3581 67.7998 15.5583 cv
68.1001 15.7585 68.5 15.9582 69.1001 15.9582 cv
69.8999 15.9582 70.3999 15.8581 70.7002 15.6584 cv
70.8999 15.4582 71 15.0583 71 14.3581 cv
cp
71 17.5583 mo
71 16.7585 li
71 16.7585 li
70.7998 17.0583 70.6001 17.2585 70.2002 17.4582 cv
69.7998 17.6584 69.3999 17.6584 68.7998 17.6584 cv
67.7998 17.6584 67 17.3581 66.5 16.8581 cv
65.8999 16.3581 65.7002 15.6584 65.7002 14.8581 cv
65.7002 14.0583 65.8999 13.4582 66.3999 12.9582 cv
66.8999 12.4582 67.6001 12.1584 68.6001 12.1584 cv
71 12.1584 li
71 11.1584 li
71 10.3581 70.3999 9.95819 69.2002 9.95819 cv
68.7998 9.95819 68.3999 9.95819 68.1001 10.0583 cv
67.7998 10.1584 67.6001 10.3581 67.5 10.6584 cv
66.1001 9.55829 li
66.7998 8.65839 67.7998 8.15839 69.1001 8.25849 cv
70.2002 8.25849 71.1001 8.45819 71.7998 8.95819 cv
72.5 9.45819 72.7998 10.1584 72.7998 11.3581 cv
72.7998 17.5583 li
71 17.5583 li
cp
f
74.7998 15.2585 mo
74.7998 4.65839 li
76.5996 4.65839 li
76.5996 15.1584 li
76.5996 15.5583 76.7998 15.7585 77.2998 15.7585 cv
78 15.7585 li
78 17.4582 li
77.2002 17.4582 li
76.5 17.4582 76 17.2585 75.5 16.9582 cv
75 16.6584 74.7998 16.1584 74.7998 15.2585 cv
cp
f
81 12.9582 mo
81 13.6584 81 14.1584 81.0996 14.4582 cv
81.2002 14.7585 81.2002 14.9582 81.4004 15.1584 cv
81.5 15.3581 81.7002 15.4582 81.9004 15.6584 cv
82.0996 15.8581 82.4004 15.8581 82.7998 15.8581 cv
83.2002 15.8581 83.5 15.7585 83.7002 15.6584 cv
83.9004 15.5583 84.0996 15.3581 84.2002 15.1584 cv
84.4004 14.9582 84.5 14.7585 84.5 14.4582 cv
84.5 14.1584 84.5996 13.7585 84.5996 12.9582 cv
84.5996 12.1584 84.5996 11.7585 84.5 11.4582 cv
84.4004 11.1584 84.4004 10.9582 84.2002 10.7585 cv
84.0996 10.5583 83.9004 10.4582 83.7002 10.2585 cv
83.5 10.0583 83.2002 10.0583 82.7998 10.0583 cv
82.4004 10.0583 82.0996 10.1584 81.9004 10.2585 cv
81.7002 10.3581 81.5 10.5583 81.4004 10.7585 cv
81.2002 10.9582 81.0996 11.1584 81.0996 11.4582 cv
81.0996 11.7585 81 12.2585 81 12.9582 cv
cp
84.5996 17.4582 mo
84.5996 16.5583 li
84 17.2585 83.2002 17.6584 82.2002 17.6584 cv
81.5996 17.6584 81.0996 17.5583 80.7002 17.2585 cv
80.2998 16.9582 80 16.7585 79.7998 16.4582 cv
79.5 16.1584 79.4004 15.7585 79.2998 15.3581 cv
79.2002 14.9582 79.2002 14.1584 79.2002 12.8581 cv
79.2002 11.5583 79.2002 10.7585 79.2998 10.3581 cv
79.4004 9.95819 79.5996 9.65839 79.7998 9.25849 cv
80 8.95819 80.2998 8.75849 80.7002 8.45819 cv
81.0996 8.15839 81.5996 8.05829 82.2002 8.05829 cv
83.0996 8.05829 83.9004 8.45819 84.5996 9.15839 cv
84.5996 8.15839 li
86.4004 8.15839 li
86.4004 17.0583 li
86.4004 18.4582 86 19.4582 85.2002 20.0583 cv
84.4004 20.6584 83.5 21.0583 82.4004 21.0583 cv
81.7998 21.0583 81.2002 20.9582 80.7002 20.6584 cv
80.2002 20.3581 79.7002 19.9582 79.2002 19.5583 cv
80.5996 18.4582 li
80.7998 18.6584 81.0996 18.8581 81.4004 19.0583 cv
81.7002 19.2585 82 19.2585 82.4004 19.2585 cv
83 19.2585 83.5 19.0583 83.9004 18.7585 cv
84.2998 18.4582 84.5996 18.1584 84.5996 17.4582 cv
cp
f
93.5996 14.3581 mo
93.5996 13.6584 li
91.5 13.6584 li
90.5 13.6584 89.9004 14.0583 90 14.7585 cv
90 15.0583 90.0996 15.3581 90.4004 15.5583 cv
90.7002 15.7585 91.0996 15.9582 91.7002 15.9582 cv
92.5 15.9582 93 15.8581 93.2998 15.6584 cv
93.5 15.4582 93.5996 15.0583 93.5996 14.3581 cv
cp
93.5996 17.5583 mo
93.5996 16.7585 li
93.5996 16.7585 li
93.4004 17.0583 93.2002 17.2585 92.7998 17.4582 cv
92.4004 17.6584 92 17.6584 91.4004 17.6584 cv
90.4004 17.6584 89.5996 17.3581 89.0996 16.8581 cv
88.5 16.3581 88.2998 15.6584 88.2998 14.8581 cv
88.2998 14.0583 88.5 13.4582 89 12.9582 cv
89.5 12.4582 90.2002 12.1584 91.2002 12.1584 cv
93.7002 12.1584 li
93.7002 11.1584 li
93.7002 10.3581 93.0996 9.95819 91.9004 9.95819 cv
91.5 9.95819 91.0996 9.95819 90.7998 10.0583 cv
90.5 10.1584 90.2998 10.3581 90.2002 10.6584 cv
88.7998 9.55829 li
89.5 8.65839 90.5 8.15839 91.7998 8.25849 cv
92.9004 8.25849 93.7998 8.45819 94.5 8.95819 cv
95.2002 9.45819 95.5 10.1584 95.5 11.3581 cv
95.5 17.5583 li
93.5996 17.5583 li
cp
f
97.5996 17.5583 mo
97.5996 8.3581 li
99.4004 8.3581 li
99.4004 9.3581 li
99.4004 9.3581 li
100 8.65839 100.8 8.25849 101.8 8.25849 cv
102.4 8.25849 102.9 8.3581 103.3 8.55829 cv
103.7 8.75849 104 9.05829 104.4 9.3581 cv
105.1 8.55829 106.1 8.15839 107.3 8.15839 cv
108 8.15839 108.7 8.45819 109.4 8.95819 cv
110.1 9.45819 110.4 10.2585 110.4 11.3581 cv
110.4 17.4582 li
108.6 17.4582 li
108.6 12.0583 li
108.6 11.4582 108.4 10.9582 108.1 10.6584 cv
107.8 10.3581 107.3 10.1584 106.8 10.1584 cv
106.3 10.1584 105.8 10.3581 105.5 10.6584 cv
105.2 10.9582 105 11.4582 105 12.0583 cv
105 17.4582 li
103 17.4582 li
103 12.0583 li
103 11.4582 102.8 10.9582 102.5 10.6584 cv
102.2 10.3581 101.7 10.1584 101.2 10.1584 cv
100.7 10.1584 100.2 10.3581 99.9004 10.6584 cv
99.5996 10.9582 99.4004 11.4582 99.4004 12.0583 cv
99.4004 17.4582 li
97.5996 17.4582 li
97.5996 17.5583 li
cp
f
32.9541 49.0251 mo
27.2539 49.0251 22.6543 44.425 22.6543 38.7248 cv
22.6543 33.0251 27.2539 28.425 32.9541 28.425 cv
38.6543 28.425 43.2539 33.0251 43.2539 38.7248 cv
43.2539 44.425 38.6543 49.0251 32.9541 49.0251 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
32.9541 49.0251 mo
27.2539 49.0251 22.6543 44.425 22.6543 38.7248 cv
22.6543 33.0251 27.2539 28.425 32.9541 28.425 cv
38.6543 28.425 43.2539 33.0251 43.2539 38.7248 cv
43.2539 44.425 38.6543 49.0251 32.9541 49.0251 cv
.749721 .679194 .670497 .901457 cmyk
@
32.9541 46.7248 mo
28.5542 46.7248 24.9541 43.1252 24.9541 38.7248 cv
24.9541 34.3249 28.5542 30.7248 32.9541 30.7248 cv
37.354 30.7248 40.9541 34.3249 40.9541 38.7248 cv
40.9541 43.1252 37.354 46.7248 32.9541 46.7248 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
32.9541 46.7248 mo
28.5542 46.7248 24.9541 43.1252 24.9541 38.7248 cv
24.9541 34.3249 28.5542 30.7248 32.9541 30.7248 cv
37.354 30.7248 40.9541 34.3249 40.9541 38.7248 cv
40.9541 43.1252 37.354 46.7248 32.9541 46.7248 cv
.740902 .625055 .575372 .495155 cmyk
@
32.9541 46.5251 mo
28.6543 46.5251 25.2539 43.2248 25.2539 39.2248 cv
25.2539 35.2248 28.7539 31.925 32.9541 31.925 cv
37.1543 31.925 40.6543 35.2248 40.6543 39.2248 cv
40.6543 43.2248 37.2539 46.5251 32.9541 46.5251 cv
.456001 .333349 .326757 .00714122 cmyk
f
38.0542 39.7248 mo
38.0542 42.5251 35.7539 44.925 32.9541 44.925 cv
30.1543 44.925 27.854 42.6252 27.854 39.7248 cv
27.854 36.925 30.1543 34.5251 32.9541 34.5251 cv
35.7539 34.5251 38.0542 36.8249 38.0542 39.7248 cv
.116976 .0572824 .0719005 0 cmyk
f
38.0542 38.7248 mo
38.0542 41.5251 35.7539 43.8249 32.9541 43.8249 cv
30.1543 43.8249 27.854 41.5251 27.854 38.7248 cv
27.854 35.925 30.1543 33.6252 32.9541 33.6252 cv
35.7539 33.6252 38.0542 35.925 38.0542 38.7248 cv
.749721 .679194 .670497 .901457 cmyk
f
59.9541 49.0251 mo
54.2539 49.0251 49.6543 44.425 49.6543 38.7248 cv
49.6543 33.0251 54.2539 28.425 59.9541 28.425 cv
65.6543 28.425 70.2539 33.0251 70.2539 38.7248 cv
70.2539 44.425 65.6543 49.0251 59.9541 49.0251 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
59.9541 49.0251 mo
54.2539 49.0251 49.6543 44.425 49.6543 38.7248 cv
49.6543 33.0251 54.2539 28.425 59.9541 28.425 cv
65.6543 28.425 70.2539 33.0251 70.2539 38.7248 cv
70.2539 44.425 65.6543 49.0251 59.9541 49.0251 cv
.749721 .679194 .670497 .901457 cmyk
@
59.9541 46.7248 mo
55.5542 46.7248 51.9541 43.1252 51.9541 38.7248 cv
51.9541 34.3249 55.5542 30.7248 59.9541 30.7248 cv
64.354 30.7248 67.9541 34.3249 67.9541 38.7248 cv
67.9541 43.1252 64.354 46.7248 59.9541 46.7248 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
59.9541 46.7248 mo
55.5542 46.7248 51.9541 43.1252 51.9541 38.7248 cv
51.9541 34.3249 55.5542 30.7248 59.9541 30.7248 cv
64.354 30.7248 67.9541 34.3249 67.9541 38.7248 cv
67.9541 43.1252 64.354 46.7248 59.9541 46.7248 cv
.740902 .625055 .575372 .495155 cmyk
@
59.9541 46.5251 mo
55.6543 46.5251 52.2539 43.2248 52.2539 39.2248 cv
52.2539 35.2248 55.7539 31.925 59.9541 31.925 cv
64.2539 31.925 67.6543 35.2248 67.6543 39.2248 cv
67.6543 43.2248 64.2539 46.5251 59.9541 46.5251 cv
.456001 .333349 .326757 .00714122 cmyk
f
65.0542 39.7248 mo
65.0542 42.5251 62.7539 44.925 59.9541 44.925 cv
57.1543 44.925 54.854 42.6252 54.854 39.7248 cv
54.854 36.925 57.1543 34.5251 59.9541 34.5251 cv
62.7539 34.5251 65.0542 36.8249 65.0542 39.7248 cv
.116976 .0572824 .0719005 0 cmyk
f
65.0542 38.7248 mo
65.0542 41.5251 62.7539 43.8249 59.9541 43.8249 cv
57.1543 43.8249 54.854 41.5251 54.854 38.7248 cv
54.854 35.925 57.1543 33.6252 59.9541 33.6252 cv
62.7539 33.6252 65.0542 35.925 65.0542 38.7248 cv
.749721 .679194 .670497 .901457 cmyk
f
116.954 49.0251 mo
111.254 49.0251 106.654 44.425 106.654 38.7248 cv
106.654 33.0251 111.254 28.425 116.954 28.425 cv
122.654 28.425 127.254 33.0251 127.254 38.7248 cv
127.254 44.425 122.554 49.0251 116.954 49.0251 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
116.954 49.0251 mo
111.254 49.0251 106.654 44.425 106.654 38.7248 cv
106.654 33.0251 111.254 28.425 116.954 28.425 cv
122.654 28.425 127.254 33.0251 127.254 38.7248 cv
127.254 44.425 122.554 49.0251 116.954 49.0251 cv
.749721 .679194 .670497 .901457 cmyk
@
116.954 46.7248 mo
112.554 46.7248 108.954 43.1252 108.954 38.7248 cv
108.954 34.3249 112.554 30.7248 116.954 30.7248 cv
121.354 30.7248 124.954 34.3249 124.954 38.7248 cv
124.954 43.1252 121.354 46.7248 116.954 46.7248 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
116.954 46.7248 mo
112.554 46.7248 108.954 43.1252 108.954 38.7248 cv
108.954 34.3249 112.554 30.7248 116.954 30.7248 cv
121.354 30.7248 124.954 34.3249 124.954 38.7248 cv
124.954 43.1252 121.354 46.7248 116.954 46.7248 cv
.740902 .625055 .575372 .495155 cmyk
@
116.954 46.5251 mo
112.654 46.5251 109.254 43.2248 109.254 39.2248 cv
109.254 35.2248 112.754 31.925 116.954 31.925 cv
121.254 31.925 124.654 35.2248 124.654 39.2248 cv
124.654 43.2248 121.154 46.5251 116.954 46.5251 cv
.456001 .333349 .326757 .00714122 cmyk
f
122.054 39.7248 mo
122.054 42.5251 119.754 44.925 116.954 44.925 cv
114.154 44.925 111.854 42.6252 111.854 39.7248 cv
111.854 36.925 114.154 34.5251 116.954 34.5251 cv
119.754 34.5251 122.054 36.8249 122.054 39.7248 cv
.116976 .0572824 .0719005 0 cmyk
f
122.054 38.7248 mo
122.054 41.5251 119.754 43.8249 116.954 43.8249 cv
114.154 43.8249 111.854 41.5251 111.854 38.7248 cv
111.854 35.925 114.154 33.6252 116.954 33.6252 cv
119.754 33.6252 122.054 35.925 122.054 38.7248 cv
.749721 .679194 .670497 .901457 cmyk
f
89.9541 49.0251 mo
84.2539 49.0251 79.6543 44.425 79.6543 38.7248 cv
79.6543 33.0251 84.2539 28.425 89.9541 28.425 cv
95.6543 28.425 100.254 33.0251 100.254 38.7248 cv
100.254 44.425 95.5537 49.0251 89.9541 49.0251 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
89.9541 49.0251 mo
84.2539 49.0251 79.6543 44.425 79.6543 38.7248 cv
79.6543 33.0251 84.2539 28.425 89.9541 28.425 cv
95.6543 28.425 100.254 33.0251 100.254 38.7248 cv
100.254 44.425 95.5537 49.0251 89.9541 49.0251 cv
.749721 .679194 .670497 .901457 cmyk
@
89.9541 46.7248 mo
85.5537 46.7248 81.9541 43.1252 81.9541 38.7248 cv
81.9541 34.3249 85.5537 30.7248 89.9541 30.7248 cv
94.3545 30.7248 97.9541 34.3249 97.9541 38.7248 cv
97.9541 43.1252 94.3545 46.7248 89.9541 46.7248 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
89.9541 46.7248 mo
85.5537 46.7248 81.9541 43.1252 81.9541 38.7248 cv
81.9541 34.3249 85.5537 30.7248 89.9541 30.7248 cv
94.3545 30.7248 97.9541 34.3249 97.9541 38.7248 cv
97.9541 43.1252 94.3545 46.7248 89.9541 46.7248 cv
.740902 .625055 .575372 .495155 cmyk
@
89.9541 46.5251 mo
85.6543 46.5251 82.2539 43.2248 82.2539 39.2248 cv
82.2539 35.2248 85.7539 31.925 89.9541 31.925 cv
94.2539 31.925 97.6543 35.2248 97.6543 39.2248 cv
97.6543 43.2248 94.1543 46.5251 89.9541 46.5251 cv
.456001 .333349 .326757 .00714122 cmyk
f
95.0537 39.7248 mo
95.0537 42.5251 92.7539 44.925 89.9541 44.925 cv
87.1543 44.925 84.8545 42.6252 84.8545 39.7248 cv
84.8545 36.925 87.1543 34.5251 89.9541 34.5251 cv
92.7539 34.5251 95.0537 36.8249 95.0537 39.7248 cv
.116976 .0572824 .0719005 0 cmyk
f
95.0537 38.7248 mo
95.0537 41.5251 92.7539 43.8249 89.9541 43.8249 cv
87.1543 43.8249 84.8545 41.5251 84.8545 38.7248 cv
84.8545 35.925 87.1543 33.6252 89.9541 33.6252 cv
92.7539 33.6252 95.0537 35.925 95.0537 38.7248 cv
.749721 .679194 .670497 .901457 cmyk
f
30.5 59.5583 mo
30.5 51.7585 li
31.7002 51.7585 li
31.7002 58.4582 li
35.5 58.4582 li
35.5 59.5583 li
30.5 59.5583 li
cp
0 0 0 0 cmyk
f
58.2998 52.8581 mo
58.2998 55.2585 li
60.1001 55.2585 li
60.5 55.2585 60.8999 55.1584 61.1001 54.8581 cv
61.2998 54.5583 61.3999 54.3581 61.3999 53.9582 cv
61.3999 53.5583 61.2998 53.2585 61 53.0583 cv
60.7998 52.8581 60.5 52.8581 60.1001 52.8581 cv
58.2998 52.8581 li
cp
57.1001 59.5583 mo
57.1001 51.7585 li
60.2002 51.7585 li
60.8999 51.7585 61.3999 51.9582 61.7998 52.2585 cv
62 52.4582 62.2002 52.6584 62.3999 52.9582 cv
62.6001 53.2585 62.6001 53.5583 62.6001 53.9582 cv
62.6001 54.4582 62.5 54.9582 62.2002 55.2585 cv
61.8999 55.6584 61.6001 55.9582 61.1001 56.0583 cv
62.8999 59.5583 li
61.5 59.5583 li
59.8999 56.2585 li
58.3999 56.2585 li
58.3999 59.5583 li
57.1001 59.5583 li
cp
f
49 61.9582 mo
46.5 57.7585 li
44 61.9582 li
42.1001 61.9582 li
45.6001 56.1584 li
42.2998 50.6584 li
44.2998 50.6584 li
46.6001 54.5583 li
48.8999 50.6584 li
50.8999 50.6584 li
47.5 56.0583 li
51 61.8581 li
49 61.8581 li
49 61.9582 li
cp
f
61.4541 340.325 mo
55.7539 340.325 51.1543 335.725 51.1543 330.025 cv
51.1543 324.325 55.7539 319.725 61.4541 319.725 cv
67.1543 319.725 71.7539 324.325 71.7539 330.025 cv
71.7539 335.725 67.1543 340.325 61.4541 340.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
61.4541 340.325 mo
55.7539 340.325 51.1543 335.725 51.1543 330.025 cv
51.1543 324.325 55.7539 319.725 61.4541 319.725 cv
67.1543 319.725 71.7539 324.325 71.7539 330.025 cv
71.7539 335.725 67.1543 340.325 61.4541 340.325 cv
.749721 .679194 .670497 .901457 cmyk
@
61.4541 338.025 mo
57.0542 338.025 53.4541 334.425 53.4541 330.025 cv
53.4541 325.625 57.0542 322.025 61.4541 322.025 cv
65.854 322.025 69.4541 325.625 69.4541 330.025 cv
69.4541 334.425 65.854 338.025 61.4541 338.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
61.4541 338.025 mo
57.0542 338.025 53.4541 334.425 53.4541 330.025 cv
53.4541 325.625 57.0542 322.025 61.4541 322.025 cv
65.854 322.025 69.4541 325.625 69.4541 330.025 cv
69.4541 334.425 65.854 338.025 61.4541 338.025 cv
.740902 .625055 .575372 .495155 cmyk
@
61.4541 337.825 mo
57.1543 337.825 53.7539 334.525 53.7539 330.525 cv
53.7539 326.525 57.2539 323.225 61.4541 323.225 cv
65.6543 323.225 69.1543 326.525 69.1543 330.525 cv
69.1543 334.525 65.7539 337.825 61.4541 337.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
66.5542 331.025 mo
66.5542 333.825 64.2539 336.225 61.4541 336.225 cv
58.6543 336.225 56.354 333.925 56.354 331.025 cv
56.354 328.225 58.6543 325.825 61.4541 325.825 cv
64.2539 325.825 66.5542 328.125 66.5542 331.025 cv
.116976 .0572824 .0719005 0 cmyk
f
66.5542 330.025 mo
66.5542 332.825 64.2539 335.125 61.4541 335.125 cv
58.6543 335.125 56.354 332.825 56.354 330.025 cv
56.354 327.225 58.6543 324.925 61.4541 324.925 cv
64.2539 324.925 66.5542 327.225 66.5542 330.025 cv
.749721 .679194 .670497 .901457 cmyk
f
35.9541 352.325 mo
30.2539 352.325 25.6543 347.725 25.6543 342.025 cv
25.6543 336.325 30.2539 331.725 35.9541 331.725 cv
41.6543 331.725 46.2539 336.325 46.2539 342.025 cv
46.2539 347.725 41.6543 352.325 35.9541 352.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
35.9541 352.325 mo
30.2539 352.325 25.6543 347.725 25.6543 342.025 cv
25.6543 336.325 30.2539 331.725 35.9541 331.725 cv
41.6543 331.725 46.2539 336.325 46.2539 342.025 cv
46.2539 347.725 41.6543 352.325 35.9541 352.325 cv
.749721 .679194 .670497 .901457 cmyk
@
35.9541 350.025 mo
31.5542 350.025 27.9541 346.425 27.9541 342.025 cv
27.9541 337.625 31.5542 334.025 35.9541 334.025 cv
40.354 334.025 43.9541 337.625 43.9541 342.025 cv
43.9541 346.425 40.354 350.025 35.9541 350.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
35.9541 350.025 mo
31.5542 350.025 27.9541 346.425 27.9541 342.025 cv
27.9541 337.625 31.5542 334.025 35.9541 334.025 cv
40.354 334.025 43.9541 337.625 43.9541 342.025 cv
43.9541 346.425 40.354 350.025 35.9541 350.025 cv
.740902 .625055 .575372 .495155 cmyk
@
35.9541 349.825 mo
31.6543 349.825 28.2539 346.525 28.2539 342.525 cv
28.2539 338.525 31.7539 335.225 35.9541 335.225 cv
40.1543 335.225 43.6543 338.525 43.6543 342.525 cv
43.6543 346.525 40.2539 349.825 35.9541 349.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
41.0542 343.025 mo
41.0542 345.825 38.7539 348.225 35.9541 348.225 cv
33.1543 348.225 30.854 345.925 30.854 343.025 cv
30.854 340.225 33.1543 337.825 35.9541 337.825 cv
38.7539 337.825 41.0542 340.125 41.0542 343.025 cv
.116976 .0572824 .0719005 0 cmyk
f
41.0542 342.025 mo
41.0542 344.825 38.7539 347.125 35.9541 347.125 cv
33.1543 347.125 30.854 344.825 30.854 342.025 cv
30.854 339.225 33.1543 336.925 35.9541 336.925 cv
38.7539 336.925 41.0542 339.225 41.0542 342.025 cv
.749721 .679194 .670497 .901457 cmyk
f
35.9541 328.425 mo
30.2539 328.425 25.6543 323.825 25.6543 318.125 cv
25.6543 312.425 30.2539 307.825 35.9541 307.825 cv
41.6543 307.825 46.2539 312.425 46.2539 318.125 cv
46.2539 323.825 41.6543 328.425 35.9541 328.425 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
35.9541 328.425 mo
30.2539 328.425 25.6543 323.825 25.6543 318.125 cv
25.6543 312.425 30.2539 307.825 35.9541 307.825 cv
41.6543 307.825 46.2539 312.425 46.2539 318.125 cv
46.2539 323.825 41.6543 328.425 35.9541 328.425 cv
.749721 .679194 .670497 .901457 cmyk
@
35.9541 326.125 mo
31.5542 326.125 27.9541 322.525 27.9541 318.125 cv
27.9541 313.725 31.5542 310.125 35.9541 310.125 cv
40.354 310.125 43.9541 313.725 43.9541 318.125 cv
43.9541 322.525 40.354 326.125 35.9541 326.125 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
35.9541 326.125 mo
31.5542 326.125 27.9541 322.525 27.9541 318.125 cv
27.9541 313.725 31.5542 310.125 35.9541 310.125 cv
40.354 310.125 43.9541 313.725 43.9541 318.125 cv
43.9541 322.525 40.354 326.125 35.9541 326.125 cv
.740902 .625055 .575372 .495155 cmyk
@
35.9541 325.925 mo
31.6543 325.925 28.2539 322.625 28.2539 318.625 cv
28.2539 314.625 31.7539 311.325 35.9541 311.325 cv
40.1543 311.325 43.6543 314.625 43.6543 318.625 cv
43.6543 322.625 40.2539 325.925 35.9541 325.925 cv
.456001 .333349 .326757 .00714122 cmyk
f
41.0542 319.125 mo
41.0542 321.925 38.7539 324.325 35.9541 324.325 cv
33.1543 324.325 30.854 322.025 30.854 319.125 cv
30.854 316.325 33.1543 313.925 35.9541 313.925 cv
38.7539 313.925 41.0542 316.225 41.0542 319.125 cv
.116976 .0572824 .0719005 0 cmyk
f
41.0542 318.125 mo
41.0542 320.925 38.7539 323.225 35.9541 323.225 cv
33.1543 323.225 30.854 320.925 30.854 318.125 cv
30.854 315.325 33.1543 313.025 35.9541 313.025 cv
38.7539 313.025 41.0542 315.325 41.0542 318.125 cv
.749721 .679194 .670497 .901457 cmyk
f
88.4541 340.325 mo
82.7539 340.325 78.1543 335.725 78.1543 330.025 cv
78.1543 324.325 82.7539 319.725 88.4541 319.725 cv
94.1543 319.725 98.7539 324.325 98.7539 330.025 cv
98.7539 335.725 94.1543 340.325 88.4541 340.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
88.4541 340.325 mo
82.7539 340.325 78.1543 335.725 78.1543 330.025 cv
78.1543 324.325 82.7539 319.725 88.4541 319.725 cv
94.1543 319.725 98.7539 324.325 98.7539 330.025 cv
98.7539 335.725 94.1543 340.325 88.4541 340.325 cv
.749721 .679194 .670497 .901457 cmyk
@
88.4541 338.025 mo
84.0537 338.025 80.4541 334.425 80.4541 330.025 cv
80.4541 325.625 84.0537 322.025 88.4541 322.025 cv
92.8545 322.025 96.4541 325.625 96.4541 330.025 cv
96.4541 334.425 92.8545 338.025 88.4541 338.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
88.4541 338.025 mo
84.0537 338.025 80.4541 334.425 80.4541 330.025 cv
80.4541 325.625 84.0537 322.025 88.4541 322.025 cv
92.8545 322.025 96.4541 325.625 96.4541 330.025 cv
96.4541 334.425 92.8545 338.025 88.4541 338.025 cv
.740902 .625055 .575372 .495155 cmyk
@
88.4541 337.825 mo
84.1543 337.825 80.7539 334.525 80.7539 330.525 cv
80.7539 326.525 84.2539 323.225 88.4541 323.225 cv
92.7539 323.225 96.1543 326.525 96.1543 330.525 cv
96.1543 334.525 92.7539 337.825 88.4541 337.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
93.5537 331.025 mo
93.5537 333.825 91.2539 336.225 88.4541 336.225 cv
85.6543 336.225 83.3545 333.925 83.3545 331.025 cv
83.3545 328.225 85.6543 325.825 88.4541 325.825 cv
91.2539 325.825 93.5537 328.125 93.5537 331.025 cv
.116976 .0572824 .0719005 0 cmyk
f
93.5537 330.025 mo
93.5537 332.825 91.2539 335.125 88.4541 335.125 cv
85.6543 335.125 83.3545 332.825 83.3545 330.025 cv
83.3545 327.225 85.6543 324.925 88.4541 324.925 cv
91.2539 324.925 93.5537 327.225 93.5537 330.025 cv
.749721 .679194 .670497 .901457 cmyk
f
113.954 352.325 mo
108.254 352.325 103.654 347.725 103.654 342.025 cv
103.654 336.325 108.254 331.725 113.954 331.725 cv
119.654 331.725 124.254 336.325 124.254 342.025 cv
124.254 347.725 119.654 352.325 113.954 352.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
113.954 352.325 mo
108.254 352.325 103.654 347.725 103.654 342.025 cv
103.654 336.325 108.254 331.725 113.954 331.725 cv
119.654 331.725 124.254 336.325 124.254 342.025 cv
124.254 347.725 119.654 352.325 113.954 352.325 cv
.749721 .679194 .670497 .901457 cmyk
@
113.954 350.025 mo
109.554 350.025 105.954 346.425 105.954 342.025 cv
105.954 337.625 109.554 334.025 113.954 334.025 cv
118.354 334.025 121.954 337.625 121.954 342.025 cv
121.954 346.425 118.354 350.025 113.954 350.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
113.954 350.025 mo
109.554 350.025 105.954 346.425 105.954 342.025 cv
105.954 337.625 109.554 334.025 113.954 334.025 cv
118.354 334.025 121.954 337.625 121.954 342.025 cv
121.954 346.425 118.354 350.025 113.954 350.025 cv
.740902 .625055 .575372 .495155 cmyk
@
113.954 349.825 mo
109.654 349.825 106.254 346.525 106.254 342.525 cv
106.254 338.525 109.754 335.225 113.954 335.225 cv
118.254 335.225 121.654 338.525 121.654 342.525 cv
121.654 346.525 118.254 349.825 113.954 349.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
119.054 343.025 mo
119.054 345.825 116.754 348.225 113.954 348.225 cv
111.154 348.225 108.854 345.925 108.854 343.025 cv
108.854 340.225 111.154 337.825 113.954 337.825 cv
116.754 337.825 119.054 340.125 119.054 343.025 cv
.116976 .0572824 .0719005 0 cmyk
f
119.054 342.025 mo
119.054 344.825 116.754 347.125 113.954 347.125 cv
111.154 347.125 108.854 344.825 108.854 342.025 cv
108.854 339.225 111.154 336.925 113.954 336.925 cv
116.754 336.925 119.054 339.225 119.054 342.025 cv
.749721 .679194 .670497 .901457 cmyk
f
113.954 328.425 mo
108.254 328.425 103.654 323.825 103.654 318.125 cv
103.654 312.425 108.254 307.825 113.954 307.825 cv
119.654 307.825 124.254 312.425 124.254 318.125 cv
124.254 323.825 119.654 328.425 113.954 328.425 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
113.954 328.425 mo
108.254 328.425 103.654 323.825 103.654 318.125 cv
103.654 312.425 108.254 307.825 113.954 307.825 cv
119.654 307.825 124.254 312.425 124.254 318.125 cv
124.254 323.825 119.654 328.425 113.954 328.425 cv
.749721 .679194 .670497 .901457 cmyk
@
113.954 326.125 mo
109.554 326.125 105.954 322.525 105.954 318.125 cv
105.954 313.725 109.554 310.125 113.954 310.125 cv
118.354 310.125 121.954 313.725 121.954 318.125 cv
121.954 322.525 118.354 326.125 113.954 326.125 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
113.954 326.125 mo
109.554 326.125 105.954 322.525 105.954 318.125 cv
105.954 313.725 109.554 310.125 113.954 310.125 cv
118.354 310.125 121.954 313.725 121.954 318.125 cv
121.954 322.525 118.354 326.125 113.954 326.125 cv
.740902 .625055 .575372 .495155 cmyk
@
113.954 325.925 mo
109.654 325.925 106.254 322.625 106.254 318.625 cv
106.254 314.625 109.754 311.325 113.954 311.325 cv
118.254 311.325 121.654 314.625 121.654 318.625 cv
121.654 322.625 118.254 325.925 113.954 325.925 cv
.456001 .333349 .326757 .00714122 cmyk
f
119.054 319.125 mo
119.054 321.925 116.754 324.325 113.954 324.325 cv
111.154 324.325 108.854 322.025 108.854 319.125 cv
108.854 316.325 111.154 313.925 113.954 313.925 cv
116.754 313.925 119.054 316.225 119.054 319.125 cv
.116976 .0572824 .0719005 0 cmyk
f
119.054 318.125 mo
119.054 320.925 116.754 323.225 113.954 323.225 cv
111.154 323.225 108.854 320.925 108.854 318.125 cv
108.854 315.325 111.154 313.025 113.954 313.025 cv
116.754 313.025 119.054 315.325 119.054 318.125 cv
.749721 .679194 .670497 .901457 cmyk
f
59.2002 351.459 mo
59.2002 343.658 li
60.3999 343.658 li
60.3999 350.358 li
64.2002 350.358 li
64.2002 351.459 li
59.2002 351.459 li
59.2002 351.459 li
cp
0 0 0 0 cmyk
f
10.5 333.959 mo
10.5 326.158 li
11.7002 326.158 li
11.7002 332.858 li
15.5 332.858 li
15.5 333.959 li
10.5 333.959 li
10.5 333.959 li
cp
f
87.0996 344.758 mo
87.0996 347.158 li
88.9004 347.158 li
89.2998 347.158 89.7002 347.058 89.9004 346.758 cv
90.0996 346.459 90.2002 346.258 90.2002 345.858 cv
90.2002 345.459 90.0996 345.158 89.7998 344.959 cv
89.5996 344.758 89.2998 344.758 88.9004 344.758 cv
87.0996 344.758 li
cp
85.9004 351.459 mo
85.9004 343.658 li
89 343.658 li
89.7002 343.658 90.2002 343.858 90.5996 344.158 cv
90.7998 344.358 91 344.558 91.2002 344.858 cv
91.4004 345.158 91.4004 345.459 91.4004 345.858 cv
91.4004 346.358 91.2998 346.858 91 347.158 cv
90.7002 347.558 90.4004 347.858 89.9004 347.959 cv
91.7002 351.459 li
90.2998 351.459 li
88.7002 348.158 li
87.2002 348.158 li
87.2002 351.459 li
85.9004 351.459 li
cp
f
135.3 327.258 mo
135.3 329.658 li
137.1 329.658 li
137.5 329.658 137.9 329.558 138.1 329.258 cv
138.3 328.959 138.4 328.758 138.4 328.358 cv
138.4 327.959 138.3 327.658 138 327.459 cv
137.8 327.258 137.5 327.258 137.1 327.258 cv
135.3 327.258 li
cp
134.1 333.959 mo
134.1 326.158 li
137.2 326.158 li
137.9 326.158 138.4 326.358 138.8 326.658 cv
139 326.858 139.2 327.058 139.4 327.358 cv
139.6 327.658 139.6 327.959 139.6 328.358 cv
139.6 328.858 139.5 329.358 139.2 329.658 cv
138.9 330.058 138.6 330.358 138.1 330.459 cv
139.9 333.959 li
138.5 333.959 li
136.9 330.658 li
135.4 330.658 li
135.4 333.959 li
134.1 333.959 li
cp
f
87.5 59.5583 mo
87.5 51.7585 li
88.7002 51.7585 li
88.7002 58.4582 li
92.5 58.4582 li
92.5 59.5583 li
87.5 59.5583 li
cp
f
115.3 52.8581 mo
115.3 55.2585 li
117.1 55.2585 li
117.5 55.2585 117.9 55.1584 118.1 54.8581 cv
118.3 54.6584 118.4 54.3581 118.4 53.9582 cv
118.4 53.5583 118.3 53.2585 118 53.0583 cv
117.8 52.8581 117.5 52.8581 117.1 52.8581 cv
115.3 52.8581 li
cp
114.1 59.5583 mo
114.1 51.7585 li
117.2 51.7585 li
117.9 51.7585 118.4 51.9582 118.8 52.2585 cv
119 52.4582 119.2 52.6584 119.4 52.9582 cv
119.6 53.2585 119.6 53.5583 119.6 53.9582 cv
119.6 54.4582 119.5 54.9582 119.2 55.2585 cv
118.9 55.6584 118.6 55.9582 118.1 56.0583 cv
119.9 59.5583 li
118.5 59.5583 li
116.9 56.2585 li
115.3 56.2585 li
115.3 59.5583 li
114.1 59.5583 li
cp
f
102.7 61.9582 mo
102.7 57.2585 li
99.2998 50.5583 li
101.1 50.5583 li
103.5 55.6584 li
105.9 50.5583 li
107.7 50.5583 li
104.3 57.2585 li
104.3 61.9582 li
102.7 61.9582 li
cp
f
30 101.058 mo
120 101.058 li
120 121.058 li
30 121.058 li
30 101.058 li
cp
.732845 .672084 .657374 .825711 cmyk
f
1 lw
10 ml
30 101.058 mo
120 101.058 li
120 121.058 li
30 121.058 li
30 101.058 li
cp
.676844 .618402 .580743 .45658 cmyk
@
.420691 .897307 .813718 .655482 cmyk
%ADOBeginSubsetFont: DSEG14Classic-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DSEG14Classic-Italic def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 126 /asciitilde putdef/FontBBox {-106 0 754 1000} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B72F60D248DF1D2906E8683B3BF7E0DCF9FD3162FC82FEA75A8094787DF4F8> |-/asciitilde <1C60D8A8C9B6A5F49439D74314166369891523B30998C2A1103237B05BED938AD1AE03F79CD2327D1F329AC95CCA78D1C149CB934341CD110182FA7C2239A2F0C3681FA1337C7836A3A7AAB63C13F6A60CBB9E77A8DA3541D4FF26250A87387F29CB6A2628AB2F1066FEA705A1DC884F8F4B08C94C09AB354DD7B7F9B7F39A5EBD8CE67FFB396A6D1E09642991F45644BD91E49E9F4F8FC924802FCA6D8C4F7247AB76963EE9A68C83376A4B3F541BF0092134A6B153522295907A63BE72F5B22763999DC69F46667DCF9554263210B8F4F497409C5A56EC07896E9EC49A5881323D6D0AAD96DB7578C451C069EBF417E64701A9BFBC0591DDF96A024B4F8BA6B18CECE8EEC1D96E63363CCB0CBB0DBF650D57EA00D7FF6FAE98CBA579DBC69982EAC58AAB7A292E0C176110482BCFA601A150019C4A6A053F47AC0E87DF5F95C717CF4C1B51910482EE1B59240946B1186FD0337B940C695A7740F19FF55DE7B0E9580D46E9A44AB9198D882E4A718081F2166139597D456B62DDD8167832A667E1D49F45F49466766E78ACDF9D4FB478> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EJQAQC+DSEG14Classic-Italic /DSEG14Classic-Italic findfont ct_VMDictPut/EJQAQC+DSEG14Classic-Italic*1 [126{/.notdef}rp /asciitilde 129{/.notdef}rp]EJQAQC+DSEG14Classic-Italic nfEJQAQC+DSEG14Classic-Italic*1 [13 0 0 -13 0 0 ]msf32.5684 117.558 mo(~~~~~~~~)sh42.6001 176.858 mo
107.6 176.858 li
107.6 195.358 li
42.6001 195.358 li
42.6001 176.858 li
cp
.732845 .672084 .657374 .825711 cmyk
f
42.6001 176.858 mo
107.6 176.858 li
107.6 195.358 li
42.6001 195.358 li
42.6001 176.858 li
cp
.676844 .618402 .580743 .45658 cmyk
@
.420691 .897307 .813718 .655482 cmyk
EJQAQC+DSEG14Classic-Italic*1 [12 0 0 -12 0 0 ]msf45.624 192.058 mo(~~~~~~)sh0 .993286 1 0 cmyk
%ADOBeginSubsetFont: DSEG14Classic-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQC+DSEG14Classic-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6AE17BFD801875635A7502B9D3E6AA1CB91D02CB78A9C888A7F9B242D651D747361716F411A204F7938AB71EEA06DCBDE33D94FCC2154AEE5774B0F4EF6072B689BFCE7ACD987C1FB1FD4F3188FA1D44F47445F19E7D08270247C6A4C6D569E8656121731ABEA83CCAE3C2AC7AE0577599136CB496DC24733ECAB5FA6B433F42876F483952CD42D21436737B2926D889870D48692CC36F9> |-/C <1C60D8A8C9B6A5F49BDBFD018D8F7C7F2D2FAB9530A26F6E0FCFEC1BFBEBC1524B8C146766A374FF8E0B9C15E0A7B512A41A0506C6A763545D05F0D3BF639FA624652572929F9BE1CA17F9CDC46BC76E145F178374A65F785F7AE4F1F9A185CC36F8294738293C48E9A9C6ED06B812D0598F8EDBF2AEEC01442249228073579F> |-/E <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6AE17BFD801875635A7502B9D3E6AA1CB91D02CB78A9C888A7F9B242D651D29EB5A4245C6226B2ABB04BCDBD0FBD3E843F2C8B060A32C550A40F08DDE33E545811C5A8BD4CA4BBB72E151ED572D35FF8CAD76331428C0F731EBFE6212541A31A4FEC4B88087504A759D5357988B1EE69AC8EB87E904599D> |-/H <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6BB07BA21CAC58D0E9E6AF8A515F8018EB3EF008323CAA5C9A1F8B08D19DA42E88C9FF9AA3FFA395E270E1E83037DD4C2B6A4DEBE8764DA6A04521A1D932EAB34CF59CAC417F8A718D605CBDA6C139F8EE9F40D06B97CA1BB0652803ED750E9ED32C1B86A4825E63785292F56EE8C8702018FDA7F28AD6A589E> |-/N <1C60D8A8C9B6A5F494E5280B00832A85844CA4EE5F07558DBA6E1AB1156A6A88E1F16B88874592B5C3C211386E9DE177BE330929982E4CBFD0AC108C2FAC1A1FDD08546911370C5003EBD80280189D020819BE9316239AA2065D2404C7A0DD21F25141FF2C2AC2EC915139D376D4BDBDBC5147F7EF6F7107F1F188DE1F84DCDF47930455A2EE25D05323DA407A1370DF363635E9CAEB3C9E1F2BC253020BA8C135DDBDEA8F7C44CAB251E76EF399> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQC+DSEG14Classic-Italic /Encoding getdup 65 /A putdup 67 /C putdup 69 /E putdup 72 /H putdup 78 /N putpop%ADOEndSubsetFont
/EJQAQC+DSEG14Classic-Italic*1 [65{/.notdef}rp /A /.notdef /C /.notdef /E 2{/.notdef}rp /H 5{/.notdef}rp /N 47{/.notdef}rp /asciitilde 129{/.notdef}rp]EJQAQC+DSEG14Classic-Italic nfEJQAQC+DSEG14Classic-Italic*1 [12 0 0 -12 0 0 ]msf45.624 192.058 mo(CHANCE)sh0 0 0 0 cmyk
%ADOBeginSubsetFont: AlteDIN1451Mittelschrift Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /AlteDIN1451Mittelschrift def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 65 /A putdup 71 /G putdup 77 /M putdup 80 /P putdup 97 /a putdup 100 /d putdup 101 /e putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdef/FontBBox {-52 -229 994 954} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings14 dict dup begin/.notdef <1C60D8A8C9B87A8F8B> |-/space <1C60D8A8C9B87A8F8B> |-/A <1C60D8A8C9B662FEE4589D4CD5D4206B74FD018F924F53E3E3F88C3071ECD07C8EC1C6484CB04CFE91F1C4BC542E025597F5D95927760248CD13DCC338382C8B2DD75328C7A0AF5F6E6100AA4F3CF35D609AFB3D386F23322C0446955804BD4EEF981E4AFF4A76D1> |-/G <1C60D8A8C9B7D98F6D768BF56BD21009DE089C05EEA895B6E43AA575FBF492A96C598234453375BEB7F1E77DF956BCE97AFA824DF553C128118E98034AF88D048438B248CAA81155710DE8DE4DA66AFBC52302C6C6E0A268E128416C8C02C6B44790E5024D6D404FEF64F79C542B8718BC7B517CF880C2ED2B655A36254AA314646FEF6D157663F478AC6C680AC34FF66ACD0BBCC51C9595EC839163A3012DC5668740BAA4A27C75A0FFA5E56CC990628ABED8EFE01E609FEE6653BC1EA41270063B8443> |-/M <1C60D8A8C9B6EB66D33421726236795BAF3C59FFAE0A31690418B24B5BBA78250926C49AB57BFBFFB323111003A4FC0D7F5EFB59DB41FBA2A3F9> |-/P <1C60D8A8C9B7CA642A4149ECC4234E0C1B8CDB15E07D59AE449390925975A355BBABCE58A1A4F36BF1D3045A0E3DB552EC4EDA0246B56F298EF880B538535F386E11FFBBA6DA3E7104898A6D773AC9F177BA214639F4FE9C6A82068D395DCCD5316E2C019AFF7B6DE58903> |-/a <1C60D8A8C9B75BE5164334C3925F27EB902615C28CCD8854C1445F97E36E68A3D14532738CE6D5E342752A636085CB267006B891845788E34A8D20749CB5C83F7DA87127C2DCB384AC8A3B18DDFFD048A191AC1C3AF5B5B6F1125543A1696476A66F54C3B7B7B1CA0D094015B657A3F5F9CCD0CEC61AA1DD082D99B8D3DAADC51468F78935BA113B8097E937E33B72F3D555BE205C16A21D73B64DB3CD> |-/d <1C60D8A8C9B7B4A1307F50B7DB4D130F1579883FEC7FC5BB27D26EB5F15559EB8BE19C278BF1CD01BB4BF0303577923DC9C52F8F952800EA1D52607CD2B0B927CB02E7DD708E669A93E745078AE6098B4BE206683A3C8979C6EA2D0A9D304E2E344544233B2E065C0C0456D78E1C06E9C9CBE4F39C479799CD93BD2198343EDCD6E1A22DFA4C2224E7358616DBC20759EE80D5A2C7839B82C658C1EA187747A54620> |-/e <1C60D8A8C9B7A9C0DC81EE6EF6E8D558E28FB9C325A25D9D3B5D068F7B595384FC7C614AD74381BD3FFF51E541C1DA83E1FF8813FCC3CC253CA97E9FF1362D9FAA3DF3A004211BAEB912DF7AE4C943432E97AB163CA474A54F94F89AC6BEF2C954B67E060C8B6FD4EEF2D71FF7ACACB8C5B64424CB60D3308195B493C40B6C158D97DA6C2E2086> |-/i <1C60D8A8C9B87A8F726EBBA2C7B170D31CEDD133960AF748936ADDF726778CC5> |-/m <1C60D8A8C9B68968522886896DE8B290FB6D94B620A7F457F616EF50D2F222FCECD9677FCABFAC49589C499DD0FBE6A57E34FD6DEAE5E345E80F9A8605B857382795CBC2A42B289570667DBE04AD8103999615068D35B8A75307DC080A1D765141BE1D6620A31E2AE14C58676CD6476E66A9497DE900103AF96B253FE76128A86485751126D1EB4357EF14> |-/n <1C60D8A8C9B78256D2A1762A3D3CD78E4A50BC1406202EB11DA523FF6417FACB15F6954F70A0FDBB65F427B1E24B7109F1268B7A4A8524D1817AC15135F2903D9679F8C68ED40F202C66B1E37D24D3655D7E> |-/o <1C60D8A8C9B7A73D8C2B679399B6611ABAE95F28118B81BF4431F2836930520EF591ADFFC61ADB85B314D446A035F062B6B0E939ADE014C22DD5FF17F7FB367F4C0859F8B02648667F52970BF00E8E0A6619B29B01D052390B5D503AFF4210AA55FBF8158DC764E18C96139D544EFE74AFB760255520DDD4E2DD02386A602BF66068F4DE386622B19A58AF1D788A84F6BDAC8319E4C9BAA001300017C632DEB9F0BDB6D77BCBEC3471DC416442CB2325B913A1CFCE529CC16F6BF1B9722A25FD1472E77FFF01B987763E866DE2593DA0FCA4CCB226B138> |-/r <1C60D8A8C9B7361F028C2EE60FCC9CDE964F462A50A3EB943FD55069BD80BE966490270FDC28ECB2ABD9C6FA5A942CB1CD54AF76408424D82C0C10C462CC80> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EJQAQD+AlteDIN1451Mittelschrift /AlteDIN1451Mittelschrift findfont ct_VMDictPut/EJQAQD+AlteDIN1451Mittelschrift*1 [32{/.notdef}rp /space 32{/.notdef}rp /A 5{/.notdef}rp /G 5{/.notdef}rp /M 2{/.notdef}rp /P 16{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 141{/.notdef}rp]EJQAQD+AlteDIN1451Mittelschrift nfEJQAQD+AlteDIN1451Mittelschrift*1 [12 0 0 -12 0 0 ]msf63.7998 84.9883 mo(Gain)sh61.3564 172.953 mo(Mode)sh53.0596 243.027 mo(Param A)sh42.6001 248.858 mo
107.6 248.858 li
107.6 267.358 li
42.6001 267.358 li
42.6001 248.858 li
cp
.732845 .672084 .657374 .825711 cmyk
f
42.6001 248.858 mo
107.6 248.858 li
107.6 267.358 li
42.6001 267.358 li
42.6001 248.858 li
cp
.676844 .618402 .580743 .45658 cmyk
@
.420691 .897307 .813718 .655482 cmyk
EJQAQC+DSEG14Classic-Italic*1 [12 0 0 -12 0 0 ]msf45.624 264.058 mo(~~~~~~)sh0 .993286 1 0 cmyk
%ADOBeginSubsetFont: DSEG14Classic-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQC+DSEG14Classic-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/R <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6B408E1FD77AAFA79B8A05A0088FB5699D65B9D8A63C4E4448756570B68F12D57B3686E3AC09189127C7BA6DE522FDF728C335098BD5D194F51684207BB787B3ACA613063F9913B9AFC58673DC271E508B831A8DFB3D6FA2E02985D94ED371666D7A8F8B28B90466015C7DE2CD135A6AFFC238BFE934F24B749E5390855D1B51218EABAA2067FCEFB7DA01CC6B943DCC8> |-/S <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6B408E1FD77AAFA79B8A05A0088FB5699D65B9D8A63C4E4448756570B68F12D57B3686E3AC09189127C7BA6DE522FDF728C335098B21323B50C6FB355D2FFF3032CA208F2EC4BF8C782190C8FD11E303D246ABE03CB0EE81B045A824DB6887FEC886E2B33E960CABC4023DC03CD461CC491C0F0ADA41F4DBF46316D1603C8B7E506602D1F5E6785AA26266CE4C394684F61F3E9CC502048F6E8BAC2D31092DAC2B5715C9109> |-/T <1C60D8A8C9B6A5F494BFC3206B8A0A2DA2AD98A2A0DFFC52328D91181F33AFA9BED3F325AFDE462C87618B623D2E1BFA6D81DBE83D4232B969FD2614EA2033ED89176E30F0E3C08D36D5495305D9DA5D1D45669435CA7AA45531E788D7> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQC+DSEG14Classic-Italic /Encoding getdup 82 /R putdup 83 /S putdup 84 /T putpop%ADOEndSubsetFont
/EJQAQC+DSEG14Classic-Italic*1 [65{/.notdef}rp /A /.notdef /C /.notdef /E 2{/.notdef}rp /H 5{/.notdef}rp /N 3{/.notdef}rp /R /S /T 41{/.notdef}rp /asciitilde 129{/.notdef}rp]EJQAQC+DSEG14Classic-Italic nfEJQAQC+DSEG14Classic-Italic*1 [12 0 0 -12 0 0 ]msf45.624 264.058 mo(THRESH)sh0 0 0 0 cmyk
%ADOBeginSubsetFont: AlteDIN1451Mittelschrift AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQD+AlteDIN1451Mittelschrift dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B7D98F6D224A39071B135231F148F36F92A9E56394309D57D145F532672926E7B9D7AD9A18AE717B2697C6D5460708ECFC31ABDD39E8BFFCA80E31B24D9ED0FE69B1E908BC553C0FC450F84D2882B2A4FF9629F054CB58E44AF778559656E56E12DCC419C87FC2A32E24B9B69390697238624C7B4BAB41154CECD371F42508393B7DBC937658A3BEC82F74409C16A9339B63C6E5B677972F7140A1A75741> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQD+AlteDIN1451Mittelschrift /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/EJQAQD+AlteDIN1451Mittelschrift*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /B 4{/.notdef}rp /G 5{/.notdef}rp /M 2{/.notdef}rp /P 16{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 141{/.notdef}rp]EJQAQD+AlteDIN1451Mittelschrift nfEJQAQD+AlteDIN1451Mittelschrift*1 [12 0 0 -12 0 0 ]msf53.1387 315.079 mo(Param B)sh0 .993286 1 0 cmyk
%ADOBeginSubsetFont: DSEG14Classic-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQC+DSEG14Classic-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6AE17BFD801875635A7502B9D3E6AA1CB91D02CB78A9C888A7F9B242D657C37B19AEDD80AF84238693DE5FE808D0304928378EBCB7CB554969B6730BCA32404BB72E8884D34506819947D5381E9829CC9432116EFE32844DE> |-/I <1C60D8A8C9B6A5F494BFC3206B8A0A2DA2AD98A2A0DFFC52328D91181F33AFA9BED3F325AFDE462C87618B623D2E1BFA6D81DBE83D4232B969FD2614EA2033ED89176E30F0E3C08D36D5495305D9DA5D1D45669435CA7AA45531E788212203346B7E00F1FF6505CA105D01926ECF4676ECA593C22C9B26A33FDEAE> |-/L <1C60D8A8C9B6A5F4946A5855FE2E5EB64F7A1E5344E3BA328788D0E7C5F033AB1042843F83648B2A68D0DC4BB3AA5904663203EF9AC2621F7455529FA505717A04B706C865C8CCAE645AB617461768BD2F2B3E777BEA33C6E78D85DDE0002EDF76> |-/O <1C60D8A8C9B6A5F49BDBFD018D8F7C7F2D2FAB9530A26F6E0FCFEC1BFBEBC1524B8C146766A374A28E461A825AEFB1A66AF2A9251627820A0640162587F35D2EB5CC440895CD0924791665A85333ECB69185076357D4D9FB48978964645BAFB647AE68515011822960B6E4F2F1F97D71ECA6369D9D4EDAB3EC9F5A84EFD81C0CF55A11DCA62D4907AE2D45A7FE775CEAF7780680DB58562BAFE748AEDA6184F2CBA16E933AE4EE9571C917E339404164C98D92BB5403C25DB582FD52D179> |-/P <1C60D8A8C9B6A5F49438A77D80E76FFD51DF49E94EE90600357C59549C976F245DDD1997038D019E6CC32576C2B8D5FF5678EE5C409CCFF4EAC4CA47B96E5AB7BA178A9DF8A7E0CC589DE6AE17BFD801875635A7502B9D3E6AA1CB91D02CB78A9C888A7F9B242D651D5D3C8E8856507B39D43C327765CFBB1E3A208D600C4CC38CEAC873D59533BC263CF0D2E903C6F1EA595DECC98827C097C59C3B708DA957D7021FC25FC7DF582CE9C27287731D773ACC3FE3E6803481810B86B6A150609673871DB6> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQC+DSEG14Classic-Italic /Encoding getdup 70 /F putdup 73 /I putdup 76 /L putdup 79 /O putdup 80 /P putpop%ADOEndSubsetFont
/EJQAQC+DSEG14Classic-Italic*1 [65{/.notdef}rp /A /.notdef /C /.notdef /E /F /.notdef /H /I 2{/.notdef}rp /L /.notdef /N /O /P /.notdef /R /S /T 41{/.notdef}rp /asciitilde 129{/.notdef}rp]EJQAQC+DSEG14Classic-Italic nfEJQAQC+DSEG14Classic-Italic*1 [13 0 0 -13 0 0 ]msf32.5684 117.559 mo(FLIPFLOP)sh0 0 0 0 cmyk
%ADOBeginSubsetFont: AlteDIN1451Mittelschrift AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQD+AlteDIN1451Mittelschrift dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Z <1C60D8A8C9B7B4A1306F791E42363605F2DDF3BB82AE957E6B31B5437A14646E8184622C1640D34581> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQD+AlteDIN1451Mittelschrift /Encoding getdup 90 /Z putpop%ADOEndSubsetFont
/EJQAQD+AlteDIN1451Mittelschrift*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /B 4{/.notdef}rp /G 5{/.notdef}rp /M 2{/.notdef}rp /P 9{/.notdef}rp /Z 6{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 141{/.notdef}rp]EJQAQD+AlteDIN1451Mittelschrift nfEJQAQD+AlteDIN1451Mittelschrift*1 [16 0 0 -16 0 0 ]msf70.8516 353.175 mo(Z)sh15 129.058 mo
15 95.9582 li
@
14.9541 136.325 mo
9.25391 136.325 4.6543 131.725 4.6543 126.025 cv
4.6543 120.325 9.25391 115.725 14.9541 115.725 cv
20.6543 115.725 25.2539 120.325 25.2539 126.025 cv
25.2539 131.725 20.6543 136.325 14.9541 136.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
4 ml
14.9541 136.325 mo
9.25391 136.325 4.6543 131.725 4.6543 126.025 cv
4.6543 120.325 9.25391 115.725 14.9541 115.725 cv
20.6543 115.725 25.2539 120.325 25.2539 126.025 cv
25.2539 131.725 20.6543 136.325 14.9541 136.325 cv
.749721 .679194 .670497 .901457 cmyk
@
14.9541 134.025 mo
10.5542 134.025 6.9541 130.425 6.9541 126.025 cv
6.9541 121.625 10.5542 118.025 14.9541 118.025 cv
19.354 118.025 22.9541 121.625 22.9541 126.025 cv
22.9541 130.425 19.354 134.025 14.9541 134.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
14.9541 134.025 mo
10.5542 134.025 6.9541 130.425 6.9541 126.025 cv
6.9541 121.625 10.5542 118.025 14.9541 118.025 cv
19.354 118.025 22.9541 121.625 22.9541 126.025 cv
22.9541 130.425 19.354 134.025 14.9541 134.025 cv
.740902 .625055 .575372 .495155 cmyk
@
14.9541 133.825 mo
10.6543 133.825 7.25391 130.525 7.25391 126.525 cv
7.25391 122.525 10.7539 119.225 14.9541 119.225 cv
19.1543 119.225 22.6543 122.525 22.6543 126.525 cv
22.6543 130.525 19.2539 133.825 14.9541 133.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
20.0542 127.025 mo
20.0542 129.825 17.7539 132.225 14.9541 132.225 cv
12.1543 132.225 9.854 129.925 9.854 127.025 cv
9.854 124.225 12.1543 121.825 14.9541 121.825 cv
17.7539 121.825 20.0542 124.125 20.0542 127.025 cv
.116976 .0572824 .0719005 0 cmyk
f
20.0542 126.025 mo
20.0542 128.825 17.7539 131.125 14.9541 131.125 cv
12.1543 131.125 9.854 128.825 9.854 126.025 cv
9.854 123.225 12.1543 120.925 14.9541 120.925 cv
17.7539 120.925 20.0542 123.225 20.0542 126.025 cv
.749721 .679194 .670497 .901457 cmyk
f
1 lw
10 ml
15 95.9582 mo
46.5 81.0583 li
0 0 0 0 cmyk
@
24.8354 95.9914 mo
24.8354 101.491 20.4351 105.891 14.9351 105.891 cv
9.43555 105.891 5.03516 101.491 5.03516 95.9914 cv
5.03516 90.4914 9.43555 86.091 14.9351 86.091 cv
20.3354 86.091 24.8354 90.4914 24.8354 95.9914 cv
.749721 .679194 .670497 .901457 cmyk
f
20.5352 95.9914 mo
20.5352 99.091 18.0352 101.591 14.9351 101.591 cv
11.8354 101.591 9.33545 99.091 9.33545 95.9914 cv
9.33545 92.8913 11.8354 90.3913 14.9351 90.3913 cv
17.9351 90.3913 20.5352 92.8913 20.5352 95.9914 cv
0 0 0 0 cmyk
f
15.8354 86.091 mo
15.5352 86.091 15.2354 86.091 14.9351 86.091 cv
14.5352 86.091 14.2354 86.091 13.8354 86.1911 cv
13.8354 90.6911 li
15.8354 90.6911 li
15.8354 86.091 li
cp
f
134.8 129.058 mo
134.8 95.9582 li
@
134.854 136.325 mo
129.154 136.325 124.554 131.725 124.554 126.025 cv
124.554 120.325 129.154 115.725 134.854 115.725 cv
140.554 115.725 145.154 120.325 145.154 126.025 cv
145.154 131.725 140.554 136.325 134.854 136.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
4 ml
134.854 136.325 mo
129.154 136.325 124.554 131.725 124.554 126.025 cv
124.554 120.325 129.154 115.725 134.854 115.725 cv
140.554 115.725 145.154 120.325 145.154 126.025 cv
145.154 131.725 140.554 136.325 134.854 136.325 cv
.749721 .679194 .670497 .901457 cmyk
@
134.854 134.025 mo
130.454 134.025 126.854 130.425 126.854 126.025 cv
126.854 121.625 130.454 118.025 134.854 118.025 cv
139.254 118.025 142.854 121.625 142.854 126.025 cv
142.854 130.425 139.254 134.025 134.854 134.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
134.854 134.025 mo
130.454 134.025 126.854 130.425 126.854 126.025 cv
126.854 121.625 130.454 118.025 134.854 118.025 cv
139.254 118.025 142.854 121.625 142.854 126.025 cv
142.854 130.425 139.254 134.025 134.854 134.025 cv
.740902 .625055 .575372 .495155 cmyk
@
134.854 133.825 mo
130.554 133.825 127.154 130.525 127.154 126.525 cv
127.154 122.525 130.654 119.225 134.854 119.225 cv
139.054 119.225 142.554 122.525 142.554 126.525 cv
142.554 130.525 139.154 133.825 134.854 133.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
139.954 127.025 mo
139.954 129.825 137.654 132.225 134.854 132.225 cv
132.054 132.225 129.754 129.925 129.754 127.025 cv
129.754 124.225 132.054 121.825 134.854 121.825 cv
137.654 121.825 139.954 124.125 139.954 127.025 cv
.116976 .0572824 .0719005 0 cmyk
f
139.954 126.025 mo
139.954 128.825 137.654 131.125 134.854 131.125 cv
132.054 131.125 129.754 128.825 129.754 126.025 cv
129.754 123.225 132.054 120.925 134.854 120.925 cv
137.654 120.925 139.954 123.225 139.954 126.025 cv
.749721 .679194 .670497 .901457 cmyk
f
1 lw
10 ml
134.8 95.9582 mo
103.4 81.0583 li
0 0 0 0 cmyk
@
144.835 96.091 mo
144.835 101.591 140.436 105.991 134.936 105.991 cv
129.436 105.991 125.035 101.591 125.035 96.091 cv
125.035 90.591 129.436 86.1911 134.936 86.1911 cv
140.335 86.1911 144.835 90.591 144.835 96.091 cv
.749721 .679194 .670497 .901457 cmyk
f
140.436 96.091 mo
140.436 99.1911 137.936 101.691 134.835 101.691 cv
131.735 101.691 129.235 99.1911 129.235 96.091 cv
129.235 92.9914 131.735 90.4914 134.835 90.4914 cv
137.936 90.4914 140.436 92.9914 140.436 96.091 cv
0 0 0 0 cmyk
f
135.835 86.1911 mo
135.535 86.1911 135.235 86.1911 134.936 86.1911 cv
134.535 86.1911 134.235 86.1911 133.835 86.2912 cv
133.835 90.7912 li
135.835 90.7912 li
135.835 86.1911 li
cp
f
129 171.058 mo
110.9 144.058 li
@
74.7998 147.058 mo
110.9 144.058 li
@
21 171.058 mo
38.8999 144.058 li
@
74.7998 147.058 mo
38.8999 144.058 li
@
20.9541 181.325 mo
15.2539 181.325 10.6543 176.725 10.6543 171.025 cv
10.6543 165.325 15.2539 160.725 20.9541 160.725 cv
26.6543 160.725 31.2539 165.325 31.2539 171.025 cv
31.2539 176.725 26.6543 181.325 20.9541 181.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
4 ml
20.9541 181.325 mo
15.2539 181.325 10.6543 176.725 10.6543 171.025 cv
10.6543 165.325 15.2539 160.725 20.9541 160.725 cv
26.6543 160.725 31.2539 165.325 31.2539 171.025 cv
31.2539 176.725 26.6543 181.325 20.9541 181.325 cv
.749721 .679194 .670497 .901457 cmyk
@
20.9541 179.025 mo
16.5542 179.025 12.9541 175.425 12.9541 171.025 cv
12.9541 166.625 16.5542 163.025 20.9541 163.025 cv
25.354 163.025 28.9541 166.625 28.9541 171.025 cv
28.9541 175.425 25.354 179.025 20.9541 179.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
20.9541 179.025 mo
16.5542 179.025 12.9541 175.425 12.9541 171.025 cv
12.9541 166.625 16.5542 163.025 20.9541 163.025 cv
25.354 163.025 28.9541 166.625 28.9541 171.025 cv
28.9541 175.425 25.354 179.025 20.9541 179.025 cv
.740902 .625055 .575372 .495155 cmyk
@
20.9541 178.825 mo
16.6543 178.825 13.2539 175.525 13.2539 171.525 cv
13.2539 167.525 16.7539 164.225 20.9541 164.225 cv
25.1543 164.225 28.6543 167.525 28.6543 171.525 cv
28.6543 175.525 25.2539 178.825 20.9541 178.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
26.0542 172.025 mo
26.0542 174.825 23.7539 177.225 20.9541 177.225 cv
18.1543 177.225 15.854 174.925 15.854 172.025 cv
15.854 169.225 18.1543 166.825 20.9541 166.825 cv
23.7539 166.825 26.0542 169.125 26.0542 172.025 cv
.116976 .0572824 .0719005 0 cmyk
f
26.0542 171.025 mo
26.0542 173.825 23.7539 176.125 20.9541 176.125 cv
18.1543 176.125 15.854 173.825 15.854 171.025 cv
15.854 168.225 18.1543 165.925 20.9541 165.925 cv
23.7539 165.925 26.0542 168.225 26.0542 171.025 cv
.749721 .679194 .670497 .901457 cmyk
f
128.954 181.325 mo
123.254 181.325 118.654 176.725 118.654 171.025 cv
118.654 165.325 123.254 160.725 128.954 160.725 cv
134.654 160.725 139.254 165.325 139.254 171.025 cv
139.254 176.725 134.654 181.325 128.954 181.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
128.954 181.325 mo
123.254 181.325 118.654 176.725 118.654 171.025 cv
118.654 165.325 123.254 160.725 128.954 160.725 cv
134.654 160.725 139.254 165.325 139.254 171.025 cv
139.254 176.725 134.654 181.325 128.954 181.325 cv
.749721 .679194 .670497 .901457 cmyk
@
128.954 179.025 mo
124.554 179.025 120.954 175.425 120.954 171.025 cv
120.954 166.625 124.554 163.025 128.954 163.025 cv
133.354 163.025 136.954 166.625 136.954 171.025 cv
136.954 175.425 133.354 179.025 128.954 179.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
128.954 179.025 mo
124.554 179.025 120.954 175.425 120.954 171.025 cv
120.954 166.625 124.554 163.025 128.954 163.025 cv
133.354 163.025 136.954 166.625 136.954 171.025 cv
136.954 175.425 133.354 179.025 128.954 179.025 cv
.740902 .625055 .575372 .495155 cmyk
@
128.954 178.825 mo
124.654 178.825 121.254 175.525 121.254 171.525 cv
121.254 167.525 124.754 164.225 128.954 164.225 cv
133.154 164.225 136.654 167.525 136.654 171.525 cv
136.654 175.525 133.254 178.825 128.954 178.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
134.054 172.025 mo
134.054 174.825 131.754 177.225 128.954 177.225 cv
126.154 177.225 123.854 174.925 123.854 172.025 cv
123.854 169.225 126.154 166.825 128.954 166.825 cv
131.754 166.825 134.054 169.125 134.054 172.025 cv
.116976 .0572824 .0719005 0 cmyk
f
134.054 171.025 mo
134.054 173.825 131.754 176.125 128.954 176.125 cv
126.154 176.125 123.854 173.825 123.854 171.025 cv
123.854 168.225 126.154 165.925 128.954 165.925 cv
131.754 165.925 134.054 168.225 134.054 171.025 cv
.749721 .679194 .670497 .901457 cmyk
f
90.8643 147.104 mo
90.8643 155.904 83.7637 163.004 74.9639 163.004 cv
66.1641 163.004 59.064 155.904 59.064 147.104 cv
59.064 138.304 66.1641 131.204 74.9639 131.204 cv
83.7637 131.204 90.8643 138.304 90.8643 147.104 cv
f
83.9639 147.104 mo
83.9639 152.004 79.9639 156.104 74.9639 156.104 cv
70.064 156.104 65.9639 152.104 65.9639 147.104 cv
65.9639 142.204 69.9639 138.104 74.9639 138.104 cv
79.9639 138.104 83.9639 142.104 83.9639 147.104 cv
0 0 0 0 cmyk
f
.3 lw
10 ml
87.5645 147.104 mo
87.5645 154.004 81.9639 159.704 74.9639 159.704 cv
68.064 159.704 62.3638 154.104 62.3638 147.104 cv
62.3638 140.204 67.9639 134.504 74.9639 134.504 cv
81.9639 134.504 87.5645 140.104 87.5645 147.104 cv
87.5645 147.104 li
cp
.605798 .521965 .515618 .218143 cmyk
@
76.4639 131.304 mo
75.9639 131.304 75.4639 131.204 75.064 131.204 cv
74.4639 131.204 73.8638 131.204 73.2642 131.304 cv
73.2642 138.504 li
76.4639 138.504 li
76.4639 131.304 li
cp
0 0 0 0 cmyk
f
48.9351 144.091 mo
48.9351 149.591 44.5352 153.991 39.0352 153.991 cv
33.5352 153.991 29.1353 149.591 29.1353 144.091 cv
29.1353 138.591 33.5352 134.191 39.0352 134.191 cv
44.4351 134.191 48.9351 138.591 48.9351 144.091 cv
.749721 .679194 .670497 .901457 cmyk
f
44.6353 144.091 mo
44.6353 147.191 42.1353 149.691 39.0352 149.691 cv
35.9351 149.691 33.4351 147.191 33.4351 144.091 cv
33.4351 140.991 35.9351 138.491 39.0352 138.491 cv
42.0352 138.491 44.6353 140.991 44.6353 144.091 cv
0 0 0 0 cmyk
f
39.9351 134.191 mo
39.6353 134.191 39.3354 134.191 39.0352 134.191 cv
38.6353 134.191 38.3354 134.191 37.9351 134.291 cv
37.9351 138.791 li
39.9351 138.791 li
39.9351 134.191 li
cp
f
120.936 144.091 mo
120.936 149.591 116.535 153.991 111.035 153.991 cv
105.535 153.991 101.136 149.591 101.136 144.091 cv
101.136 138.591 105.535 134.191 111.035 134.191 cv
116.436 134.191 120.936 138.591 120.936 144.091 cv
.749721 .679194 .670497 .901457 cmyk
f
116.636 144.091 mo
116.636 147.191 114.136 149.691 111.035 149.691 cv
107.936 149.691 105.436 147.191 105.436 144.091 cv
105.436 140.991 107.936 138.491 111.035 138.491 cv
114.035 138.491 116.636 140.991 116.636 144.091 cv
0 0 0 0 cmyk
f
111.936 134.191 mo
111.636 134.191 111.335 134.191 111.035 134.191 cv
110.636 134.191 110.335 134.191 109.936 134.291 cv
109.936 138.791 li
111.936 138.791 li
111.936 134.191 li
cp
f
1 lw
18 237.058 mo
35.8999 210.058 li
@
132 237.058 mo
113.9 210.058 li
@
74.8999 216.058 mo
113.9 210.058 li
@
35.8999 210.058 mo
74.8999 216.058 li
@
17.9541 247.325 mo
12.2539 247.325 7.6543 242.725 7.6543 237.025 cv
7.6543 231.325 12.2539 226.725 17.9541 226.725 cv
23.6543 226.725 28.2539 231.325 28.2539 237.025 cv
28.2539 242.725 23.6543 247.325 17.9541 247.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
4 ml
17.9541 247.325 mo
12.2539 247.325 7.6543 242.725 7.6543 237.025 cv
7.6543 231.325 12.2539 226.725 17.9541 226.725 cv
23.6543 226.725 28.2539 231.325 28.2539 237.025 cv
28.2539 242.725 23.6543 247.325 17.9541 247.325 cv
.749721 .679194 .670497 .901457 cmyk
@
17.9541 245.025 mo
13.5542 245.025 9.9541 241.425 9.9541 237.025 cv
9.9541 232.625 13.5542 229.025 17.9541 229.025 cv
22.354 229.025 25.9541 232.625 25.9541 237.025 cv
25.9541 241.425 22.354 245.025 17.9541 245.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
17.9541 245.025 mo
13.5542 245.025 9.9541 241.425 9.9541 237.025 cv
9.9541 232.625 13.5542 229.025 17.9541 229.025 cv
22.354 229.025 25.9541 232.625 25.9541 237.025 cv
25.9541 241.425 22.354 245.025 17.9541 245.025 cv
.740902 .625055 .575372 .495155 cmyk
@
17.9541 244.825 mo
13.6543 244.825 10.2539 241.525 10.2539 237.525 cv
10.2539 233.525 13.7539 230.225 17.9541 230.225 cv
22.1543 230.225 25.6543 233.525 25.6543 237.525 cv
25.6543 241.525 22.2539 244.825 17.9541 244.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
23.0542 238.025 mo
23.0542 240.825 20.7539 243.225 17.9541 243.225 cv
15.1543 243.225 12.854 240.925 12.854 238.025 cv
12.854 235.225 15.1543 232.825 17.9541 232.825 cv
20.7539 232.825 23.0542 235.125 23.0542 238.025 cv
.116976 .0572824 .0719005 0 cmyk
f
23.0542 237.025 mo
23.0542 239.825 20.7539 242.125 17.9541 242.125 cv
15.1543 242.125 12.854 239.825 12.854 237.025 cv
12.854 234.225 15.1543 231.925 17.9541 231.925 cv
20.7539 231.925 23.0542 234.225 23.0542 237.025 cv
.749721 .679194 .670497 .901457 cmyk
f
131.954 247.325 mo
126.254 247.325 121.654 242.725 121.654 237.025 cv
121.654 231.325 126.254 226.725 131.954 226.725 cv
137.654 226.725 142.254 231.325 142.254 237.025 cv
142.254 242.725 137.654 247.325 131.954 247.325 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
131.954 247.325 mo
126.254 247.325 121.654 242.725 121.654 237.025 cv
121.654 231.325 126.254 226.725 131.954 226.725 cv
137.654 226.725 142.254 231.325 142.254 237.025 cv
142.254 242.725 137.654 247.325 131.954 247.325 cv
.749721 .679194 .670497 .901457 cmyk
@
131.954 245.025 mo
127.554 245.025 123.954 241.425 123.954 237.025 cv
123.954 232.625 127.554 229.025 131.954 229.025 cv
136.354 229.025 139.954 232.625 139.954 237.025 cv
139.954 241.425 136.354 245.025 131.954 245.025 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
131.954 245.025 mo
127.554 245.025 123.954 241.425 123.954 237.025 cv
123.954 232.625 127.554 229.025 131.954 229.025 cv
136.354 229.025 139.954 232.625 139.954 237.025 cv
139.954 241.425 136.354 245.025 131.954 245.025 cv
.740902 .625055 .575372 .495155 cmyk
@
131.954 244.825 mo
127.654 244.825 124.254 241.525 124.254 237.525 cv
124.254 233.525 127.754 230.225 131.954 230.225 cv
136.154 230.225 139.654 233.525 139.654 237.525 cv
139.654 241.525 136.254 244.825 131.954 244.825 cv
.456001 .333349 .326757 .00714122 cmyk
f
137.054 238.025 mo
137.054 240.825 134.754 243.225 131.954 243.225 cv
129.154 243.225 126.854 240.925 126.854 238.025 cv
126.854 235.225 129.154 232.825 131.954 232.825 cv
134.754 232.825 137.054 235.125 137.054 238.025 cv
.116976 .0572824 .0719005 0 cmyk
f
137.054 237.025 mo
137.054 239.825 134.754 242.125 131.954 242.125 cv
129.154 242.125 126.854 239.825 126.854 237.025 cv
126.854 234.225 129.154 231.925 131.954 231.925 cv
134.754 231.925 137.054 234.225 137.054 237.025 cv
.749721 .679194 .670497 .901457 cmyk
f
45.9351 210.091 mo
45.9351 215.591 41.5352 219.991 36.0352 219.991 cv
30.5352 219.991 26.1353 215.591 26.1353 210.091 cv
26.1353 204.591 30.5352 200.191 36.0352 200.191 cv
41.4351 200.191 45.9351 204.591 45.9351 210.091 cv
f
41.6353 210.091 mo
41.6353 213.191 39.1353 215.691 36.0352 215.691 cv
32.9351 215.691 30.4351 213.191 30.4351 210.091 cv
30.4351 206.991 32.9351 204.491 36.0352 204.491 cv
39.0352 204.491 41.6353 206.991 41.6353 210.091 cv
.791196 .157412 .360967 .00173953 cmyk
f
36.9351 200.191 mo
36.6353 200.191 36.3354 200.191 36.0352 200.191 cv
35.6353 200.191 35.3354 200.191 34.9351 200.291 cv
34.9351 204.791 li
36.9351 204.791 li
36.9351 200.191 li
cp
f
123.936 210.091 mo
123.936 215.591 119.535 219.991 114.035 219.991 cv
108.535 219.991 104.136 215.591 104.136 210.091 cv
104.136 204.591 108.535 200.191 114.035 200.191 cv
119.436 200.191 123.936 204.591 123.936 210.091 cv
.749721 .679194 .670497 .901457 cmyk
f
119.636 210.091 mo
119.636 213.191 117.136 215.691 114.035 215.691 cv
110.936 215.691 108.436 213.191 108.436 210.091 cv
108.436 206.991 110.936 204.491 114.035 204.491 cv
117.035 204.491 119.636 206.991 119.636 210.091 cv
.791196 .157412 .360967 .00173953 cmyk
f
114.936 200.191 mo
114.636 200.191 114.335 200.191 114.035 200.191 cv
113.636 200.191 113.335 200.191 112.936 200.291 cv
112.936 204.791 li
114.936 204.791 li
114.936 200.191 li
cp
f
1 lw
10 ml
15 300.158 mo
36 281.959 li
0 0 0 0 cmyk
@
135 300.158 mo
114 281.959 li
@
74.8999 288.058 mo
114 281.959 li
@
36 281.959 mo
74.8999 288.058 li
@
14.9541 310.425 mo
9.25391 310.425 4.6543 305.825 4.6543 300.125 cv
4.6543 294.425 9.25391 289.825 14.9541 289.825 cv
20.6543 289.825 25.2539 294.425 25.2539 300.125 cv
25.2539 305.825 20.6543 310.425 14.9541 310.425 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
4 ml
14.9541 310.425 mo
9.25391 310.425 4.6543 305.825 4.6543 300.125 cv
4.6543 294.425 9.25391 289.825 14.9541 289.825 cv
20.6543 289.825 25.2539 294.425 25.2539 300.125 cv
25.2539 305.825 20.6543 310.425 14.9541 310.425 cv
.749721 .679194 .670497 .901457 cmyk
@
14.9541 308.125 mo
10.5542 308.125 6.9541 304.525 6.9541 300.125 cv
6.9541 295.725 10.5542 292.125 14.9541 292.125 cv
19.354 292.125 22.9541 295.725 22.9541 300.125 cv
22.9541 304.525 19.354 308.125 14.9541 308.125 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
14.9541 308.125 mo
10.5542 308.125 6.9541 304.525 6.9541 300.125 cv
6.9541 295.725 10.5542 292.125 14.9541 292.125 cv
19.354 292.125 22.9541 295.725 22.9541 300.125 cv
22.9541 304.525 19.354 308.125 14.9541 308.125 cv
.740902 .625055 .575372 .495155 cmyk
@
14.9541 307.925 mo
10.6543 307.925 7.25391 304.625 7.25391 300.625 cv
7.25391 296.625 10.7539 293.325 14.9541 293.325 cv
19.1543 293.325 22.6543 296.625 22.6543 300.625 cv
22.6543 304.625 19.2539 307.925 14.9541 307.925 cv
.456001 .333349 .326757 .00714122 cmyk
f
20.0542 301.125 mo
20.0542 303.925 17.7539 306.325 14.9541 306.325 cv
12.1543 306.325 9.854 304.025 9.854 301.125 cv
9.854 298.325 12.1543 295.925 14.9541 295.925 cv
17.7539 295.925 20.0542 298.225 20.0542 301.125 cv
.116976 .0572824 .0719005 0 cmyk
f
20.0542 300.125 mo
20.0542 302.925 17.7539 305.225 14.9541 305.225 cv
12.1543 305.225 9.854 302.925 9.854 300.125 cv
9.854 297.325 12.1543 295.025 14.9541 295.025 cv
17.7539 295.025 20.0542 297.325 20.0542 300.125 cv
.749721 .679194 .670497 .901457 cmyk
f
134.954 310.425 mo
129.254 310.425 124.654 305.825 124.654 300.125 cv
124.654 294.425 129.254 289.825 134.954 289.825 cv
140.654 289.825 145.254 294.425 145.254 300.125 cv
145.254 305.825 140.654 310.425 134.954 310.425 cv
.612421 .52224 .500694 .205905 cmyk
f
.25 lw
134.954 310.425 mo
129.254 310.425 124.654 305.825 124.654 300.125 cv
124.654 294.425 129.254 289.825 134.954 289.825 cv
140.654 289.825 145.254 294.425 145.254 300.125 cv
145.254 305.825 140.654 310.425 134.954 310.425 cv
.749721 .679194 .670497 .901457 cmyk
@
134.954 308.125 mo
130.554 308.125 126.954 304.525 126.954 300.125 cv
126.954 295.725 130.554 292.125 134.954 292.125 cv
139.354 292.125 142.954 295.725 142.954 300.125 cv
142.954 304.525 139.354 308.125 134.954 308.125 cv
.157809 .106447 .106142 0 cmyk
f
.1323 lw
134.954 308.125 mo
130.554 308.125 126.954 304.525 126.954 300.125 cv
126.954 295.725 130.554 292.125 134.954 292.125 cv
139.354 292.125 142.954 295.725 142.954 300.125 cv
142.954 304.525 139.354 308.125 134.954 308.125 cv
.740902 .625055 .575372 .495155 cmyk
@
134.954 307.925 mo
130.654 307.925 127.254 304.625 127.254 300.625 cv
127.254 296.625 130.754 293.325 134.954 293.325 cv
139.154 293.325 142.654 296.625 142.654 300.625 cv
142.654 304.625 139.254 307.925 134.954 307.925 cv
.456001 .333349 .326757 .00714122 cmyk
f
140.054 301.125 mo
140.054 303.925 137.754 306.325 134.954 306.325 cv
132.154 306.325 129.854 304.025 129.854 301.125 cv
129.854 298.325 132.154 295.925 134.954 295.925 cv
137.754 295.925 140.054 298.225 140.054 301.125 cv
.116976 .0572824 .0719005 0 cmyk
f
140.054 300.125 mo
140.054 302.925 137.754 305.225 134.954 305.225 cv
132.154 305.225 129.854 302.925 129.854 300.125 cv
129.854 297.325 132.154 295.025 134.954 295.025 cv
137.754 295.025 140.054 297.325 140.054 300.125 cv
.749721 .679194 .670497 .901457 cmyk
f
45.9351 281.991 mo
45.9351 287.491 41.5352 291.891 36.0352 291.891 cv
30.5352 291.891 26.1353 287.491 26.1353 281.991 cv
26.1353 276.491 30.5352 272.091 36.0352 272.091 cv
41.4351 272.091 45.9351 276.491 45.9351 281.991 cv
f
41.6353 281.991 mo
41.6353 285.091 39.1353 287.591 36.0352 287.591 cv
32.9351 287.591 30.4351 285.091 30.4351 281.991 cv
30.4351 278.891 32.9351 276.391 36.0352 276.391 cv
39.0352 276.391 41.6353 278.891 41.6353 281.991 cv
.756435 .514183 0 0 cmyk
f
36.9351 272.191 mo
36.6353 272.191 36.3354 272.191 36.0352 272.191 cv
35.6353 272.191 35.3354 272.191 34.9351 272.291 cv
34.9351 276.791 li
36.9351 276.791 li
36.9351 272.191 li
cp
f
123.936 281.991 mo
123.936 287.491 119.535 291.891 114.035 291.891 cv
108.535 291.891 104.136 287.491 104.136 281.991 cv
104.136 276.491 108.535 272.091 114.035 272.091 cv
119.436 272.091 123.936 276.491 123.936 281.991 cv
.749721 .679194 .670497 .901457 cmyk
f
119.636 281.991 mo
119.636 285.091 117.136 287.591 114.035 287.591 cv
110.936 287.591 108.436 285.091 108.436 281.991 cv
108.436 278.891 110.936 276.391 114.035 276.391 cv
117.035 276.391 119.636 278.891 119.636 281.991 cv
.756435 .514183 0 0 cmyk
f
114.936 272.191 mo
114.636 272.191 114.335 272.191 114.035 272.191 cv
113.636 272.191 113.335 272.191 112.936 272.291 cv
112.936 276.791 li
114.936 276.791 li
114.936 272.191 li
cp
f
1 lw
10 ml
74.7998 147.058 mo
74.7998 121.058 li
0 0 0 0 cmyk
@
75 215.058 mo
75 195.258 li
@
90.9121 216.032 mo
90.9121 224.832 83.8115 231.932 75.0122 231.932 cv
66.2119 231.932 59.1118 224.832 59.1118 216.032 cv
59.1118 207.232 66.2119 200.132 75.0122 200.132 cv
83.8115 200.232 90.9121 207.332 90.9121 216.032 cv
.749721 .679194 .670497 .901457 cmyk
f
83.9121 216.032 mo
83.9121 220.932 79.9121 225.032 74.9121 225.032 cv
69.9121 225.032 65.9121 221.032 65.9121 216.032 cv
65.9121 211.132 69.9121 207.032 74.9121 207.032 cv
79.9121 207.132 83.9121 211.132 83.9121 216.032 cv
.791196 .157412 .360967 .00173953 cmyk
f
.3 lw
87.5117 216.032 mo
87.5117 222.932 81.9121 228.632 74.9121 228.632 cv
68.0122 228.632 62.312 223.032 62.312 216.032 cv
62.312 209.132 67.9121 203.432 74.9121 203.432 cv
81.9121 203.532 87.5117 209.132 87.5117 216.032 cv
87.5117 216.032 li
cp
.605798 .521965 .515618 .218143 cmyk
@
76.4121 200.232 mo
75.9121 200.232 75.4121 200.132 75.0122 200.132 cv
74.4121 200.132 73.812 200.132 73.2119 200.232 cv
73.2119 207.432 li
76.4121 207.432 li
76.4121 200.232 li
cp
.791196 .157412 .360967 .00173953 cmyk
f
1 lw
75 267.258 mo
75 288.058 li
0 0 0 0 cmyk
@
90.8643 288.104 mo
90.8643 296.904 83.7637 304.005 74.9639 304.005 cv
66.1641 304.005 59.064 296.904 59.064 288.104 cv
59.064 279.304 66.1641 272.205 74.9639 272.205 cv
83.6641 272.205 90.8643 279.304 90.8643 288.104 cv
.749721 .679194 .670497 .901457 cmyk
f
83.8643 288.104 mo
83.8643 293.005 79.8643 297.104 74.8638 297.104 cv
69.8638 297.104 65.8638 293.104 65.8638 288.104 cv
65.8638 283.205 69.8638 279.104 74.8638 279.104 cv
79.8643 279.104 83.8643 283.104 83.8643 288.104 cv
.756435 .514183 0 0 cmyk
f
.3 lw
87.4639 288.104 mo
87.4639 295.005 81.8643 300.705 74.8638 300.705 cv
67.9639 300.705 62.2642 295.104 62.2642 288.104 cv
62.2642 281.205 67.8638 275.505 74.8638 275.505 cv
81.8643 275.505 87.4639 281.104 87.4639 288.104 cv
87.4639 288.104 li
cp
.605798 .521965 .515618 .218143 cmyk
@
76.3643 272.304 mo
75.8638 272.304 75.3638 272.205 74.9639 272.205 cv
74.3638 272.205 73.7642 272.205 73.1641 272.304 cv
73.1641 279.505 li
76.3643 279.505 li
76.3643 272.304 li
cp
.756435 .514183 0 0 cmyk
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: AlteDIN1451Mittelschrift AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQD+AlteDIN1451Mittelschrift dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B66B39508AD28B8DA134B500BB47CDD9464B77D7CD28BA964855C88853CFD9C28609A7EAD89C4CF48F65B63D4FC803B361460719CEDF3F010749D606B5C2A84681C8F2BF3E72CF681699C37DDCAE18FCBA93D91312E84BCBD675B5EFCE3021B2C7F961C12F3458B3AED144B1A86C2DE9F660F6874E32> |-/N <1C60D8A8C9B6218489B21FBD246B6C678C0425B063C77718F880EE8968A69B3CEDE2F4BDA899DC13CEB325994344> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQD+AlteDIN1451Mittelschrift /Encoding getdup 68 /D putdup 78 /N putpop%ADOEndSubsetFont
/EJQAQD+AlteDIN1451Mittelschrift*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G 5{/.notdef}rp /M /N /.notdef /P 9{/.notdef}rp /Z 6{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 141{/.notdef}rp]EJQAQD+AlteDIN1451Mittelschrift nfEJQAQD+AlteDIN1451Mittelschrift*1 [10 0 0 -10 0 0 ]msf127.317 321.713 mo(AND)sh%ADOBeginSubsetFont: AlteDIN1451Mittelschrift AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginEJQAQD+AlteDIN1451Mittelschrift dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/O <1C60D8A8C9B7D98F53C02B5ACF0BE822E9D37FA1B22A27BE8D11E0B434923730A03F4240FD4AF2CDFEE113FCF1DDF550FBF2191437CB161B357D0F2950C21DB2400B87ED49C04EE4859141E92FED8E1C7A8F8A2316605FED64811D9DF8CDF53DF14AF8667194FA3CD56B23EF7B992833A9E31B34B954BC434F1B21D0A2249E93B5555E6692C6EE3A0D5C72D281AA01BAE4D621332FCC8A32639BD6829D2984F26854D9EC0C3A2DBC6F7515B74382EC4D0A107ED79D67ADFC7034B64B9FB649C9803F099640C7EAB2223DFA077CBC62492FF7AAEEF3C06CB4B138B07B502D13573D9544E9DF4C4984A4BEB454E1C88DD37EEFE016> |-/R <1C60D8A8C9B7D98F62BA56173B019995BAA6D93A5417408A30315A4B0C99F2174E085307736ED8A84F63A175B830D5FF1DC886A60C4877493A3A528A627E04C5F47B52FFB5FC6B0D46A9A1A414A5FA0D802D69F211EC2F3F69FC57A50FCBF3E4B572AAD5A5A4F7C42D1FCF8CC131B28280> |-/X <1C60D8A8C9B7832496F8EDFC4095E224575A3A9878593FB27B93EFE7FC718AD9D6F2C35CA395439A57051A1B8CF08FDC26C68D458B347D1B986129775F0D> |-systemdict /gcheck known {setglobal} if end {end} ifendEJQAQD+AlteDIN1451Mittelschrift /Encoding getdup 79 /O putdup 82 /R putdup 88 /X putpop%ADOEndSubsetFont
/EJQAQD+AlteDIN1451Mittelschrift*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G 5{/.notdef}rp /M /N /O /P /.notdef /R 5{/.notdef}rp /X /.notdef /Z 6{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 141{/.notdef}rp]EJQAQD+AlteDIN1451Mittelschrift nfEJQAQD+AlteDIN1451Mittelschrift*1 [10 0 0 -10 0 0 ]msf128.223 345.478 mo(XOR)shEJQAQD+AlteDIN1451Mittelschrift*1 [10 0 0 -10 0 0 ]msf3.31738 321.713 mo(AND)shEJQAQD+AlteDIN1451Mittelschrift*1 [10 0 0 -10 0 0 ]msf4.22266 345.478 mo(XOR)sh58.4551 81.0573 mo
58.4551 87.6335 53.1255 92.9636 46.5488 92.9636 cv
39.9746 92.9636 34.645 87.6335 34.645 81.0573 cv
34.645 74.4831 39.9746 69.153 46.5488 69.153 cv
53.1255 69.153 58.4551 74.4831 58.4551 81.0573 cv
.749721 .679194 .670497 .901457 cmyk
f
53.2705 81.0583 mo
53.2705 84.7682 50.2612 87.778 46.5513 87.778 cv
42.8389 87.778 39.8291 84.7682 39.8291 81.0583 cv
39.8291 77.3459 42.8389 74.3386 46.5513 74.3386 cv
50.2612 74.3386 53.2705 77.3459 53.2705 81.0583 cv
0 0 0 0 cmyk
f
55.9707 81.0573 mo
55.9707 86.2604 51.752 90.4792 46.5513 90.4792 cv
41.3481 90.4792 37.1294 86.2604 37.1294 81.0573 cv
37.1294 75.8561 41.3481 71.6374 46.5513 71.6374 cv
51.752 71.6374 55.9707 75.8561 55.9707 81.0573 cv
cp
.605798 .521965 .515618 .218143 cmyk
@
47.6338 69.2072 mo
47.2778 69.1745 46.917 69.1535 46.5488 69.1535 cv
46.106 69.1535 45.6675 69.1813 45.2339 69.2282 cv
45.2339 74.6164 li
47.6338 74.6164 li
47.6338 69.2072 li
cp
0 0 0 0 cmyk
f
115.355 81.0573 mo
115.355 87.6335 110.025 92.9636 103.449 92.9636 cv
96.875 92.9636 91.5449 87.6335 91.5449 81.0573 cv
91.5449 74.4831 96.875 69.153 103.449 69.153 cv
110.025 69.153 115.355 74.4831 115.355 81.0573 cv
.749721 .679194 .670497 .901457 cmyk
f
110.171 81.0583 mo
110.171 84.7682 107.161 87.778 103.451 87.778 cv
99.7383 87.778 96.7295 84.7682 96.7295 81.0583 cv
96.7295 77.3459 99.7383 74.3386 103.451 74.3386 cv
107.161 74.3386 110.171 77.3459 110.171 81.0583 cv
0 0 0 0 cmyk
f
112.871 81.0573 mo
112.871 86.2604 108.652 90.4792 103.451 90.4792 cv
98.248 90.4792 94.0293 86.2604 94.0293 81.0573 cv
94.0293 75.8561 98.248 71.6374 103.451 71.6374 cv
108.652 71.6374 112.871 75.8561 112.871 81.0573 cv
cp
.605798 .521965 .515618 .218143 cmyk
@
104.534 69.2072 mo
104.178 69.1745 103.816 69.1535 103.449 69.1535 cv
103.006 69.1535 102.567 69.1813 102.134 69.2282 cv
102.134 74.6164 li
104.534 74.6164 li
104.534 69.2072 li
cp
0 0 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/EJQAQD+AlteDIN1451Mittelschrift*1 uf/EJQAQD+AlteDIN1451Mittelschrift uf/AlteDIN1451Mittelschrift uf/EJQAQC+DSEG14Classic-Italic*1 uf/EJQAQC+DSEG14Classic-Italic uf/DSEG14Classic-Italic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 23.0.1%%For: (Dale Johnson) ()%%Title: (AmalgamPanelDarkAllRed.eps)%%CreationDate: 06/12/2018 23:09%%Canvassize: 16383%AI9_DataStream%Gb!Q;k@4!Ae*+=CmK(cu2B@ql3[$a2JWLp^^]Zu`JUMb:a1:o=if4sh^N[Halis[GCPkS;UQJ#d3X`"EE\q'N(KQ#tX<dS%MNcV)%MR#442q&"DUO4+,j/GR!bnWU4;,F^.)X\BbEnb2-6Y<YRY3%6XPHbo'U6jFXr=,@Fee_p^?iA#KR+&s@jH[l&\HPFno.<n@h,1F:%eXUNdb^;4:Yg`+XPk80QST:!Q($G4$1E?[8>C&IR8uh+Af'E-r)'*'a^)$0=VK8W?@Me[f8ju&l]LbQgL#$i7]%\e@%%FNAA*A*C%NsL-g!6P;(n2J"Nm+3$2:5@M?!QP0aTWkcTI&TcL!q(f+Z#h`fJKK_ZRS(WI%hdY"5LLfB4)+B#4YYdBc'G38e(+$,b<]]@lNPPY%2U\J^0^:EOopjkoW1fCE:u"[>dbn(%acus-U,'Oj)$>qO<#X7!LHjh`-nZaQ-M,9Bq+o"V_pBW_`GE]'gWoG05W9F9OX0qE:EF\#%L4*<%@2gKMXYf0=F#@FhTY0cCAPR_r1k5qO:L'PcZertBaPL[GK@FP8.38P(LBd\n"%A-b!*X/Mfj47^Q9cu=U<#aF)NCR\OVAP:%7RH?=.M8ugOgS(4)6lXD#[/^DYf7jg!gNJ:iP8W*SNO,%BZN)Fg(ldKSh;h88<ef*9B'!UZI=rgkS.DMr]o"h,+qNV!,O&)U#Lp9%'t&B.8jS%V!q6;Jl&m7u#[O\a&L'![lsN*7$'<%N4U'&g7t?\uX=8[%!D(A=6uQf/IO(=VJ_'\H>52mVCb/<or/4&'B-I@@dqSS[%/Fn"[;>;/k_Pbd0HlA"(Vj.U:)o%Y/^f$!l]LjGWWC-fR8gGl$^<Ug=Q:[u_R5F[DhbL(XWH9&EK"p4k/6+7<;T0i-ZWMlVMFCXE%;LqUoPsb\f?)bX&PmVsF@uTrspgApQ.=@>/*X,FM5@H!3'E!N[+AFtpp_fk5I_mk%,5;K/juJ"MKf$VAGQfOJT<KZd-X8I'#_#+O%iA\CWBnA#n2_f\^$IT)B@@9^khW*>q@ZG_m\VRd!5Ok51Ef<0$*TMmJ6d5?ai_/3ZYS<lDI_qOm$Y$.+1YcI/)jZ*JnL]^1K&;:S%_,#:ZWPe*65;D<i%fD!V+FW_m[j%+NbZ>2p6KD\X@a<.-he!]ib]R"po8Vo@VAs(V0unNI\@?.b]l4;W+"RMnj!>@:#N*O#j/7u&%p^'T%q1eNMT&=hO-S,A!ZT*6Pk5,YN*/9!?S!RPi<d8>2Qt&_(ZG?2B^.g?>0m8rM(bXqi`11`XSi2Nh/B'us[H%#OF8QPYNdE+=%B&)O92n4SLqM406m-XQgMj*V3@aF'0,g&<:DI2a"q1EUD1;rp/Z'BSeMsUL!i].>&(:h9Ab2^[_`V&4L.>gOni&B5E'_a6n_,&!f%r"#5RpeUh-s")H?*8_@Cn\8TI?]3h:?Rgc5;^ic2MYiadj!WhFr`:N+C[iADZT(T(Hq4+Ss2no#/Ul`0V!no\F4b[*'=TL+k-+85%TJ$p.`o<6r=c"CS.I`nJhc(5;-VL+/.[#a`/*47Z)+hgmpl>7_hGq0@XT?-f]b?G,==(6]Xt%O+]GlpIs6t4XR7CiH'6oMn/s.mX%(<!d,`E)pJ^'j8JK5secngRgZZBQoZ,P`%dL>SXn:bVZGXU!;!i<jOT0_md!++s^ajAY%Qrf-pXC^Ii@S;!RH=874W6,C<EMrB""%#5e[L90b$Q>3uH4Q+!&@7)%b;-br`2^D+IG-1JH5'i<^4.Y2#a*"`/.Ij3]`-.GPe?&NV'lr71l9B+kOO1B7%BfgC<SAoT@MP1dc%]]RqE$us5;=LK>q,1gfr<Ih05,1dN*YWRR,1jCK@.?mL'M-GqR$bk)o4GL]H&cAb_2kh7XYGCq3nMe*Z8YonkNqApM']^0^&(Hrm%P$%d[ba7DV_`Salju=K;K'=*?8?'DY6)4VW0Ds(9/eu9c:n,D]*SdD58$JLV\]MZWXejki\.p^RneT)=p$Ud#nMGnBI9WGtGl8Pu%]a"0ge9`B[4hIm4GolRao9(7Ka6QsDQgg/hiMgMD4>/ptSdLcI0^c`)?Qq)72Qh"&%+1/9j.Y,G:n+9M]==ENFqan#3\![]iOAQX%=XMOAhA5%Y&['1rnEnIlC<9#YMNT+U0eLY[Y:ntj("s;*IAnVr]7>OJQBCl;I9iX\O5uJHgE_"iZrNX6#Aa-7Kl=pEdS)F.WC8bS%EDf??SF`->m0J+I.5f8:3#i==G!OXoZ$*+l(\J!@a:QB!B:7]4g:ZNd&`;P`5I;F">N@eOZQA#/%H-L/G`Mbh.HbiYBX&hs%nE,=%6\3\&o1Nmur%>.3D]^hu-#ISUb='U8n)oB`H+T-l4HKCUgd='"5W00c(&k[U:GCV!hM-ErY`\Sn.$sO1?d?&OnhM=[#`gdUO!QY-%lH'CQ9I^)<^6EQO\&[BGXA^Eh8:4M+>1<k_*O&f>RS!.GUiOdePNpjfiGh`!A?:=LOJ2plgK?/X\Ae6D==fS,U`q)^")k)8`DdH!%(/#AU_R!>Q5)YNl?37da5M^6*6*b!*In&(@\'bgTp^Y*0jR8n>Yuj$oITHLP$9Tm?4=]8NSk.gQ!!_TmM8#]h"*;0gnfgsXL`aPR%dfP"db#0O10*T@b,,K5u#(EK/I;gP_E_Yh9M64[@fEm?qs!Hk9VBo7%IRAQ!;FOQ^!j=>,ODAm-[GO$T^WNWL%+g?G7e.*6D>\TE%TJ@\G'Dhk"j[sk#mqM9_%56%2hjg4WQ%)p5F(:GT4>!C`pW9YC\F2(iZB"AE5,t'J&2D5:JbSAQ8s3c"cNp+ER?p$nKPue*+kBIP%L>XQ+lgT=^W76^;<9X9Lb+e%:Ot,WR*kUr#*HIe46!<jPEJn6%btC&]?5<@+<(81h`-kG4^L]GkqF4Vh;(C\39ekJ:*>!$MV`T0A%o(RDje23A\29#DpY447/fQQiQ/U=6<pD9WT=R,t5,H]Jd]Pkhn)/,-^i[@*S#VKjhiVZYlmtEEe(M!m)#/+9Hp'N`j:td'%cR"Wt%NpBWt5JCI,IH%n5E7\fP^P/!`V-T'+Gs:gE.OA?-BT(AQ7f?N+>V[3inT]&e<oVd_CZI0Nd1<H%[.JskF(kpjZUBJ-i!<YiJ5_$^%+aaWm-)Qo(r3#6..XB.FWmJL<o`8,i>1(bQknlB$7C5]3,^dOcj!?WBiC>p+kXjIa]\b.Ymn,GgPZBE2'>o:a^4)0)RX$?H@pS&f%<#fdiSfcDU$KgnCc5:&*M^eUErX\mbpm_<$fDOC9="2]'3A$8^"Y!.O;@.dsbsXm&%/gV$1I9cSHmeCgI"VjiV%aL(Ui4:uXgg%%%EaD(."578KF27OCIt;0*AuAZ$b+9j\8>%m!>6*P(%_S#_oJE4R,^L3PhSX-m>A0!+j\[N*LV3nN/,!L]h:SpKIK[YkmON&:?&0rL%KC_K>pI!ijDaAbGF1tpg+4GYMcXX,sCXrD"f6SBG8YlR9+K<@.koZ-IjCKd4O8qmUr@Ke=5PA/l:!PfY3dA>orlSa`H#?l7%@2mk%3N\QE8tONK+QLiP'd\b^1d6X'Se\6'3!SDc";Rc->hoaY6S+@dMsu\F5rhaDHs^Ur!1cQ'576WiGU-Dk16q#WdYd8p\9%>9CXgD/%NZf)25/^FIh'aT\W%CWHQclpkb=.41:F/d;:DNfF/W$+iFppXohGRgt-`&*NZFmj_g]YW'KJ0unhGDof8Q7GsnRR=hjtT=fQ,l[Q%'I*RGHrc<tn?N&USA]7qd%]#[RZZM2juMT2'ZE7fs#=8A\-B$'jcYSd:<TE(Wo&=jV8X(f#+/$>Ar8aCQg&#eNkr99AQdkWq+.+h%@4k%aD(b[Y3"E"=WEc7/+<ALYJ'-.Dho@]i_C-iJ_ekIT!8%gt;'e?:,`Ea'3>Y1QEET*(O%o3XC*hJN$lf$]f_X`ad07iZ3WCg@%`CR$t;Ie]G&p'5q@tK!b8Q9I%Pp7b9XXjDemZTbLP2(O[W=bthEGXmY(5'%;hMoL!9-q6K)rFZ6Ea_Y8La*3\cGGbnl2W%?33n&W%lrbO/[cR%4[MR\+/m;-2@jVpCC&tFeN%p]\!TP"%Zstd.JKl2J[Drk#*c(.(,jd2C$+Le0_j]M%N%a7.+c\^a7%3;9e5+W]hipTg%Ooit+D%p'TA`(@_rgFUF8gtEb.3@%5HIUi8>Bop$d#Jii*!FD`U1>Mme`p#Qon8cVQ[1ff*\p@)76<7Ra4<BcQ,S&oSVli#GSMeL%03EHSRKWXfU`]\IoGuEkT5hGI7W/Gn8OiDiUiMJ&eUnu4\Q0?_Xgifm4l`JkHB"PZ6r1X',e7jVjfrl/#NQB0C4M)Tdg#gr.3:OI%%VUt3IZ(*h3MI/J$HFic<2&$V5I_n)JL,VPhkop@BW8ZXB,*E5:LFGJQcXIQ/mOTEIGT/*)(kn:-+8A8p,B!`O[L*1%#Ycr:a/n&%.ZkZPb=eW*==XaK2h$bqHN=FMCJ2?kGZ:nN;*Mu'91ii\c2%HU0eRaAOH7+`r,L!@#b'ds6,jQ](<9?(N>UYYi9^0OSDuiZ(D*bE%BV$2>*'',+lq8pF75FJ\qb0nk!7(4-r;pt>'YX[R9Cl1hlEg(=.(Q3[(Voo_ErQ,d!;R?&p;FE?XL(l'GU^\Co/mRo*h9E4(A55d%Rh=PrF+femL7RMeO0H!=rILC_aT$L#+F%Bnpl"<NStEctn?("54jnV*]Li7_Map]#:?!Sc2Ya1p%0?H_FN`uL+3F%X(OH/E]+Ao>%qdEZmA%<rFCZ=*>S$N\(@"`ApoYa246[Eu\3PLe6Cr%;&hE.#+\X0C&4WriH`X'W=n_6/PU0k"P@T`2t\s(04PT2kN"+>Ae3T!3?%Ijr*Un9bu.&UTt0(;?,KoakAtZu>QL)8e^X,9=h6QVe9UNWgQf.E/BTLo[iCPW]5sGX+mr50U46d-i^!1ahHA]qLrZ&_DepFRXI4%\$5aF752^u*j;!B<?X*P;g?rBh\"U7hIGW<!7,eeXGN'0*i:>S>`U?*rDb;GU;bdRT-@pdLa^m3'sWNdH]%AdWf;:B7J'f[mB(Ml%?b*-/[ecKG[RBXX!/3)-DT?uBcZ;a_LMHW#S3Kd-2W@e@i`-9Z[tm&7WDiLU]g$<:EG`ANk3\qrqV$GY8kY'$iUSke3Oohoi"^\m%KA`Lt[=e%>\(;A?ZLIf*@:f5Be3g,@;Jj>3.f)iZr5i@drS^;$Zb.9o`";jI\6?\DSdh;IdUlSPeMhq(r'jICb]^J(]NLunnF(8&%AN&$!pRJLc'B*kqre#ci-fOu:b-9gG-Ce_bj)B"ZN2H2,*A5gYh3JB)D5Zt;'5m?Z/E'+X%2p%V;/K`f3+[lW`H]]+)5bA.pjF&\%53+5,d$p=TK3r18Y;3tq;dB88Q^LIg9SG5p<4sTj_IZfYlq10!-'V\D<-Ge8%N!rX74mJh:j,6VIktnc";#+2n.>(N]\,(,*)a%M%L+o5K4P7pAbVm,2=ic0e,RiO3d*'gE%_0HO]J!+9-p1b:s'hn`PAPQfdN\s.IYBKd!k?Tt[2h!^E5!<0D<CJ&@M*L[kI\uJ]%i-r%q!YtbAU(IYhR;d9j1e[^BZu",VFq-m?I52#D@S>p!]7F563#aq)bB%'oq,f_q/\Nn([*6.Y3D%>K,93M`q'pYgjM#nGG(q'`G.JI%``qs?F+Th+Ve\j!Ak`f(E#pr-SeF$MWuPG3)-Mt"8mu=_^5sH>(8FLt$X>'j'(=kMUZik!-m/T?"J3@6^W%ga>I;%Q<sVaS;Zsb\%'roOl*_ugQS9P%TiAH.l)F4BiD(YIf!PMnE"ORB$\t,pG)^$>jE*a`_A]aC'QAi,">T'lFL@<`ii`[!&eSq2t0%?'6a4&k],p%&_%7qjiApsBAUe7LKG9A[YtZ(Qk'P]rG0`TSK1&@bBn*c23ZG0=fmh(@d]D@?="C<=]:6Q3UMl'>1)?Mq7hh<YnN`d.k2iXA8OVTR*@%$Ke3tXF748:[ME6\$5!f@EmMF_I3*Q,6@E`O+Od_m[3ELCW83NC3ccCaf,8=[JOC_)GFQ67O9HX6!:0t1^k:kq;'G>E01E%QXeCi%[sq!!#AdXE!,-k:L>iOn/6%LY=p/NDm?F3'VW2Y5d(DUMX5PqJ)XW8Ea%\jZ>H"[e0F9Vl=tnj@eO$+m@A)&A7^,eTA=-\U(]NL"%8>j<NB"k+D&LteC6_HXBAsV>52%h-BiAp+hrQ\c._.qg;j)5gsEQmi7@"0+d)pG+bgo]P!<51TRJO`^`[9M7Kj-@TI+0>a+[0MpP%cprRA,AV)a""q5e%nc!gMusi1q$jK\1*LtTp?G[[RF<]s`=KeSk`Ys(I_3OW=6r8$*T&G%s'Xui[A6u2cFCU^S6jXF(#9\+CJ9:.%Dps5"@YM$/Z[F`/,K"EMd%:3PUSFbnVh!ij0q\_)1s-0P4WntK=g9a`?u6B!(+)_YfFST+rE;9=AilM2lfIQ+<\ooYl"2*O0"o_g%]k'093e%/LDkc2O6^Sb8=ps\71U2+)X1;?7m#fYHghh-LQN)0EBVQB0XX3`s;1le%:dW=2>Pud]'UJ6K)BA89Ig_2Z%K%^:Mujrm%!_2:^!)NIXY\!qNc%24i&]!<tZ"g53n3,7FD?V'mkboCl8[hCV5;_U'NTi\E)T3TIa:[VOS_\D2Lceimeo8),CM,u;):[@8Or^75%34-e*]+bYl)([mP6YKlN`)DWLTa=[[n0tIk('*pj5I9X`Fr5VpJH";Q*;3Q'(`>;6PbN21P-j;simC(%4JKWA'`AQOUEE./jM/%\%S]4I`"rQ+0J6-7ff9]l]K.a5C5f.OFKJn3J0,SK?'(/F0^es'_P1GqQPjC@q=eBC9^\\1KIJsUZgk$V4i7<AX):k\Xm=Vd+_!U:i%<:CcMs4CR`=KK;,)M;rC%'5Rjnm?r:l<f*2qVQflRf$5p5oF)C8uJGH<.`j9"i:5ZOGWlc=;(QkYp?3-9F.Jt_#7b@l"$$3gBFFP%BTbu]*G+68<!<,TP3EYuqhGcCs!ueUnZTaf?_M;bL<B4>;N;3.m_;2NUSNHErYH^R#4BpOq=`iF.0C,TlncYTRQ$9dV1CSrO+9SD%H:N]B<h#[:^`Q)![g*/rX5"^);?$L&AT-2-p<_5?#`/!>%WV%XTK6d;m*UXs*90ak,^tEa"0e6o_qbM3.;im"cJcoaf7p2LqI0@A%#RA#2U)5c4rhY(7B3?/Q]Dt;AAq!*c5m9+_Q`cT3kc#@hSS$!`C.Q[EBM-H?$ZtXLS:OMIC7^oS]@D^7`<O!Lk@2..O+Ui=`_HcN%/[O+4s%c^9LAE3mL6LkL`%jtj-=RDdhMP+fa7_/G?A)*;Y2uP\#L.-=5_&6=@AI.7oFH8^j3,=:)i\l2clbYRE!6@Dla[,)2Ih=n%o@7g"N6H6q06nn\4I3.d'Q(-IR@jup7u,dS+X2m0PEnC2o:O)18s^3gkat1q@Rfhr>P3JE8'h*A\uW`Cs(.%Aj:-=&m:u1KeR\]M%*+h)cFMjd!"^T?R3<%t:!oWW&6KS6&?Fh$Sk?i%bs3'5+1S50W\*IM=K>M@\f-YOBg&a^o@)cE`!O.tmhLF_'X-)@QdGY=befjWL%e'W>JL,Q3mJ!V9FErIoG)?9#5TInZQB_fg[/V!`.Bo/\q)eHn%j\TQfiCj.XCct[:S^i`@12&oMs15H?-L&:)_LgIh,N/HhMF[M2%4R=:Fg0mIJ,_b3J'U>PsWE>+r;VPMPQWj_p\j?R<mb[DK;+(^*^otaG;-+Nf)oi%;9%2%N?4K!RZ+*j)#:S^LHH>1+,$S;5&W]HB%*+Msk5Oa;+;POr]L*)b<CL`7%.f[$o(o!!91h6q=@3j3UDaTsHXb-hZ>Dbj3Ptk0pFMY6dU%P1CA0S"nV^fmZK'%nX6Y&_K`1H(+%Q/-i5LWb":!mo$HWBP)p`?Ge3IJ1,#oPhD?Ms#".):POm11..c$,1_mTs>:hBVJ=6k&YcNK3WaR96Gsf(6?BX.BZXaQA/&+"tQ,_%=blJh#A_9S/L%,M/L9dSdISfbS<H(Rd<Z_jE)#i3Y3D&s`;%R\]pU<sZH[^7$R]!l5_Tr!FM;A3n$Xb4!t?&@$^=PX1ajK`J?*gO%cX1'^lY<n_/"<YFk0L0Hbtr80ep+i9\<;tBK[OU?.(5;IL&G5RUpP@3U:Js_Wu5g^.F$-GV4\)&f@Ha.$1P?6)`b?)dImPF1PE4U%QZTK-YDQ(,.BNMr&tMK@=d53'ak#-c24O]qJ<6H.3JaZg.,;V7R&f>.`(uIqS<35u?>cZA+I4k).M"SO7L*(1V1sD-+EYPXUtD!0%Q^]iA%,LD+5ga[ah$E#>9b`mC.:XY\V6+NZ%ER3r(V;]58@n_hDH?6p(k<]\_Ma;CV3%\8I(BM-_3i67<g\TFi^]tODld)R_m"VE%f$tiN]7r*TI()lQ1lu]7YRaQfHLu6hR/lk)f%%-9L)$@=Ws(?8;HAoR+&GCM[?eJ/V>Z,-^$0,iR*IuZ619?OIg\."iNJpgFn#12%[N%#O<i55<V_8eh/;d=3,PmK:6D1"jOP3jD:clm?[H'/21*&:Y<oB/SC+>?&-QEE^PGCPkrHRiDlS'\.@X3s!%`V)g&1@XmpE'eV%)`8D0%-rRL5k$%(rc>b^[kJ)ShZ*bdWAC&&Ja;?@*@:$q/2Em75L:$el[YRb^8pG!ac*+/KiL7!#u3tm(NTj%CgMH4h'5TVU(f@u%7B!p0FiDo]c9t4_&Q#_iRE\,Ri^gIKT^c?Km#BS6]*>]1ruJouX'sVQQesm7_S<cfoCbZ=H)i??8ttY]m/kJ#;8Z#NQ^%8PPYCDP%H"Gb7Xp\Fk8n6i?$7DRIW),4pLa'P1KAMCoU5-48<XnX+a#:^q5/50#!OS;@QD*n@K_GS9$>C5/YANhMJK8>4,`cSj8c`f6?50%H%"dDi@,klVh7"*1^"=(5FSGoQ\Z^d6Di@DB8qsl9M<P_f#+%5(QG%/g*];l/F'6iZjAh&`V,<Ql2I)NrrP[a:/UFMaD#F,a"m"cPH%.g9_`DRG`m(7<fYdd&87#\TU,56.\]28,P/9tdjVLA=<\UKglr@Zl`d&Na$_?&cZn<`,Y<^.F+ZK5#oqS,sLZ-\mcB'W+"Hq+e1q%9>sO4C^g*#+GfS@h7bK5M3i$:=ph`VdMEYPa^,]Cj/0L%]so9mp5(&"Z($MRVNoo5Vj6EAhl52MDGkIS)sb9=rgP%C?R:<n\SVK.%\[>S1WHb2nqHNk&TFd5*HXEP`%gNIq]D:O.pDj*MhLc>CW`mIu<J6EK!h[MS]oQMRpu-CkbOX8hFpfrVct+Ah]"!K]/R5g_3m>C_%+hGmqm\=Re_de=A?fk;ST/$-&]n2SVMmM[YjTFGM%i2H6<1UA-./4OeK5[*7dnMb00+jrK;Wo:6!C)/MH<MaQln?#!KU9OG=8(5J%J'd*u*A9f-!u>/d>1*DW7!p.AY8##!=+;T('C/58cm<OobL/!bMDhVcd6]hFc?Fasc:YY*MZ@(150<stk,gI`h`+:%?1\f8$o&F`%_ZZCrceF:JUf<71,:1B7LA^=6%tFWH>!(AA,&o^C:3;+AYE:RP/;,C/XIjDAM\CQ6-AINS39D.*2g`M&,u5O4@#`tHq<[RFS)A.&%q\G:XY()&XZRK84Q@Z0el@UIl#8,]9P*Wt5k;j?+^C*oh_TV74raBp9.[7jE(rXH.qYpHcQa3ruZ>9."WtsP*?\MWp'Zg6e9FDJ1%&o2=b3J6usa<.s)^\Pk6HWRbZe67\sIFp&FYAQ,pEjJ'nI]nMuJ%8Fe910f4iST-?B=E$#TA?eEN^M"E9YM1]/W8*H&Q!\n`HsLB%@Q)i[o'<e`aCXdgB&WU=+%n6CW(."Lc&:<<VH"\!JR-"h@NU5gr:(STl2.qfD,bR\S:u6+*\GUrc9X3'hMe4TG$(O;Zh+Lh*k(rM%!4fAWGBUpC?RSFaeNCeTrOJYLOA?$I[aI/1*\A+qc)e3BEEiF%AGC)[m\PMg4Zls\[aE>16'RsM5\A[n6!W;b+eCTpXh;@Y)r\JW%rZur[Zk(8<C0+5`l`m#lG\+('<[mV.`)CXCcY^>P.JP:sAXdWN2V1HRYQmdEKHoIu&C)Qb\ur)7*6>iU6WON>p&'g=Q9-V6=2,"Q%rd.k##kU<-7.@nf6\GY00+n2T?4l7mI8<\/,XXue>6bbr4XPuplgg?4"RMaKP3TAA.bBUlkt:;sa?1*-`5N;M)%]lPV^.DLhR87+%hUOQI>>fpEOR\Tlig[VWP[1ACW3h%q`/Sj::=NH_4&HOVnjJ+Rp5-Cs^R&WG&iJZtOIm/V=u/W1P0]1WDtd`dSl^Iun_1aH!%@<^%O%J@&If<)iFlNL3d!OsfUZ]%;(lts3@^;`;`6:[,&<"cU0<o8GWl4Aql'L$,+u_ES7dk0eFeNMj($mQBBCbt6o,"T%>B&X#ZB7lX%_A8u:$]EILs2j'M;Km#>m38la[q4CfV(Ka%r7[$lLQ8M-=c_6N+18Y]nUArm[78E.m9tIYZor;R?/#_nl?U_%D74nKkh?:L!-rrh%MqFnfTRqlGrF&p>;`+Pdl[DO[D&q29GK$^4G40PBA.Nhr2g-\IP-W,6;859%TJuSfYD]YKp[Ich0AYHmlo,rj@W+BRY3bQMqj>(o%Etu'sfY)2"7s]$YdqtP]1Z+aWr?kMCYrM-oLZ67dETOqU[at-(i=6R:*WFCM`'I_ZIiNIfET'I'pO=4:qO2@;99e1N'?pb&:&e/I%nIX>X3M&R*WoH7tCHLa=rQR'7egHL2f4O2JDlY$/EO!-]31[58]8"eLF2'f94*p-bD"E,=jddpf/<JnPZT>Xh31KRkYHsE$jd\!4%mBcD*55TJ_I\mG7:]IK_>`XXJ(GVXo0)'1(mg?T@CKE'$]5V?8e=.sIc$M!:=#JC+]:.'PV5rnh>e+20Wrj/4:1LGF-N<.2QC^FG%?-rK0G&<h&mN<0lG/nnN+nrtS`Oi`Y?cCg.<bLK2^Lsb+:K,TnrOJCSh;cG3hn<^QqX3`%G7F2:4*sD@6K@^E-]q/74BFbHXf#F7%GkNtF<qLL#*LGsfSK<)H\*Jc]?6BoQD4tk=\dQa/)_V!AhINCDoj3,c6Jh!GC#a&cAg?d9D=PaF[3FnmBsnDBG^nnU\Be=Sp%q(Y%2nLa5;>Trkho'-@S#Cu0h7H^pmq'Icq?D$;h)CgP]_T":rgVg2rVl:V;QIP3il3nGQbLPGs"7-:qk'>'XIlq<SGo-m.cfL@*g.:O%^sfb/!g-+B/oV\5]`lQJau%H`DX;q@O*3?6r/-dBMo"a/BNoXm_4WUM%jj*KHn^'Eq\6-Xa/`T$rZ2Mt]g"B,Zd?T8\GL_$6iOr,%1R)hfk+UR@%A8C>4jR'*f=5pUkka=6BR[R`LMaNJbAct0@1Z1nm.#%7GOl\iA[^"Ulf7AF(^OS5r7h2jO<.3sP)MTYBB43*Y)p-I%[[lc5Q_):7I5F\O!F3cMo/&!nMRrD6WN2&'6IfbT8Nj5>&SaQG=4Hf<h2=7BVtimEb3b7#=64_'?Mo2-4SqIq#]OpMOl(oL*VG^Z%b@i*^rJDBN?]WTXZ>^c]83:k>T>l()Ap\:/?*(ruU-EgDR<6Dc?i7@bZd5n90e\P]C_Lr-ir5?a)c&[ED=MAGk_q`\>Mf-/peAbX%"28<_k:9db;Uj;mU/D8@'&A=<5;AOPk)&!fM_"%=O!Ts'mg,Lq=8f3b-[XOf/3.0@^>rl/D+h5.Pe+N<=f:Q(67heu]sp^0la`Xp%]p4MO,>>eA0"?5noR2"*RJpY8TYIBW!u^"gjZ\m-fEe.VY,ds,B!T]U]2p;:o>4@sY:a;'C?;0hEc3SAV2rX8kipZHZ),R?9@@=2%?fm51e'%Gq=M(A-n(u7Fna"e,nG8u+Q1^-L=*O:IGh)7Cl<!<+GVgA<f%KCiC%.7uX8?YbrbE1SIWdk[]<6e&ip8^Qa*q:&erBA\%>mZaufeo>GKj3)H/t\*6Eug=*aGgtAFe8C+R,t+8gGE7Y]mT"8^7WF@+#c>3\1_JZL%P=];5gZi[d[Fug'_\>kdNO0TfZVgR#a)0%`QiXR>9"0R]oqE$2_$+XGFR#t.hjI]4AGCCoiJIu%_K$qEZsQ9Q65"@I!P!]]N!Z^5F]eaG`o5b0sepCTXETTM2_2/)@r]/X#9>d%J5Z>b%\)!U^R)VWe+M]pWQi_+SgWXdc,)F>Xp)E0Cb>,KrmW"HL;hkB]#rlUGEKMl/7\G3G.NlugI[IJeig.E:&XAMZW@C,TJY#^%dr!!d@UC$TrCFcaCinHX?XqN2qe:@*U=[Ua$cQ`PE>iQj'J>2'J+@r,QVWk'm[iG3]=Z&DH`7`p<\@RP:GU@EZg@grht#"IN_F,5%]6=.eC\P<1gO%pi]Xps><jqm+g>fP"n&PE\pV@M\P7Q9mTB&?m'u#-!gcaM;_Mmfc;[kr"3hJ"m\kC]4rS:HIqQel$GZrqlm<J-a%)trWZKsuBjn[4RmIq6/-ZX3S$MX!&Hfk,0h.fVVV$_<[(q3:n#5<ccXS@0egS1QrQDE`N@>COo;oCo=HI.;\HOtWYma2,s>>9rl6%d*qN#B%"2<m05>Hf1"BIGb`7thci8?rV8AJ*+[s?=$tu\ka]B$^CSoK&)nhpZ8b'$mP9EUa88WlA(@+t5@\fPrn/K%a.LhVn$*s\%Hn>#-*\,hb5#;)`hH4Xh<ErG.YKs]FOET+Xn+:b*pI)dYg)YK@CYoXT*np!IDq&P5=Pr%FR(D&G/C%[:6bNq1obotc"MT@TpHt)a%/UD>A-?`&%RJ,0HJXI<-*lcTshr2*<oXl-h`jt;W1_Qp=[lU\kpM@/[-IM_P`M=M\oHs/Ib>)R9hM^XsA*.X>]P@N9o-_p,ep][K%rl*4[]66&)]B5kkYEVi.2Etu'ITaB\c!PW.Z`lSGZA[LLB<h5j<,S%?:YNK5];bPd0MGfT!m/f4FaFdM>"o4SbB8JSg"5Uds(f==%'=Sb?DsAhls*^op2O9/R(cE3,kcoPCZF]Qea6EVnjenBn7^XO!h^oetG'[/Q\V_0<__#T`o2":!4I!Rd)f5"phKsn7#Ut<\rKEYY%)0X6nMrcC%po<-;=BgYZ4!bo%kA,FjjYJ*bL-1t6ahtY#eL:M-V?eOOMVMaXK>qFeg:COGZ%)(]M5Cek&48JOhjYFRXT!8s*HB&]%E<Qq6VAI8,D-.1o=<s_GjcWrNOUNTCpF2D[`"\\lalB;D*K<mp,Y!Y@d#!Z!f7<DA$`toKD/n$Y*U.Yh\_$%mZ*&3>;nXN_aM.#>%6Bd+MEEuSS!t5ljH9(!E^NpK!r"@`[")`Db?UCI3]o]E+&k;+^;"uVP=9]?r54BC)(G1>j<eCt=%uK*r/!Q=&>B76Bc\8n38tus_%Ie8#j>V`We%djKc0>Dd(gQ-V0hr)DuP..ePh9;a3i0#a+k&@0Yn\5GTM@DGbm:lXq>-LV^L($G=HdF\*H"_k``X"!=C'1d#CKu.)%l&_<WetWCn4I<]+c/$io)n%KX),Ab:FU;64Zs.&=]pOL30K2_<b`Ej!2T,38pm3m$>\:M$-s&_`$a&(Md)8>?5BQC_ZQ[CR"0._7%SC6CE#tRd()n><lLDSR8D9[dh\_9qrQ*&YSBF8s7!^=S,RoQ[0f/3?;AAi;]hb3dp]a>(M^<'!Q[R@735M%'gY(;lV[\u5cesk#u%6BC'-D`TH+!.D3/U)Y[/^d*@"$631RIp#Dq0XRpq+@E5!n^jX3Z@"W#;Yk4MbG]PC^Bk@re,e1PaeXB6XDG/_??P;i2REM1)HS2X%=rEPm\/F<2[#e.=K$H_)Uj`O[>Uc=9LGKTdd[S'p]9)eNWmu\Z"Vkt76E6"oFbU1?aZC]pB&3QED5UTH&Yh)Pi(f+idXhgY%aU*p%KoPr/6+'6*!LCso[B\TJb5Gc$>oA&VJ<auLF6O6$?,rY,h>tmdFArASXY2GHSoA`XFsET=CU*@nZ?9?NWX`*B5R6p>VSJ(YFuEm2%6^<.2i-.stm,+<D+42RI@\L+UdB]`R7#P;a]1)?QgONN(D9DM7MA>-V6G"0C^L2LaPVl9/=NXa[65/0S$=$SBNok,#]\4<hmM@[`%nXImgq52+g"I`A+!S<o[UfLHsgmisBBn"a17Np]KcP<3AKpe4.L=(MT)A=a#=TYrUQ<:7IQ;rkf1s0fa>?m&C7Q,!-^Qg[V)q@YR%NhJpZX7^G.h2W[gGk%b!<>us6(01TbZp>.rSTY#f1>0a>6??q-'L;:J%g"NC/Vg2[)(J?6Qi*jpp#-`;,up_?/VYEi"+@o6e<CZ?%@C'1554P8eFN`nDWl'P/e+PnY3[*f&1U%Wr@%96_^3_n:XnKBYqFAJ3e?T'h;<$*(T`rTSJX!BR9`lDb*U.P5Q]BZB.Ce),oENU8%2Dci"8p1U$MM<>?L(P1+*^1!K(`5eW0X+cYda*nP\('4kTpQ;&@p.p*%9$F>$h.&:fU_24PRP2NJ]p$q%&YkO.tg1"b[S7-Vr30!%E.\^iC6H7'-b!+;I[0<hnc$dGV6:9pQ+A9P"G2!uVT3_r%j%Aq>Is^"T.l59gTKgLd(`r@@_dqAGYjYh=`rpo!u0l637UV`X7r>(%ihea,*F*!9i14-rKD9)F0YB'PUUjXOT8e=HrR\_KQjik]63$Ug)hl$NZ-3#<<-W@8r'CoHU=\4<TeoMGB/fO>/%RPa?a@PtM#Z``%0d5?<7gBXM8)"e,iCSu8#k)?2::OJGEP`Hkh%G90V2LoYJ`_"a0;Sr/h%,0g*kMqO)em0]Xb*::W8erX't\@3A]^FFgM;Ufb+DE'%lm7B<m)o<>j2p:3eS@R.IpSRt_OL<p@epr^-;"+/1\p_1TFuIf[4<'M?J!Bea0LmJG<G>nS',LSh"-d<?d5K/GkZAINa+4`">ijf%]e)nmA:_]kP$SA1LQX<,EEmo>nu^7+A*(!9qr(]-fW]1&ZQOkCqZ.rt:\\9[IRr0KiFJlJi?*f37.<,5$j`BZEg0n4SKamGV`q4t%PfDm=no*d#'#2QG`&#]e[=@aJppuB*P4dUQ!*g"dR'`?dG*.EO+O26H>=_a-P0j>JHKTor?ZJPBo$`-m<=&'LbDPdYWs_<6PVH;s%B%Pn_2+!!AP("h#aMe;\JmY)A?BIEMgnZFCDT%`fEI_YqQA>g^0gYB_pW[mh^eX8VaH92\Y;TC?5$cg]i3GE,)He?Q@e7`k>dR^G%37dUj71K@#;XXV.o:us0_+K6,Hl$ZWJL2R*@6t@cJGfoRT1#>=lQ`WX"g@lE4`@8"h:Oq*"YHB+g&'j9V[bQGI0T(Z0l/^IBsgr)%A"#[)8thj*!1L,RQE9gQ":Cem_7k;[Q18-M*GC_JFA]OGXt%f`9r+i3?AgW1RdGPIY`pe*.*EM+`4k]G%1(Iqhl<97khDWu!hcgK%?CNiDT"T!M)mkMCCcoGqYI/oSfoO7\WrY%I-^#2LV$>H/A3[94*^m5i<cpen([pWS08YaLIDS+F"2-@6ZbMMh!s+\[I0eDR1!aAf%J0sXVhq`'G*GFg$NNCV_gM/u*:*</eZnll,\lYYlXK8;.RQt0'(/r`bb)k/#q^V^TAP>DUh%T%CKmOg?1q?Y1)L&S2jab&J4URkP%hc]+C""h:6.O%^9/o9l39/^PL-j8kjPM_k_D_bA'Ni<%*)iHGG#rL0`Ih!#dMc0Wl!rXBKo2\@%B\iVj%u"&c.aUpHRT'B(E?_WH%C9/ITUD3cWMilh!a/]5_\*Z#PDb3s%4`WVQ5b[>tVmX_'KdU%hCLln_SQ,pK8@s3iipKtN'L4rlT7T4m-A.r]SdW.Gcmec/\GB/0%H<4U*LnW,sm(OC?*s5_G'Bgu'GMd-8ID7*n5P$T5:]LZOD>A$a+6\og5ej&>*_i<9QVUsj*U"e8Y\^-F=s&@hmrb(",j2Y5/r'F?%k#\MhGLWq=!M-'8$D>04jFTfc,OVYrLA-pW>LW:Y<nfA4)VFMXh6=4CD*@rm\W)d#o%fbqJ8VRh$:X/(*W6$0?ieo@D<=m%+R[?l%q6:!PL(lo+h3X=E1S3Y8!*\&)(#`.Ppk43);tV77MP+orD;Er!<Y3[Ea$rGY)Jtg/UpqF3T]@/j^$,@>F6V*XJDLo2p9JMf%sfO7%i7\RXF!?dMNO>BJLUEf;;rCl_k2Oj<c(Ajb=O"=so&V:85OIg*j[S\#NITYdmJ"cC6as8mS9m<n)JVKR'(^%4V_L\4jOjJ'eo(2V%rNt$HVfeS+ap%>"*ll@i_lBR/2S0DdGb\;ffiO5qa^>&3qsQ_hHJc]4g2g$43SFt6VhoVYcI87S8`\P'o@Nc,?i0*.bgY!hqWWi"%Mbj(-pA+[/BYFr"HT%r'1tE&_3ZOot6K:T'[gVG&9`+'[2S.=cgA9'!k\r*5>-Idk:C3B&)!@Ob=liRP1HXWh%Q8YR,9gZ4+[0!$%fulp]V"=6<Td"utQAkV,A"-R#3Je9`YhgZFRPgGC6aN8_DJ;QT$fTj<P+B/NJAGfpRgKe2*V`V<j*`VMFr)[Tn!+Kh#IY7k&QE1_%Wrs.'iT\n.$Uhd2#1h`/6)HSD>Jts?%W[2mhFh)(qH80pN<YPj\<AAU]neQjge9<UAGGG8LP@m@*TKdMTYMIV-r$AMMH*2S;o2ok%:b^Zr5'T:KJA/[3!X3K33i]F];Qs]^rq`Q"e6O#H^3QC%\J46RiKXJ(FW;T%i/OYgnVDkLOiq=&0\Dq<M..Bg!KBmfT'Nkr3ma8g%6Ni:[$\s[A3i!&rN?'j+-L>^4n>-='H/gQ+9j5AHdZMl\$HEVp5_3DGr"3,>q[-M6*jgKqmclrPT[4dC\#BHn%:DbNLaC`FmjbD>%Ej&`T8=CqsIebaER>0*=M&\BM?N?O%@ZpMJXQ-l(DmJUH`t+@3CqBHO7XPgB2-GQjM(1lKfg%P?q'ZGq7:E-EO5iUchLjIM!)qoa%Ipoaq_`30R,rkfUF7#\u9`Tab2RmkFhR)nE!3cRM!K^^<G-1QaSK+Xp<-mVBh!"s)%):.ZG3p/i3Ib6FNs*E&U:FW96l%.=-l9`6%VW<CPG(DS9+guVKN@Fo8hF\LLE8Lp0P]AsW/N^M(5]^Lm;Iq)IKY2:N;KaPZ8-RqlRl!eaO*W"I?[Kq<,F3rmW5n,bOr+Pa3%q$[%lF<cON9Gm9>4%)ZJM$)ol*hf3JGo(23[.Iq%m%F^p>[BT`\"-^O(<^,SdB!P<afjE=4q3ZFL&-grmGtlW:J!+H4J'.#c[>7[Jo-T%n$<8l*%os?b,fS;oQDdljJiI(@Br)-ngPgF,68q6J"Z(P$*^?6MCP8K"I*I+,aihsKq5MthNd%j]V^<UJ*.$)]bupqA<-r`50K(L%?(nF([T.Z#Nod85b*Sd6<usfaFlpE;7[h:FlU>+rl:"l]?46$hO/csN`O5^%r!O55np;g13^I^5.$\k(P,a7V_2eiGAg59[mDVTt%ASeV2eJP&oV$e=i2Xhs8'93/]W]Z:U?IQAcNu_/e_W91SWaFWK.UoUAgZ@(:2i-hm>;A=KB0^r4?^qm2Rt?<&6/25o7>%TsV\;"e%,`'^gL8=JmHWj6L=cR%$O(!^)'X'gPX+=>.+qc@!Pecn[AECS[pVM$@"T+%]-E/I/+k6Ds?-=`?6e*um;SL"D7GTN:4@Y6-eRt*\%T;B!m%`'2&pKNuj@K?5MSZZBVlTJ75H5a)HM^SqVnjs:oL<'C[(n2:53<:'*9$"_[+Jn,H[2subCSq%]:*Z*#fB8L/?eVL4IMSj7%(?Cn6$Q^o/(8k2EW\2U`OsO'B[V1kME+S)j3C]R'A!-?p)*NshS6=tW/[.HYrOsFFDRqC(@`Nf8Oi$]\?Z1HlP3C>opOhij@<u=V%hCH?ZPU#_YHfatT@3f?0"(a<YX3.!8e#^/7@O&$"_"bE7jpoM[rC:.a/G1G51hc-/%nB#BhM8%s+6$uYU?oBf&(WR5'Y^Cu,4_.G%%[H6d@rg;3Xf<5:)\fkQU*=<"rNW&'8m3e8+C3jb.C#P(^D/')IVca-"q_IO!3Mp6:X/7Qg1&Pt4uU0E2Vp8_BU&-f4-K^GSq=!9%h&GgP;#h\BO6[qb1roJX[HMb:gGH+=[95[J[)bk=Q2C+R"Z8+[W(EW#H&tjbA,#H`!V$S99YNaN"4FqI0W_4jXI(2TE=0#V)tULY%O'.>m:>Ke%>s.CCYBS!=1qU\,C5(X_\+2.h3gLnrPu1&kj3Yccm%E?=l+_"&86j.Xfu:)KIlBaKT&p9R`B;/AedZOKDA?bd.V#@9%5!TU$nfah160]LBOI]ah.6AaAF,MB"j]:_-`f)^F<tg]d;3,EZC`mpu`5[TpU+26n)A&_XM]CStVUotO9Uc9[iC\b%ErG42T.!\)%\k]=7+C[@H&8(@dAgB^^%.<kVlc75KrFK9$>JR2m:H#,9!$Y2'+?>cjA5Ue@H^=+KJjbg#)sbsS!1A1#DXFeG!:DM/N(KCEN3P$?%7r.&EVG>#ARIOkIA<hQ8`]^f:lTG+U.Ug(=iNa&fT'e+\Ar?O.C$fH;eQcZ''+EBN\&t_^g7GC0T0&L*'FIFnAjt5Tf<?hAA'r1?%Snibn5k;F2PYS-h(5pXh4bq<^W6?Q]HH]MUUR;HgQ#(nGbIc-$9HFt)e%?`U^Bs@_'Kp)I,]5O."Y1hBRN&#A-*5=gD[?+#q"@f=%[S(84S8;2D?]"ZZX3l5D;58tE^tge\[*;9)LSl1:dFW&h727.+RW\fT<n8rZ3&.2U/5G]59q5mFT-*_`Rb>Cc>3uHP->WQ9BJ`PD%MFLO$opMcA%!/VN*k=b(9tf>?o/Q$LJ@r_fg/6*d+mILM\sK^gV,hp@qsOB'Dh$$^YnO@lQaQfHg1&'5Kahdi)>08rXRCea,"HtP%.X4O>N-fWLVU\B9rS@+M7l*>`g.f;_knp8Dj4;#<URo.F&?=,!j*KSTh+E<':kSu%F4encc#204$Y1-V+4IWPn%\c!4h.D!$O(Bm%Lc#<]/:@;MY6YiaZb?Gr)pKk,eJ)V+b`"C^Pmt+4O!Fq105+-nrHirC#28GQr]R>oh\I8N`BZStrk2Gb#4";+^R*NggHn?Sq[qEK%8N36"D5"poLc#U@=MnbbMZ>=UX^RjPZ%g]';l\=tAeH8!KBS:!Al;Ze*E"Cs;$9,hKY\MYFRKF!9apBV`H:PQQ-Jr2kh;JKT4;KE%\=(0ET+u^`R8mu?ISIfqdKs4&(=O-jH4a%9S^b/j!OF&t)?AT/h_5Kt-P+Z#R7&a)e.+p9=h,m"9+_;k7n4$#QX!KrcFDRD<2MO"%@s790eGQO+Wno^j&.^ZGj2i3\"&_]CL;Kf'hf<et)P/Wf:S@+>b9Xq1,p6\/.@n8YfsRiM[g!eGOjk:PaR\GUj0s$6oNLL%EoCl/%;.`%rqYE3oqAFCfGJPMRC_!"b"s)(4B??jrc_.U(c]^_oT0]Br(-FX5:-XBVi]L!HSULb`MCG)>LJC'd%dr.mNZ:(pTFZA%K#d!"%l"A@71@.cYU!k[8jWgCf6`6PBB/j7415AUL!6$N[[[>8A\lp&6TVYtc4:at<7P6tT<IL[eTi=u$lBNT6]1g%VV[%)L>&q3`c]np<%L;B<TPMRtH:J#HkO60A2H_$S/lGaO1<cUR2ZHfP^;G.0lcLI1H]YZ,g,ccflNRhE!BUV,[`I5g_0ph8#Y+I%UJ<H;qkZSiVmSdcp%5"^Ql.ikE"]&o*=3FSJA8V&J.f/-E:[%i)-&`76SBF`8QU?Ipd@4ouD*&\"s]pM>:E`nq/\R>j.rU?X+0\+FO=:'7`ZCB6>&/114%R-]!0W(JB)od-h#],3r&1"sMV8BV#9&QkIC;6I8UkpeQ95(de2M4c@g@rdbo\RKa7CH1OS.q4AbehBT>R0n4e^EsR1iCMbJfH)_>%B.hpeE/$A"%iiU_j7fkoHV+L#FN+YaorK1r<5V`a2,34TSX@H1Yep0c4MJ0grX0EGO$61W^5T)_[>rt_KuPOoFk4?dNFsl;8KP])%9J+c=j-)te:M;u&JnRA!k/b\%G<q>Cr<"Ou:Qa>68on#I<+`A7r\0?MjNJT1Ut2i%UGuki'nR%<'Jkp,m&r0kVXXM_^NNu7D,cor%g1GP@41fgjgs;9b=`\.RKu$M.iG&1W66CrMO+lb(rSDC7Y]k_SHFeIZLq^4,.s>F(*de/HfGh6C;7'N\+Akl]B>h$.Z5]>sELBIp%g%Sp4Ro/'%iog;eraXShO<Z,.6b6?s3^H76go'D"MI%PL=/sJfrm^"XUsUkp44=H0)($[*[.H=>pA2W10''F<XD6(Bo#Er&:(p4$%-@1&6&_p7Va3='flZ\iKcDXfZnu8uZ/A.`H)N'U?jMpSV$ltQh,;L%tJT?$<6q0,Qm]_M+EDi=[aH_][nq]uhOe.9g&XhDP]fYr.%FCl^P;+JW<->]Bj8o8QpVMGZE3A,BX$fd$O+H:DWP%Jk@dGjkaL^Z5JJ8&\o<e23dTrCOm!65RB6TZbA,F_1mq0Al-A0>+9VH.dX%VruhVPanLXOVN/?RJ'[LLO/p_e6ecKFI%WO>5(pam&(1X>n#t2X].#<cremoll0Ok("<8[GtoLl960uq7=/M?R-)g#Mpo%dJi5hO%IoI&3YFAWPCFZN*Ij*14Ws9eX9Vmha`\$<-8Y2#KVc]n\iI";o9PVU]WLc+;-g&=;ZsTHiHoR&5`1"9$oALrM-HV'*@=bn&52>*I%<0,.V;d5q&lT&lIh!l8]LZH>jAdb1V*tESVHPphdcA.#a`Vkb*K*GN-DQ&[.GK`5rLZcRK^9>(hmTfR,I'8cI`0nr,1H"KVo>P_t%,uJXG7s^@dGSRSW:BDl8*OR4ln<=WPR91,:R.2L!n%(;U]"(Eu$2I;tK[e=;8+dk/XbC@=E,XJE[kbePkW87r1:^dU3oahi-(4<=%W[PDQ4!8-M`NsBoo?/%p63S'BpFP,sZ)0gqqqPVJ<<paq@OR]$Y]oZdA9#lr<d&dJHs(4pUWn/Gd#&(PG!e\Mb&"o0l.lp$,4C3*%m+m6Y3Fj\CmZ!uf%X7:tX0O^-VHqG`0dA<5<7qm$VKatI%J%K^/ao^Rs.1M]Q*M9DU2ido.V1CnE\ruB9%d\:a@N.EN/=>LUQ!^#%ZXfjqSLGfVktDto:M7g@I58PHZr'ApW7V<#DcYB+MBt\M<7qHok$gJ'&O(*?m@gLuqX\1Z8qk/;,tTk^rkSKR<&iE%iNoH!)05'p%WGlNU.8>OQY3^sD34(aFODX9D8qk`"&TM>2gqI9sSm/n;NUZI"_F'ADU,+TGG[?r<V]a:!R9W_q.m*Oa$'!Rsb$Qs2OeJc@[A9e4%,SQU`:A8No5bu#+l0Zb(o+,sZeJ]9[^"p%<;VIUHQo5F`mtGDo$"ql4RD?325!/Z]*fJl&!klo84T#'jSqC@(a+g?&d9kf\ia)>A%K?&o-&qSIu&UqLt3R\J[=p:5oAaYm9"cV86:?f$1ndM@^/Wr]+B:W>^>j0[%c"+:[:b"1TT`3-UpUpdXKH2,6rMGukp[Y>Nm.R3@%@5kpdBEGS$iN_*(XUMh(hK`^eNWc<?\2\`_ZiDqoIidLN@j04!9Qkd1":Ee.V3bU\<mp'"#Zc3lhnpZ/WKh\)Rpid_alZopa_l[5%SgI9YQL%!iQS>5)@970Q2/-V\O'+d_.$=B4G%GO5Uj;In(Y9'2VmlF^>*p`&rS/ujL?0'Ahp:k792SGH.8MK4T5\hkR80,koUbg#%f@o^k)UJDKL6Wd[:f/tYep,<=gk5:dcOddTe<W&8pJ`l:8(2W_1r<"f;%pWaXA%[oR6h4i^k]#%13\nOqO4I+T-U<M?.q@hcg]R!%F*s-4^;arkFO!>H.>D(3lh\nKLn&'WBO#8!Ln&be<)6JUcG.F:k3LB,\8GK,P'Z0r,%Y^!K6`]=TssXcQOAFe<%R=X>u/P=;o9/X%5Fj[$:+_f-lf>80Zg#uPD3_Fe:X#\7,>F]15$'Y5\bXBHZft.p5+\9=Vj9u"9[m61Rndhi!Sc_KflYrKT[0$#-Z;SH9;fC_i_eBN%\l%e"A^dX?d](L)SsE*[^U>N`M`&^=Zfr_CV1i/8e^_)UA^dV)h'd=W:X>n:;m#UsH&c]%[9Pc3IS+7oVGhR&Kq44LQ;+:.IQ5c&%c>5Q%';j';9m?@@mkNL;R_IldZg#te_W*YRZcVXo*'6-L:3UR$fs9klEp8NYau_GL:9=S8QSY`nNl\(rhm;Y(flUtgW3R)UM:m")%l]]Y_9rH!;MpkoUS'Rt\m/(G?VGguZEYk1nZg#tO^dJWQ=uMokV76RQEuCtJ!FXtu1C2)-J2R;-S+qD%9dS4>M$"HPe9@-iF*Pi^%SR'BemF0>pbJ7(H(+5\TVm^uipcLa8oBOQ\X?g#PAbUKFUm\$^[A/c-;/V-O^$_Ykk49N6<G*ALW;0+q"$RTK!/b(-FHBCDkCZSD%2%2mQ&UQ`EA]dM2='Od2#c:Q=bu^>AK,G\NB50<RaiE1.<^^UCFEc)X`2q*9G=S3iFmq,0CAh`4TY"^^P[qhi*PFZ4TO[DsG6tcB%Gn!_R39KY%P9u;Rk"_?oCqT]1W+56hmL*)t`XRs]k6cI2L'k_$80iN[QrHe/<T]1-E4Y@j0*#%pXj5^Kc]IcIo=L&gCCT"qOJF)f%/5G3c-290H/q/+I>$Z@"U&#Y+>)UI0Rc0,!7+/"ke<014'=R,=JM<HFFEkK1kN%)IK^+MsTg32P>7K+h*.FuiEZl.T2KbV88$A?A%?AjYdI&Eur,+@K`C7fHi#ZUoM=q3S@dAoC#bj8dp[;uto"poL/,h@;?Ghn'9Z*o"f>ld5kJq'\j?YRBpK6S7`Zi-(7ZrZSq6mAMR%acT7hnh('S\jMn.YeM&349dF55J<s8qV02B3_NqKP3*EQ0\jlG*A)'p"N/L.e2^e=I=H1uj!-?%ob&-9T/#t_jQ*K7%#DrFlk4h`%flQ.Q=/R"hUOBM8l<737/t/aJ^AJ/63W;3OL=`Q5Z3'1J(%iGX16LO,I?+4titLi3k.BRY-f"*[>HKmFm`9:E38s:Ybf9hVM=aTd%48JA\mY&4DS<RYCQ8X(fhJ"@m8MlCk)0b3ndlZM`G#m=B&o249K5u$l,P9X;iGOZ^mb>8R=jKn@VZ7\mFF!o:?fPZXo.bK#@]aH(%'WgI+M7'Q'(%&&B:82_k#B*M:U+JYoVrY<;)GGX?io0_#I<Ii3$/C0(:k)cCWGW!?HILYM7WBKAM);)gkLd\geFn[^Zfa@V!*08Y%mCF8n],1oTVE\lUMHe4`Q8mL+'!u5rr#f!,EBPi=XO?MYQK&<L1*[AHD.Y5<>RSk26"Q(WEbU8_@joX;BY&qNbpg[rm[sB"`oA*J%cSM&A5A!+"<Ol^/@r!QPW>sO,o@ARbA]fdR3SSP7K8j=A7qEK2'035b4?A\H4dt#U#U"9TEK;LL,k5=$o%M)Q"Wlk'_)*IT=21D)%Ord<_lO\XHW(Zosq#pWGk&U@arAY[DSg?D7F1%IY3Q=RUjLJ21m<lEC4%r9B.6lt?m9$LPCT_42Y^$G5LRCUqS6,I'\PLc"5ORSc%Z;O6#V"Rf[R^S/]oX0kO5';BVM)_DseS$80<VAi]W]Z']rgVQRCSdo-k/3ku$"WOR:3qqn4>kB50n7\F_M_3;\L69<.gZ`!r^fkM%Q)EShPF=bYb/_bZ#1/%Z3=GQc$D:4VEF<LOgqP>,d0.U0^2ND-5`']3i_c5P:bk#'QZ-&J.7=Jcbod(KIdnkS]?ssNX-[YU))F/(%>$$Ah3Ln2+j>&Ie1MI[>;SD78nf8OZ*UkINVrmITc+gV,<:$1@_F^mh[9X0ZCsZMToRp/een16W.C+HsI/^g]eW)h<9X;[/ZXQG,%l$+]rmS%KoA<s[Ii33D!Bfb%*&+HQHa:^=(5.OZ0TH0;_ApF<3q5cFQOn,;G<PW'i9s7EOS),VHQ.:LJ8;3'lBePCn`&]K6.$<]X%07'\+>)ui79dnNA944_u=3&:I<CX/F!G-$<_(jTJ69D79")i2qn$?hRhV)Eu!.G7.:*pFRLH02jBUJ.`+4i7_++sB'B#`("qc]?4%0u3s5!&Xrd_V.k.N%p_RV@71<9(H.uSX.qR\V6PV\5s[4R-9<)cEds:W;CjaVD3,1CbXLN*"I]0GM67&RgK9h@cJ3Zc1'!E4=#ue%q#/(H3H6<.WYup/@lBH#V*(UK^c`kel[4uF9"dVJ/dAA?$7Lt[S<RN+d(pne-uH/+ePJ$cNQY6$Abt9-Z$KU>P\+XMfhshs:5f*;%4D+J'<Bj35)d+.WRDHGRW`?%d$s#6*MTu6I.H`3WWm!GhkCC\`AhFVSR).#.+a>_GD3""[$Yt*EL,jd/`p22-5kFl7BN/Ci$d`]"%TU%NS/dp$B%\T57Z?@"VfpoHuht!/A2kq?XaXLglA-&.D!JI_lj0Ja1jo>b[01TRSR`tjqClEc.M0^X]j9)[fV4J"1AtLQk--<a4%J+-8u]K_ASL'=Isb,6#/49)"%HVq;&jA8%V\,8`,jYIl$TB/m54A)WAE$nC@PYZ3N[IYE]Vj1n7hF%*t4=.=]dds%*N$3i'?k_`"%l&Tk-p4bWl>X&ZTb+7gANkM.E\UN_q)bU-85I7D-:HR0(aLX0QQHaF4qWSZhLqt-\Y+Me`p.k9B0#)H,>X/0E/(uM/%m/B=J#sFU%qTa&_T/uH9;uKJ9j>+2J;3K%Dd^ai'l^<"BJ*ORn>T0;*3;7s5V=(mCk"bt;j]k#a>O@2e%pu$1I]f;la&UBf4Q9U1Xdm>*.7lFE%Y2?tf.m;EYqu"UScLj7Z/'ZSSIV*br3rN;J).%ZfqAlgJ>4l.86Y5VoF8aU(i=g0+4cdpZaYQ,An'E,S<XXFuQ?3$&\u5DH[H6rA%qWXX;-gX-@ijjO7M[D:91-5285<W%jQEXZ?ENUCui*-(Y5H$0[P4tVrWo"t&Bud,q.X]F7ch15UCMtJI9Q-,dl_j1U(nJ]k9&>2&%M_YW`oQbgs36-n24P.na2@"<_\UKD?;fk@F*o0>YlR.=jGH.:h%TLK=lZYZrg:=MjH[#dqo5m@e;uI2/7A+k-hgst\S_afU:A$^J%4MF1G5BY934/EmR[4(&hLE4@3XA&@f^Vb6Ed6?/Xhj'MON9DTm(nKu*3\0TnF8_mCgcs>-0=1Z!F8b_9U"[+:*HnTXQ9KQQ4P4`)%@hd0CHQM'YCSeu@peK\p9''#:5&uTPI&EV&-^dsiZZl8.kPFG`[5<*$3Ug9<]t(]:B2$LZEh9X5oon``FjdgLqSRK@B5rZIr<t]0%Y+-l1;uK\9Pt.A1GOXn6UX&P]Et%"Ycb=1>bdi2&%4dt6-cpiuCiu;5Q,Sj$)/^4TBpN8Sp!]P<;/;M.cLoZ)$RN_0B@iS6f?_rO%d`L\KkpOElZT+"1f1uPrM+$^$p3X`OYPVN8(W!e'8Q]scLDP/?UJ4FqUe5=p9lgdXY>LN8]iXI:+t0td\tTIE'r<Xd0BZTkm@h]M%[L9"#3@8tsN60)o/!6H]`;hUdm3WPn>eBQ*iJ@R/3btlhT..)4<MY_)r-7a6S:ksON"PId=Wr0nc92c]FIN2eH)BNG?ElNj@t!>`%bBN8#=\4s$A>N*UPL[J:JSZS>De.nqF\"E=Rh48`E6$'qs11HZrX;8,cb5j1]a".&p=?\_cn8,GK+e"-RaoN@D<RDSf7HZdbP0p?%^Fhaa/:/1TZ^^k_K&*M520P>>^2<6&_Di6HUip!TkP)!I9t6&BA&0$SH>#7d[eF+?=iZ[7='Ukis3BVGIs!Lq>PE:XoQMg&GP;$!%8be!=5kb`Z?4J;$Xrl"9rX)>G$PMgu,OB5@Rh*Tr=6]G,lr*:oSd$2+cXZ_/+cms5:GV'\nR#T,1TJYcli?+XaKMK(?Ct-q`A!U1%B+'mS=gHJ(WfU6XWm,EZ:Eu)s.O9dmrE%r#3fVRBEtZ[XT.mm&?X:HoG(mhoH\pC'Z<(h>CkkC=:2oaS7Tqi#UV[>p7qDqO`dGeH%B*Of#c\*Z:gL,p+/c<,/7r#Jh@+b,Y3!L4dKr8e%_kT';&3Y#$Ms")jElk.S>NH[%`[5&BHM[9#!mY)jF&T,jn`SoFdeCK+6'$JO%6]]+c2%1=>J(]I%Hn64dhnU1>:'nsZgqk]T4Mu(I@mTT\SJrZnqh=`)!&"H0AMFmNQQb=qYeSt?^4FqL8$@:*K#Ll_dUA"AB4Dt`%d1:9YnRVD")5$\S.Xu%_q$4H\p]-\j7[AO##tZ1clooJ7PQiR#63qN@WYmIce165Xc1sfb8Kh.c61G!HVnp&9QsZm*Y-pm2)k8!F%GfKg7G;q+A)LOU1gdQj'_7b1[8p[9;CC2Zr]+589kD6XS*p<jdLN&AaU)8HJ,[=cp!oJ$Cdm?"'C59!2'H.CCiKoEdh!E7Zi+X":%6,]86N-M#O&;EMt*@Wa!ml8LA[.cA#61u;HdDhMc_0\df%)$T/Kp,rW@C%hkeRqa[Od+?dL$b@&s5O9Pa?IW3o#ZrT#MFW`pU*AQ%LU5kpT_U/`[)Q1sEI%A6"l$X.bn/i)P+MfMoLDM4=&:NA6C:3<f,B@T5\\m13^[W\(u]r2hEI'aM3P\qTDKB!Nl)4`\:X]q/qfn1%L>\1eX%7`s+S"4bh#gaQQhPdB2oKK"K$DodkXTk/'0=3"6Hdso;2!Z__W$M\GIJ*:H0F"LD\'mJ;S>PA6ou]jl5#*$X%P3-&WCDQ%\Z7GId#Tk),O1.K`Xo9QMX072F!Bm!d8Q`LPUkEkj:OQgCg+gG8#8&O%J(+dGB\<DbWS8:G7""G%s'mD]1u>JO_0K/onbS5m[(Or%B"@Z:DjI^9B5q"!XYA'Iqe0%`IT.D\1EW`a#FOf=Xi4H4cIm@n]M7/qb%.Gtn_.)WX7P3>Hi>?X%&Ba?\.0&^2^05`iKP91"^ZP`%<u`+(1I&&u5<!+tAdcG??+.0Lo_?Ck,X%h1-_0]<hKT/`_;I*27JfISK:.@Y)*\:PUb#Q7Jn>.(oLQ&BU!j1q8;Nb=UoL&\=0+sC%#G3rN9'aA"FUqZC:'J`#(Z1a*XL>)ndCJBN#$Ma1i9bKbp@&H-eA>aD:l"tOLEmW\YV)*8gWL<<MR4d/+6(:km0=?aQ&hj3cAu-F%HZ4Lk+R1V(6);u.l8f#kiP#C9akfb^CR/U`fSffKWt1B)UXtRFNXWC<55Fu"Xme7M%dfu%K*=$/D11@M^o2$0Y(Lr(1%=M3N4Luu%T'bnH3j8;+(cmP&Ig*]RIo\#6Xq6.F3HolbnN&k;d""U?ml;F1BlQU)hkL6,,E$6F3A-U`dr+4,pbDB6(*enl:AqaCG+flY,MpE<%/Jh="HAOqP@Y26`=5"n(EC[a;d4,lEd(iMf(J"Q*+[b+p>GQ#\;8Qg].N9f?hu$@'h.r@D5]2>Xb#]FF\9/UFBI4I9#)bb"c(>$L%)_YT<ng^*#hC"A;a2MEu6k+D/4B;?&hgdo1OMH9Y>`cGLLYtJf`7tJEKrXVD^MY`Qh#?*G%2h:X0_g&b<?%"Nl7j$q1tW<JFn/J)%keE.r0;HhO+p]497h2N!Qd22%7[NLf4?TasnmjmN"fU]2I7<!nWAL&n:_QaK)NnULPS;L<-j52[FGYYbaH6F%I3/2T0boC!lFJ84%e4gQNVqJ8+JC1b3RXJ(n>FqtOqoD=<\]Ro(g=p)-8t$!lQ2`>n%2!`)!rKBlW`%/%TGcVsP>JUV$15p>Y678a]*s$S-rO4KSd^h1%@saje4H$R:<.BO3.Zep,!R?H`eDU5o3pIolmnNE[rVg2EC@m=cE-N:WjT(E$%i+:A^`7c@DNBGu`;6ifi"m9&g8PHfe2m\*qKQAF%^K'lJ\C^uUG)Ctb)$->Rb?[<9-?K"ArEZ7Am>p/e"07s$d_/Di!5I[^Y40th.]1Cg@A(hnAj3%t:]-3rKfA<(Ed^?VM=&"ripB6q%a)-'"l2*ms.9]82;[N?4==h\ObP+m_l/#Z!Bm,g2m"e7(pZA/HVJ17Qr&V,Xd+DA3F)\9GML0!5Qj9'o4QJ8/Am1RI4SRs,p6<_u%k/7!mD)'iHc]]jJTnCc-NF*a8/0!9ti=UK]k9>q>Hr5*PhFlDaeL]T07=RaH/PZr^_]$F%>Yjd&HMD?0_@AP.K1C;s!,*k`*592g%5%3>NS7V`mFcu4eT%JZt%3\4cKbpb$!]#up-1%O#.29@@Wq<bB<:8ahp7T`R--NJFZECmo[sqT$I,>n+I]b(+7uU[b2r=LigZb]J%K\grM1>jE:V.H@Nc@M*O4T:W7?Mo%?[C=(+JF'Q&0!?cKTdTh[0j$OBH0kFN-apBC[k1?BIW+&9fM-eq"r3]]ObA@13J;Jh_T`?)%Rbp&"q>l8aVo?IPC7!e\31m*,B[ftUO(;rp:S*Xdc&K@$M_b/aBZ9.e:Bu-kDWSb%(=5tS\r1Y[BmVsH8NRt_`K+7#c,K*4)^pAK%CbOe^p/MXlm#%r`E?<Q]Ntjk"Z%U!qPj@db-<_tnoA/EhqZ36.DM31tL=mgHADP7rpM.e76c]F_(0h&BF)p>HQ<<iA"$B\l<1cL`%`<k&Ig2UYA1Y^N3I5t<0Ro&BXr,T"V5MUtqDu?5H>#);2a--n5fMS_6Lg4hI9/T!sUSF\t`V+Z0).ZFi?TVMr5UZS#3qLg!m,!8!%%$VeW6nmuA,Q+a:*1Y?T^^X1[iM@Jgl[6Kn)Y!CUG!Q70_%u!95<=V9n%&\cG/1:PV#r)iZLD?l"IdXqE0c8j"%7\7El3]C:D+\e%'0PY459+l,EK>m]U;Agi-n^u>:+IqTf5j1Vk#OG-9;N`?Z0,?KQOU`rR%lLPh`RR%GG_kn527He%Ba%)a?tdG=e[/`4I_(1VSC9[%h"!E%"i*@8!%V[0SHr#]X2&^?JPIhW?#)OOkQ?@NY^ZZ",qF0`[(RjJ?(C%:RaC4g_jK!<7p>=4TEY*d"o"/W2Toq;jTM4G%%blb%N@8Q?1\_LWh?-qGG2P@=E;fVt0G9F_?-#qW#%t\op;D\ekI\0NE@J\q&d&+P`hZTXI%U#<d*Xt&7L`(;dD'+tL`3QP)#4<n]mEI@%j,ns9"_]=Pn>4HJ^P!Au!=_g,RZTXY&;'&A""u0Xp[Tp=f+X8GN.!FU!$m[W'nq#,E)iTL&$diY6\])]%(jR@HM+<Wk^d$6r0:qi%e4cpC@Jq:V0:J1968?`"oAi4IdhY"b)S^+fl!Oq.00lZ6*$sF^^k(Dg_nIdJnNQ3(64[G)`E=0f/I/.WqD]8ucbCH3?Omrm*/?OQ%(ebUKm$s2f6J<!o@=I;=h<RUPp%?u-1+"@bN5Q7k?:T/k;3.,_j<H^PTo@+*f9)V^?_<9XjV4:6b4'q'NTTnX1@rn2VXla'6k4TL%((+Dmp,dAa/uNlTC4&Nob"m^d,8]3CfCLrka&)$.dd$o%,.o3P):tmQ.G72tnfJ/94TV+$mV'5$Es'+6o>W4SMt8#P=Qe]AViF`;%)^CslVbeVni\^3ScS:6,^%/*uj?__K`aFi:qg6U$+#>;7(8i);1H)o9kZ**\nP@/4pP2Q0nZc6NG@Z*Fbn@kIoJ7DK^qiT?D60Hi%;Sc2Rp@E[.5F_O"q)SC`_T8BWBMgj)rS:O"afT3NJ'"J*XDUgR9"]G/@^%&W`C8uV03cZY26XZ<44(s>gs!2d8U`@j7nLIo*r'O@%Zg!f4E!]g)9-uBX2PcOJ*UW^>pR^h;rd:1"h<7q::Olf?$4`98ffX.aMc]BF*o6iu_kUi,k)o\SL?D#ts)>lNAd@235MP\+fsqiA%s'3J=EIR"6h!j+ojWAAbeEgZ%s+_L62*8)ss('$jm)p7cSoa7bFtms5bi4kX[IrWa83)DODM/ZKE:,(IRSWW\lrT<]-9X.RZ%,)b%`]18DNq-gfE/aVfY*dKKf`WUee29qM&XrWD96?NQH8\))mCauY^+(%Fn`-:-MukiS\I:Ab+"cJD^I4p/DtmEjB>G`"V1u.d.LKTU%'ia;*8dS(6"i-8I!qnYcP*bYpqZo"Sg8j^"ONDO3T>0.X7<cSO(H+Bm/cB-B6hIs6=-n%Y,R<OX^,1DI[Os3K&%l"hT5b&Nes>k/%l682"#naQA\r-8o8(H"7T;Fp\;=qZi\UL#@_ud*_a"7is[Upp0%!m>a*@:DOs2D4m,f;4RL/QL]8,@L"N]e&VE#Bb&`YMn;KRSX#%-%#qQ*NNXcA@nC[;/:^hT2I"(^@)4P]S]BJfLT.!9<EITjJ!8&3%p-gfA;kg7?MY.ItIY0NJb#a;lMX.J0N(/\EgY_d%E/"a`>_O%o>ga]hjbtTA>uH<\q+)+43hb$3F-d5<3@cR:/4!jSb8uqdV2VdhE?_\H;q?dr$o34oDJZi?t.WfJsKsWV39C'bc+CdUCsd<k"`2K%T8f3f(eIN[h_a^cNg3QMDECZi4CuFE2u\mg@J+.-g7PRQ$JMV'gAr:F^EjW9=l0WLV^_:<+W[S^&(+1(i[q2\:;2e@<RFg_QWl[$%$m+JR)%[C!Nc/s24>]MX.V?\t/lmqMG0>NGY-IiB=AR\(kJ90tq;p/NoS"46QVVh#D@.;WF]GZF>MmHG7<`Zdj/M4@k[8d/'j<nK%3cVDG##6%1G#_DG7DSkel]Y7q<S2Sq<2I59Ze+@Clu1052CamaH]6]/4r$FA.U0a@\S5TVLK/?$)"k!9VHE/*<4$PE0fAX;[^(2i%<TMaZhB++0XQNXPr>=/4/cWr:F//![V9_mU>?S^aIM8\ZWg-XqkP%$7NV-9@WSP7=e84;e!oe"LVht&h_pM/M"sV*S?7Juogmu.j%>ZY.Q&abMc=,b[WS^kf6h8UqT\FViNPDA2oBgrG1e'n#k=\HT^VpPf,+qIZe>@/a*lfLM%,Z\r*`%KQ<=Q`0$1+hM@&\6NFkd9L+%rB@..D2GZff5Ys(`T^fW*GMR9Yq\7-`)Wts(M\p"ejq/o\hgneB'F,QAUX+/KCZTc9sVCnSGWV;Sl;g:/8$!3:%m;YoZN*c(N_IZ%$u9]e9ADtTO%EN5b!W$ohb9GlSQNfm(bpq3pm#'tTcUg9Rk,IV\YtSp^@/b+]K^,U>L0LcPO8N"74mpm?Re'dnH\tpa]FcESh7[C%a0`gkI;Td#(@uTOU;gNP>e2`"rJo\a-`3ZH&!NpS*TOlZ<YiG64RWE%fCSQmdFou1/M@B6lc,d<VI&V+4bpAaf;IQ4bAe9N]_6"G%ns.iK%Ui'Q3G4a\DcpjmBPlnq2h$S**V"5lG>TD"ZWW!Mm<<d2l9i[_5@3*@?Ft>!-LYGfZT.-tSZ7WQF)Of9/Y]_559I&HpYI3s%(0?"Sq&bY3^#T)gY.d%$O)58D-L^Aip22"fd.Q(slFH7GI[GHpAa=RKVo.\pYS#bU_fbX1,Q/).7+]\Apfc86P#R?VX`(AXa>H,o%]=%H2eC_X5:E,M_I+QNgLWMWeValo(V)L3WqI:mV89]CK]d&YYoQOa7cM6f&kWq,9.)tDEe2c9mE@Uq\=NBE=_ti5Iq"*f)0;j$O%IThF8LYLu473A7mJ7on^Pkc7P^U5*PW7HrgIi>*FrH-=Cn(ia0lol]kC(XG$HjGhI,nbg^f0#Xf:0f[m-:8,\.spg,e!UI%gh#XG%j5i1IUJ@Z!q*$fQq)$Hi0ui.Qo.:!f-Z+c,I5Nsi\FAeGm/qI/n`!)_PhFpEp<BFXbAU`_Q>-4AR>l-6Fj&c)gmD7c9C>N`GW/\8%nbBH`3MK7:AZ&=Bm&YS^a1j7>34lGBs5!BIn3ui0Oahu/Y"t=lS#OqPXDXVqfUG!;WW$@9Tf<V2=4>krajuq0g=])>kKN:=#$u,D%/@%hi3^nK+]P=[-`V8hO5C-s+7.mT1r_M?`mi^fX>?QM49@VA41>d#CEuSMMqAf?2IG9Z)@#`mCSnD'5rk[QO\)\'M([Iuq=?:u"%Ie<27VRTXuk\s6Xmr@-]q&Rr)rJ_%o<!6i?b);%f!CZh%d4DTp@e&W`ebMg8HW.17r9P?Wnh:M#nDA!4NcMb6g3GpoZh-_t.8=^8%^Al":CU`c9L]ZBbi-bE"4PlZSkan7A;!Db-bBqUfb_j,HnrB*CSYY,aqUI=\*WpZ]>8f0dl'QJai->^resl<?[lio6N4g<_2)7Am%ki9b:SaRqd=/p`5VYu9D](\Gss8B2_o3Q.lAgUAb?DErA3H1IprB+fG5%r\<'7lRT#Ie"kce_G.'qKO6kg`B]&UcZ[A#VF*\M\P?%%X@5::G&/eQY5/ln'P0=8nZ0HB01<UmCZ\-gR]A3Z\#Z)(j>a/D6GnZSnIUVk<.Hfd<3bKbHp6[_>\1nS68Pak-YqGX9-9g:/m0F%]>rF=aK5M(f7gQdQCZIQCMuqVm6EY&Ordr&.i@T#(nPm`Yqr?N'(1uR:.;b<;PJEqi<%AIj7qTp[uqfMO%71S<PlWC2#PqlUa2C&%.r*1d;GLQ_)n]%#Re,7=8P5#.a!rMm]I2]C[cFPL%pR/hEr;3fY.t5Kf!24<1q;b<3nLQ$1ncG@W\Y.@$euN(R8<S9G(u!5gm`B[%1Cg?pd9V0,TAI8q\-QnVmhs.tDoRA-PO!?5kKGpJT7"74I6+YVVXp!Ah'O)L:OD\BmE(+T#M+C1@D&%5*KiM;d+am'R;@\NJ!QYm%3'ENgfl6s0cF6kboWm'umRh'5q>/"2<Rc2d]2n1);Shh]XApT#Z<$4u;JD*`?`UQPlJUlGoT2eUJ=dX9Kr;-BBnffmad#ZNa4K'i%PC#5q5LpL0VpF)Tc"0?$rR>I$U3<E-gE'l@,$#3Nlg`!l-t?13CNJDWA7]B#93ZQgi(Ya+pWhIQr:_;2g>28_fNY9*I4\JB;sPs8%oBb"$Z7pWTR;I@u2(p:81NOadlb6>un)BS$Oj<U\nH64GpWb#2;ml'^?cJE#M:KqE9@2YAM(4t)bGNq#o)BPDO$.tC[kqOJk*@HN%k^&*m!OMHG^flZ:05%:O':!t__]Oh2G$=KXNoJi-E.M/LR\M9XY3I"Gb[>54;U@\PRAKPIUGPHPbYi?QSYa\?k$!XKEtkj6\VsZ`%ml=##gjXXT=UM<`^`]C57fi%Ps"$U71==-R:X;%YZA0<6QJs#rDFu*>j2#1Z<c<hO_tBo/gH3RTgsiJ$o0dk2?R"LohE>(shQ&J;%hg1"Pk.>f?M7fEI&j:0XRU3/UoQ*h&g2-%EZ6jnnCs5Wl<^5N[)-Gr*b],Vd'4ENciP_4C,RY9febJb7GI(aBo(!sJ8!^tdl-C@c%:Q4(3[+%QTm<=i`.U-,;5;2sqRk3?E\<>X;\A'X[fG6F%Q#^sto^/Dl_/rot!r+KQ%-`M3\kM5V:X16Noejb.;`Aa*0ku(c/m[@\%s#/Wd\?f:i=rD"V,Kb%:B(=j<eB1$tS]5>kC5![OL7IS>j8Qic9P_prjM"`gg!95DH!/8)X59o'Co>H]Vc@rD,L;=uRdF?jXs7jq%X#8Yr4kG7CR\Ore3jp?qq6QX;NQn<\k/cnaDK?hDT`WS^"ao;8Aj&0H5M&;Q2lBb^IFG[=ML,4t$sW1)/$P6f7B][J8shW\6oX`-%&QQ]GDQ>5M_H,Zm]-FT-o'V@uP@isOLPpl%Mr04g<`Z(*heJ))Y"\&7?_4P/?*a4hJ)%HaGs9.#bD.Ir?e6&0Y0iI\Y-EOF1SpAU%.5`32c@TR4n^=T+J%!eABbYMq'r5^#bujk$*PZ[iG*QguqX`Pb^FkqklS,m("QT9DiigY>OdgDfMNOCSVUhiS.&EXECG2,cY0.SK%CHQ9U4O)ul1l]n@b^eua1uc-sR/rl8R2hBdJaLW0GFgq\%&iUl#NfO0GacfaBc<b[H();q:%*M(/j502dp*AUdhqJsdp)rIF(aR8%1!6E>*e,W5)u2Ca3Z3Edg!^bj`9CmU$Vb")m0bd@lV1`02u?<VH>P06puEsY<`Z+%c^heW00FZf^<>H`Qg'("RWDM$K5W9@%r^q0%hX\?:5Hf6.hR<"!a`-"W18tR7)^!mRXbh>E8M3K$`FY1P]ijP7hE\!C,!I&Q#P7ok0j"eu@Tp(eL+Bf9\h0#J(\fC*(/NiC9,>5^%c,g=B[kN#/(-R:T9I1(Y%i<4]CgpPK%G7b%f'=uDE$oM(gPgb]H#E@rmO]`Ghi5J:[0IpTIscW*13V^FdCK-@3:7=&\_LU(>BT[o%][Q)2^q"Pq>RGU+kqY8cDDMc*Q:p=E9Qt=(P'Zk>#gS.<98sgEZ0ot[%Tjp^071]YhC<5acD;K?iiHHLcK,O_E&'E9@^!2Jp86i/%rRNIfa`"Uk<R(b#J"-6PbE!')TNmdChWQMsF#KR25@C%ojV-%lO3Y)_%FI73c"sORelI*e[WpQl"uIm"mS>rl%eH,,;1WX$=QfMF%mHUFfhh[j\b=pQn](Mh0(7LRNI@4IB>2Co=DZUI@pioGbGJDFN>lX?lZKEp`SQG.CQTKt"(/i&r@6,A-qDld=:#i>D1ADiDrL>lA%:XchbF-qlR`\g4Kj#G(9mZYHYerMU@nR\GH-YHGdoB]HXdHbpLj5>*8SkG_L0obK`LZu,J8oI=Kg>:DfQ.\T5HWkR,UMir_RuC2l%\LR<[qN,E(WieLeDbYTMA@=2C[(7gO?&RcLn,!LG_N?k$7;Ur&a2gii/!hT-P!@^30s<+bgIEk;Dr-m\DdW&V[HTFrqoI9$!(`.l%!UViU1QH-pGNJY+5.>$6'%r4G5TE"8U;?j&FZUXoT<*=>/c(*BH!;uSR2BCoH=LgOEP-D&Pp`>tPL]GWnnq3EE6hrgI-Go,V.J&;%XH)mG>ZTP-qYN?.'>,PNVC,#7&'QgN;b>kjlTlYYf)?lJqXe)fQX2m\'p$+48o?ih3ZCkRgfoZ&p?t/k\%MRNal@A<TX-$8i?JB&%#F##C\Yh#tWDq=fk.IP=XeV6O8&k+jj5,N3>qK(QDG&sOB3iD8j*1.."VTa2a9C#:P7qLeB/,9FZTs\s,E^,K/<K(S]qT%S4/MeC%dOQs\"u<_hGM(_Qdi`nIs1LPk%a?Vi%Hp\2=3Y^#'1E]F>rXgM.d!\]n)"h[T:=0f"mKt0jqO<]d99D&TF(,iTA'mqB`G<$FXIr&%Eslq+:LXT6b?pl3fhQXaD#4mS@ra^UVPMPW,\(:m,p(B.=Mmd9Fu'Xtq/3ZL1cXp;,2+^=,r\'W^/fD.%o1a="RP^pZss^JU->t+%JiO7ir92hUIF6=+^4qJ>+gNjR1=\uQ\IkVflWs=Zg=OE7^&CW)V;)?NRVcit:pmd,HhTB2pX57fn]s:\h>/&1#LSh02)\dDY-2Pu%6>nZ,`FOp9i3.rqOaW4sXrPRaB'#)k)L[TfP3]R*fDKW5M1(BKa&HtuFaZuZ`qIcuq\h3$fN::>Auk;<EL4BD>iRA0M[J7==PSma%h-XViCgBqBlXG#.jt9msQR<0I\^9n0H71,t.iI!Egm+q9q[Zu=],)Y-D\eS2N9[`]o6[L`H8tMF5$iQ-XEWp8I+p_]JUi/[IA`!C%agQD_E'=8>@30[^\c9tHUpoqh*^U(`HZkq`NRug.<p,XWm60VW2tuId]Bqb^oo&^6YojZbb,_Hkg[f^\>Oh2riT7qmCXkZ*HU%$l%hq6\/6T<9(9^TRV:=5b18=Pqu4^3T!RFfoV!Qn`,V:j"tS$Gi@22^_KR32/!1i)!Sh6+u8h36o\c,EcHXg^E&?e`/e5PkN]WTM5+%kCF)74Nn*4M2:6T8<P/-9R*dTP5@1HQ)$n9&!N._[YOV6[Wca<>)ro3XDT("Nnm:ph>@<ohVL(n*M$<;k6`tUFn-rp#,LPVH"M8>%@VBX.\Mnq[(D]I*E#[ieiZe/d8H#M[AUd9p=5/d(c[TG2oM;M<OJPH)qARI)@<[-2I?!kbFF&@Gr;MWQX6XP[%K%o'/p7&[`b5lE%Qd)TPHC.pVhq:ghb]).Hrt@Q>QPRk6Z8'+LR=Dg<"3T&L5G%duk)_Kl#Kaj]E_/u4?p2G/(;ZSLY)(^;HZDnWQh2?Hou/4r=laN\%O(Un2EOn&$4k8BP_9*[dYC-%SqV,Fu#9)[jDG)J**i@hhC5=1$3mE6Mh4b^mq3BQAEXU^7l21IXR9<6o51qsC)^V3nM&G@I'RY_&%K)N`RDj'0\.tZj-X(ua&jApnNd(Om$<$j\g]CdpomQm1:h8HY3/JZf_PLj^jf5\%"p6G&!\$?>'/DR;NXh2^l8%7];.Jnm%Cn#lm%DE%SVpP"'PS5`ZNf"U*=O2ocSl7;2P2G#f@kumi3VLIWHbPpI6#,l(BnQ]?Ps#?07%PX[iI58UKAZe*B;L(W:,l_sh<m1[Zj@eCH%,pdg5=Qe]"-cb5/-e%QZVaN'2EC3-$1&6R8U42t'qZQ=ZHgr-SRCn2ab3X8]JC&XIDqC!;NmA1Es/rad]fCG'euX@mZR45#7N;?c%;;!=T4<?$`WNhpVc`d#WAr_3Wf5V&"#DJ4cHsK9jd1rgDMpQgJm/!Tg5/m-T=tID<en0N-m8PR^+85SQg!3fBr".77ds++Jo_8*B%f(8hRU\npG_HQlASQJ+()G)j:)#*jR%m2uKI6Y2AY</Ar^FXiWQ_2Wp^]0\%bS/6gHhsU6M0<u>3W0ZVNP<k9L7rIlO"*V0GZ"Y@%oZsn-TBu32jb`O'gVk8:CQFcG58og)Uf[e<S.orBFXFiQa4qjD^mUj2j*s_h,i0*iL#7J#*Ciph4k-n7k.A(;^%^ZQ(sfp'CJXD*%H[8VA5th\_d#:NKM7,7b6pE!p7G1JYFlggm'>rtF>(;_^J9^5fJFff%!:C3%5MD9ZJI^TYr%Li<IFg-nC?05)R9`ZL^2Z46_sc/e%LEh,P,G!rl]<Wq(drddf2B?@5&+<JD[%kTRl+u^p,T_6J`-9&Dpdn3OeG!7:S&"TOILKU4^P:J?P?lh3Z)(so]r#r@<W',5q"ag(%NqDcb'Ke>!ob0#)fS,0.gq#.:3Ve0r%F/)4'MX*8Vk9UKm2S>NhYk$4d%"k+DG2^b1%sm?qf)@UBBSC%hks,&S[89cK@AsVF*cfa%in><sQ?G<EgH3Y/20gW%.p5jXh5lh3p)hesFQlH/npU3-o=<,B0@APMMUbe63X8\mcc&5#ErPs;\qt.dgTL>9o9]0ljOq`bE)+,(%dY]*bC5:O"_m?gZeI;+V^Ai)Zom-A;Gb%7WhRm%("^79SHMl^h_t%?0YKjk"0-@o$s1!RViE[_r+dV:,juTgBZ+)YY=e0?+U%m&s%b@dP#;r@S%".)@1(R]dOAn8!NGn%pj!<0P=0%Z_Q;W%C/1;:@Z5LMT;p&T&r.UbnW2EG(FZNpBiMou;P-82[HD;NqFT_bHgF)NkQ%hhGsM/Y#di3.WIeK0[oMd$X*a`.ABlX]<pB@BML7d>(d?M+LcQ5n@=m2Sc[o35i[m1AXkLkf.6(LD_n`I^H"7!a6@952*^=r,UQg%!B,N!L\8ad?mi]E,Nh2LG02=Z-`q:WPF_EiZ5J0WM$eVVL@gc(C#,D`4Gf_@Rae,.b,\VSme1lO<[`"df;$mF[2+lr)eTg&.Sn[N%C6G7Pq+mVQE.W^V0L'u\e-`i.[.W/@7XJC$H>hF--G<Ndgr9fm-Z+4hif,t]O#UYX?Q!k?5+h8?Y;&)N`lbm_gf:+_ajkND@Wqd,%3fs>r1'J4hraJ4CeWOU34KiEjZYM=l5OI%R9MH/LB_VI*)s2m6`]@34/<$RTk)I>?S/lFcf'M>O]2s3t8E'Ht'IQ381+LJ5kc0tN%#G%$GN<_Tm1RAHOce>Mko_l.%)i/kp9W/M=7&uE7n'eIsPi83lSX]Q5rp&@gQdM"`NR>AEGM],T+o%G@_H`MQLkXUI9maF1M]Kk*%S@rGof4)_1M!lZqVO,/En-='"9-ZB]pal*-GI2WLgug/9\7=?"U$g,IhF9:Idl5f$$[O@PM2_`5PFW!`1hn&:@EZV)+>qT*X4R))%2'96:dFQ"-=?\ug3T]t#dujosPF&g/>#gIZGNodaE#.3f><[="`cU7pnP?SUXZ$TW.C](\/ZO2Hq1Im<V)bGUPId<c/?A!h[bo7Z%K,7UV9K[.U\]i[9Bq1UD]dalFmbQX0G-L>8\b)3"SscZeCWd@5hA!]m,A;IY?<W5('RI,Wc]4Y'e[)$kW[_GnATXt+"F__&NDY$b%QNk6*YOcqP6Mjd>kXuq[D2L20rTBt;n1&8rURc2R[$`dBR5EG\:[Q2d<G1cE?;-O>nS%=-<81FB9jc>45!P<3ilS5R?KnZJ?Kp@d%%kJn;AC:A/-hhtu[6Lu3^ddGNbuG]c@WG4j;drckof*.**#d]a(jF668N'9unQi"u^hR<E=A<cMEJsL=@7TA+HrToFs*1-Qq7"$W%ND#pM`3lVX5=!iQ\_bna3Ll_GWo3hqZ@u:$h0S?9(gh["rCL#j\smj241LZqH*K'nW^+&SEugEimRZG2;*.WX"o=FQ?Nlb+:#!&S%J\:F*G,=@]S6)&Qq,\)+g;1p1e!0.Q?/R/^Q7U9fL0()C[!O6`(Kg?2nb/mc,'k^5n3^O)EKO^H*7n$6'9t(P-Pn>Rc7/FP_\V:e%q2NNqTJ(bnWn88iX5]Z+kmu7=5,fG>'\uRB*Y-[_^ni$bM@UN9dK55M<rplSmB?&%laV9_C^'8i"n&dp:NoS1IZ91'QARb^57S\;%hbLd@Cf-Mp`V=m?,e/eS]>Kd12:2dN:QM]QK"(VH6+$LPD9&c`[i_R9]X;c!/Uq#RmQ@sUUOi'OpuUnoO,NZlDg2*`6>`fA1O]/&%Ifl\2_5jj0?(8n8`AfjC<gD%OC)>oTfNs?ef\<`J(IS,4ldu#paRR@WULN<8+5^DW.^lc<eEao+]X@@+?VU17_ma]5*R'-S?[C8@%f(YAd[>:r;;]:dRm'sKQeEM+eNlX_:5mifDZ^32+++$57_RBI`Fa(N$,<s!p^K.K80t=f+>-B+3hO:2Mg<a5*oDODg>2IoI7GQ?Z%>ii[Z&rXr:o?-bmO]K9q9:>jKs(N@9m_e]U!go]VkabecL;*=j;VUcakfd.%YFoH+A5p89jjhR(DBl5c,bRkabST:tUM-!%IW!U1%_4j?[(L%[*#ZM<5YVp@%Q>_7Y^`P$/5>Xj#F,&iTA>d)G3+`%rV7a+bL6FD,\8d"H>jdbJQ=!*uK)\I:.-1r83[/s*H^(m7H)5kP%Eei'[>[5YtV.LFFG`Pbj:c:eHG`U95;L`8)Pk$h[W;8"<-tOJD^WTXF;9BnOOil5B;5-_DX50PXG=J`QO&EE-(b<9_b1e-%29%QB%+)K]dOH%Xb+aL>6H?KE%A/k8d^@!&DDuR(aggEkL?R5W'^PfD>@c!'M9LLXtY&?2;:B'jMO#PZ$)P\8#$cf/<]:IF,_h64oJ!r/9%HLkhK1$if#a<3_(DN=\/^NUfLDJbu:*q+!;SaN#,__*C6F1bY$Wq1(ODu4eB5Woc>Vq2DRc*-Wgks%["lIW:ZVl-7QVuQVZYP)<p%qsaCHF<$.`,RQ?aS:2WE48A*Tqk)-H1OL)$-SspMHa(&a+4]&n%o<-:AaUQ,CnC(oB;]g\^OLKI+q&m>EkQY,4.Z5eL1c!q;T"jX%4nsKSff[tc72EEs3SNidS4o]jFqsXpTh@hA2h%=_cjcV4AN:dMdrF/(hYtqaq<-[XoC(6Q/OI*N^F&$Z^IBLhSK71@.bO/_n*KF,%Is<`ng2+?DagVMj_Y,X8Kp0FAh';H>qrI85\?kcq<5D?,@-;WXl/`QVfS\D;Vq^lk6iG^=>p?s:Fn('iSd"RiL_kQBCqT\SHZEIN%K0#j-]Rh7"e_3oBVPseinXp_CUCAq7$FtUgr83=!$f_1FIl5NiJ$6GESt]3Y%M/;5>)UaGmqgnYB5R\4nG%+gpsPV[Y<#4H*lI`?%IW_k&##bC`iTAP8hEMs/m@Jd]phOO:laP@"Y<(RHbI]tVW^iPVhc`*K^?fr:j1%YF=2XJ"!9JrjIr[i=Un,Rkontg!kP[i`l!Wn(%pLN;K]-k3pH[Xaj5H+8':G2%cajJu5_#OX>XaP`:iX>ddc`4RFK>V+Z.I56N>jf+NTheF-N_Td,Wdapp(GMjr^i);]7m"a1-bKC;%#[3e.IWAl3D!mi&d#8JG6sDbcZf[:8P718un%E(9lA&$=)/I<q?_FC!bh?XQ9'(`4ClXK6hn0H*bqRo=4kn3(0\[#BbqRl\Zct2Y%%("24gC1F5$d:L^1=u0]L0f7DHfrS/Q-2eFFKQYm3P=YTAdQ?8\3F<o?q6Rn0V-!khDmY5Bq2W-JjH7Lk:$,IrRUuI&9Y4Z2qqPL%#J6md$r#i!pt8#7H[rrTlLDUV*$/s?G#/,UV@K-Js#lPX-iYRO2Ra4s)Rf;5p:k>H8gQGWfK<ncD&rU=9_#6Os'7Ds[fg(4%_"@j%L9:N(r?kZ4abq;li31r=d<]$S#$m%TVr24^J\tR*roW+MqdL=)&9i0/Nh9Pg/EYXTFn+)Op?B$oe:W5M-eAAp0@1\nl4D4Ps'?ZR%2%;8.rbTSgF.dO2?Ug8$okB\7f`n"urYh!QlX/_FqSe+:=QaYlE0+Xip!->cDSkCV;R0c17GL^1mJM?jZ9]6U>DL8R43)uW:qZQ%%<O;:\Dhigj4W^PC19^Ul!9`q!THADT#Wlu'm$W(F0%)!`$H#5*1HIaMK#*U.0-eke%8l?h4$;jsfQ8dTH>fg,fmZrT%WKRbEY,hA%?T(^Uqk*lDQX)fJC@)Y&P^\mGK>Dm"WN45V>&_eQMVJ0ah&1ar]$cOCOki^\I+!i)7Dr\:1o#5c(3s4Q+=Zk`#)XU]@M*!NcL[i)%i6>k$*MsHF2;e<V+qI*":EfS8aeIpmk513:EuPP*T8UGs*jqc%-dDSobH0p=N64]89+gh@eq7<J?+2Ts?,KM*(Z.WmH:cY&RBRb`%H]Y%Y)>cGK,r"qRIir6-T__TFQ$I]r?;!_i=^lf`L$cd[SL7WkMOZf_'XBd[dEgYsWGuUgK(IsSdD#C`:*]0"ekb^`j\`i@)l1Q%%Rp.t$!u4nPnI'HVQZc-"hqmM[n`I[0hWF(JLTtMbi^6&m_mku-I-/W2n\14<!`_mS9hu/X\@$N5`$9[7<-MI(TC#,9G)H-?F^ESd%j0H<LqT!4)Ng$b"7:2A"m7[dffoAtX7:iG;/_[1[QL1IdbG05i4dsDd1uiFb-+**<I)4YNG3mDH=%uDZ20(;W@g]7?76AqCkU&j]%.tn\u=Gfd@$XEs6!M+t$WFoAfbk$!lKh3ngb,hL=SY9#;,8i,_k$fQ2ACVIdQ_YX[0UH]c\<OR(X:u&'-t5pL&rRks,#YEHQ]J$/%2^X$tA2-ItQe=0W74<.Nd<1>dDD[Inj"ef^#`rd\77;I48e6EX*mA/kM+F?+6U-s]hdW?ek;%U?b:8YCV<qCI6l.88eWO?/'rXrk%9YOT,N6/$>ZMk<5Ti>s,.a(8VdS&OX&M_tU8.=0TD!7g28$^k#rJ&ikn>3si9.1Rt\d_J`,UU^!is/Q2b_h;KEqQP7dnAfc/S.T:%:eW1no(N3#,a-OhUPXrL1+K=fQNHior^*?Z0Uc3CfsXiVpHg2Rr^L#R(5eO=<c[d*N:KG8XG0/@3tpf$<<ba=YGk>DC;5RIVQfb%%[u2_6p&3\pf3#KbibO?h@T>[e4q:%N'?P?EQ2#BSD8p84>sY3s$md;7rIW1oaD5L47#R.P];s@k.E$lU5(Qed`QRINZQAdDjLY"]%h'rG*VT,/G[H\M2:q,4o>XdmVj^J<=cq`D3JQ7u3Clamt`FHaW$bC3`r@?E8+hokaD6>[jlddZRV:9A0HfX1tgQaq<IY5\n\''4e%8&[G=o>_O#:,td"/%_>V:NZS9l$2JYRqK>!#^mjEmGDue:19\03\f1P/4*B9WiQ8BLOB>i!ab)6X^9pF:dRgriI)[t'D6]a9bVQk%*C`Kc;X786VgnZR;C?3+V6i&*c898CofJB&<%j\K'ZWn+b-=aWWQ$WpH]D(&U[")CE<Yn6FW0L!7n:*)Q$$gL3/q&*m/k<Sq5^UG%fVGXiN**N<MDA<[oe;CTM1UN=GUcQJ11?*(U],]E1ScB!(l_s7e."Z2\;]W+3_i\c$5te4)KXCnO&_iCI@f0--2:[k,:R>3Ul(.S%[?i3^G*Xds$n;(4+_@aeMG3bc>]ho=6F#Aq)7BV^9lr=!G)9e1*q@VZV_Ilmr0gLl;N]L5WcH9c;5r8nX<roNnP[Bb.AhU:j;b"T%oM6qdSlN+>'We&PV+HXXE*&]3U-M*S)9jiB.>V[CVVkM*APDT=Y6k1sfFF4_9UnD8OHkZ54%/$q3MIF68&+0F^3o^n(jbLFM8bR>%8E:+YNMejfT4Yc+lX$X3W;54U1G61Q`jGOIGcXTG?R3BsGeNY,,$u1ILp4Pd@Q.%19c:U.,^[cTcX?D4\r6h_Y`XaXXsmc-c:+m6%!QepT'0VJ]1i4$U;UT&!;V7+:7TB&W@Ycb$84M*=<]\lCV_Oto-K6a*/]JGE=bd9qadXK95X;t.JtgF"$Q^WU?P-^%,334`+G1sC%KatAr8`12GrCHi<K"2.B#\4K[Vs8h47QAJCDDC/cSO"_-0FWfli%gHP752bp'3du$FFZ3ae5RaZ>f7t5(sF.*R'OZ1YY(M.8ruhY%jU=.):lh5'=n0l*+=ON*PF=%gV/mhXQ\[8fpcDE^"I5'['^RZ^9PY:3>ZLqT"a39<1O,^/X-Af[<p2"H!DI);aH]F`SWu5aQ<B@$%!Afb+l'r$)XOZDD</EEM-=g"c%cdYW<Qm2=AO8GPg*$kkG*#W&1bc%_5qnM=<96J)`'WW_IU*PEF\id],e43?e"VdIBuqJ(V*.c(%!!*:(N>THeb09ei[t=+L_P'qrCNQBEF]8PZRUij)/X>!`NBApk-WZp0"OWPZ,#nWKR[C`B5F;m;DW7sq0Pskq!G:Xm0Tm;KRe!L,%Z8iWa><k*bk:6-0=)80I3CtMS5`ZU7:]Q!,a[?,YU-gGB7+)Y9#kT,u#Z-V!"@VgXIMP+@Y!,FNg1Du!"iq(><IfA?.Cc=6"[QE\%DM%@DJ@(H@RmBVT*UGU^=d5GG8%@i=9_i3T/Te<L+Gep!&TXd1X\=j:>[q*RW^'X#cuDJs@0[p[Vna_@#f\&80GZBS5R/#@F[S*M%_JV"\5"G]RX8_g<>P!'8M%gX)mS\I`64ZVDU<[9P9:Mr5EuE2$jY7WE,cN#@9UA``AIBu17"'Y,3l3)8L*3Na4T]aKe"b,o[.c1N%SQcTsTLLmu-5R<m:';t%4-IEXTBl%_WeODS0a12$<D[,4.,(Ok/92ZD$\DEV@3NCi$;)pBK!8N=Xm?Nb.hH!J;MV`B&N*kRWQkiH%FC+&q$A3BDS"j4H:"cJTqHU9FZ$7O0!_U9Rh3A\N/d!Z`Mc(?iOZ-BnV63(V*t-W(_aK00,mFb1-g1gmWre%WdSceT"DgrXcNu0s%j[F?05Se')WEdV4PiKQHlUAP-W%*-+lP_3]]s(Qn.#rUFeYm;lMn45rqf8C#HBC<E62<980>O$W.9WHI_rBhf9#Kc#Od2*@O9(b<%Y%2SBbXtm*6GF_ZLlrQNpd-;m'aq^<,gCA#"%el")53*"ME+V'<%0:KU7oL>O?Z78%4!?%iuHP@P;>4=j(_7EQ'KPh29g.RGmC4Y%pjEn$AX7FZd!<h(42nd@U*.?9Vs727lD8S'+@4:pmilNsem245jj?AsKCXr@-r74e"G2?TP%^*uP_ih;WI@]'M\PcMl=kZUJss9n%Yb\:2EqMsu_]D81&T4spe<9+E:'XFW-6bqA7?)m:IO+uP/lAU_V]'Gp^An9tO&_I2U5\?!8CskjRqYm.i\O8dl0K\\gY`c:Io^I$%0Xm.B8uS0^Dc6Jr>[S\99=Q8j;=Z'ZLNGpYKD^OWD2DOD#G)+2q$mrT3"[XFj")(i3l%7nKU4aE!eP1H'l/u8WTHU=l[CS-TUHPY%8D_kB_PkCGdkk#O$T!r$dbSLAq7to4Pb`!PS4H/[*J"`%idsg#3&E9<R@\q"3B\!PX!f4kV+ZnZVd/4T5#nH?1b[ju1.du#<S:*4%39fCZ1+IFB9XJ%=&(d@->FD(p$$g,<TU3<3`h4Pk11YfTS/H%'RN(LIRLlGR@jIcS=*#4WkpF]8<"Oq=pb-W5PH!7bFP!4d:X4J_%m$=#R7lY!.'A_]5#rMq_rA*2c@@irhjtAbS.LR1+Kc\6Afij\f(pbD`28Z(YIo$`Occ@=%8NYq"R"teLQWc&#&j7:Knu5"fabfd]%X`27oPh)RR,1GRo-@X'Nb[s_Goor>b-TS(jSjca&W-60)h42G;/CJq\Vm'o((fQVYd$@aBg^_ML3-E"J2TnY4-*@Z!Nb,hVP*hL[%`69m&o`hjHV9<g<,"u]$c:?HMQ.*YZEta^TiS&n*YanB[95jU""m$+REg>\+qB_jpb0jIpQR+67<V)>E@h@A)9oi/PF<VN'#J[9K%,h(%ASAsQnFr&,<$NERm?:#cpZ;OZ$ki+R_',`3.Q@Y<0WpFGkKB6NF(@qF:.%,H90-VPQJML[`4K`__Of:Zsf)2QTS8'7pOenf"%,ci"4$!7t_@Og`#@SndN+Qa5q+D&uJP,N:D.eHB4-"H3d8dPYA?l3rTPU?5Qe7&QF&rA;$U]p?o.FVbdhGB0uY@p`L%:WJl3BT:R%l're9[lS0Bs4KLt4!)VIYj;2$PLZ59f2KW$G;._PJNO"O?I<PcBqYSZ"^$Vd-t,[JVS,*G&-T;;j:\V'/6,;8i&o:/\1jVI'cARm%"JEqs8P'm.OFnfJ9lX?mN^2U5c&t&#rac+2GqK37MRf0#MGnmLDjQL"!\B2HYV)P6/SV2UTp/@r!%UMN8!HK7(*bM`NP+&.(<g]n%9ED?uYk8"NHge,.B!@s9_l*9n!cjJa0B>)270Q?Gi%&1gJ'&@Q3@j\l!Z0,N*S=p+]A+";)3.C"K&m9d8-oFc8<iCP`7.Qh^q.L9%SJFcK0h3M]jc1*$TTi!#\OgI>fD2P5BsFo_?l*5&(Ntc-?FF?QXC?HXjRN^O&T`Je!*^<q2,9#`NH5AiWR)mm>X/hh-K]=\[UVJ3%O[uideSI%$(_L^!K*$Uk80\=-@QMY/9Bld:V,"pa'!3"Y_!\Xh9e?o*@;b9H.Y=%d\q12X[fE`7Zi2Z=I0R17b<HqIXGSOrj!rXi%2`;>YfZ06m)-gl-#"5PMX450iY/"^iV$/c[n/3\WC@TI]E#!=lF4SuZR<K74^)!r]Bu]bMfj_4nl&-f>U,\ZO$tgEp)+Ha+83k:p%"Afe%Y3[_"#2?Z?EQ2@:WQiQm;[_`9N[QJBVNq?#*E.8X/SRKdQ;TJ3/aON?,-WD7Zkrh?6mBhaBu0^JaqTZ(0SJ%hCAX\#=!29Q%q^/TaXO\DS5a4p&P/&3^Lc!@K>*+Q:PRL\&qnS3t2WYr27R/Db#]i@:.)15!!bMOHl]S[S0RIM]XkcT*6CuBPB!KD.P/+<#7\lI'%/G&X?K08./Eu\%S";WeR(*fK:8;+Ms/X0VW9OYaVOB7dPm5nJ]9A.1UIugl]&Q6&FMrrBkVC<0iRhZuU$O7^mb*E0bZ8Eh#fod,H%@gtPWZDH?La:pp=[ZrTOU]mREUhoo/D#i/<1db;t(AFN!)-I%n@VlR]n<qd9D%2M-'j@RI/^;?TBPG;W"YD;]7F53fAI?ckd&P:C%p;U,UD?FktLtggE\;bt?i`=:)/'KSTbbK'l%bp)_NPl7JQ;$nQ7MA\+-9]9(1:#6&VoV,i1`;-AcPQaoY(W[rc$?.5JIr5VH>OG,%2oL1L(>!<Z7,p$<HTWo#^2U&M,I%9n4VH=Z6Cuc(B?4<n1QTdl'an@!`QXZKCk7Qmb'Bh2!Pe`O[40oq!5:9^f4h+MJY>a%_RV1`%eMRt,[TYH2aFYb*fX5*XbV"FdV02lI0"5Uf9R7tZ>R=-Kc$?.5@;-]h=I\482i\Bkn%sb(-[:UZ).(<TO5dR91NC'dV&m_ddoVmt%2%i:J>-\:g90K$$Jh&Rh-<Ki(.?3J9X5s_n$a?[)p@^f.!+`:`%TsU<nI!PuQYYQ=#[[sPoG$mF?OKf6$dR0-c>pj9?D2d!SDdDD%1oRBO^4<P?ZeEWA:S7mR2_`!tq>IF_hrH_(IX0ISQhr,AKl=8$<)%NDhdi)N-G-p*Z<R/P]@'c8bP4P,UKo+^%$d5Npf<7ekb9bm%fB.F,"8c0XH[4.VQhsgqgpc#!<NBEn>O?IgC6r#(G"^_-\+HeGbGs*1l!*P@^=@+t9EDI#ZaD7=5+'#?MO.DHG.DP!bC-Es?FAMK%^==k1X`f!?C:Ei;G"^_-\#`d#QG1meR<l5XV+b=N)j"-jea5;!%a4.'<NFs(\(WE^X'K&>g?$'!0))JkH.?Yrqc:>a\(]qDX5245%g+@`Rh+F(:dK7k^'"NF@2?8kD<ipO<heKXmX`f!?C7"fu]A0mLj]/?emT](!heJKZX`d@pC:Ei;Ft7,2cjJ."c/&*3<o@itG8n'H%hho$?0?DuC]KJ<<0!_/Zi5A/T\9+I:8<:T)7,:"f870AS6obO^ZsB*+ht(aWE\GCtpFYW=l%ggG\u3V;8f^d</&bcLG/QhRO:KOo%3i'8^(G2Uog6@'F+ir1/[p2>:$T&#C'=8h&Pa4uI)(JTEKui!`+HeYESI6!n3J!]ul7>b'<NGOtdZI4LC6$-bqRXBuac5N)9U27i%oh>4[O4=DE3g.WEjm<^^,h!?2@;nMacC;QHLWPmV/a/&ppZ=N8.fgmcOT_]nFNAg.,$jGQ;l?OG9EuC$m&j^2EI*+QdRuH$==WTe%EI$q?.dr4NA(d[9r\Q'2fCumc,a2RmOj<jS4_JbkpWQd&>W3CCJXjC<8,n`@<[99H-dgO>M)=;$EMXafrrZ$*Tjc'rFK$*_GrE@?%-(-Y$KUT@0U.QXfd3je@#U)(dHL6W)jL"3toh#31i"Fqu5]KBu-(#(iJ@Y<q&NJmV.&afiPl:1M5hN_<hhM].$FL:3$!akdj*Ia?%itb<cP3Oj0>!p<[':9!DV5kp14Ai[.-r+KL,W0J*\=H:-*!)o;VR<m^qS;aO[XP;I)ACbj/J1f/F>M75G_m+h8htLUU(=G=kYVN"%QBTc4]t6[.P^6<Z)DH'W+GoV/;:rGOb7TQ9!4LUn4oNC=Tma</b4%YQ@m-!;7!$Q8C^=oTG+*D;Srg=kH^)=b_--q^i['S4=sBiD%l4'ir*"G#K9Tenc>gO-FQf.nfNait.>QJ)P2gG1,CCms+fIEX'RL0R"WG]2$-69SBUa:[8Xb!\i<R;G,B[Rj'KVlt;6UjjZ^9n0[%*!&b79ss_;HGV,tl%D3jYc%(smHN]HJN\IF.FX'^5i+BG`pP73dFp;*2lU5UkS]V@Bs;se25FL7AZ!qlGc-ZZrJ$WRPhXc>EK^Su%F=pAlk0bnQ+EYK9?/KF@n(lZ(JU#0-S^7L$@G5`cU>&,E\Wjgj']TCq>*?o%qA;[0hT3NI:8j(a6&TrJ3Z9\iiA>OqJJp5/IQ7I)%"&A0/b3jo2bIcKT[*k>gQJ7RiUWL3`isF`LZD&`Z,?:VgL-(1G6!J)0:WR@/^f#&c^plsg,WZ_j*`UV!oZIi4ZN4q9]jpdU'o/Vl%7=1&:44[mZ8Q*,A;!n3;(Fp?k1dm77c4^d.q9j\+geL5ne&M(+]QtfBpJM9X1#;39h0f^SAZ5qb^Dm8[!F<)r@eToT!8K(^6XG=B%k.rLt[nS*;@cUi%:A=sD"Z9\Xqf'Dn?N_ah-ktX)cip3N-S</>U'A@P!DWYjot=c-`)@dc"8NkVfADI5NVRM2^7mh)_nMij2V'jm%*R>T5h'=H!)lTJ"k-YB;CQU\I$$*)FJ`;mu8h_'[!H[Ll,Hs4;kcW7G(B5<H2+nW-%/YnpjArU=mee\#S>%:\]-:EG?Fl>@N#VI*%--33_#)X@i->kG4"6S#b8&/iSBmo]_%o+dKIEaU8A(XkI+LdeRLC+k'K--G.bqn)>:hN)(]3gA6_nMiJ\Q.-EECp<ZQj[G30pd>L%_La\=XZlX9DcF@tq[05$?+MH5:4A;'_,F1[N\eT\P!/G*j;u[`32U-JU)\"Q["^\eZ%?s_(SQNQS[`bRV@h/icrHQ`m/sL7fN4Sr%=`>iR39BR?L,j9?E6@"]%+9[a@21bu*h3R]Rlr^b*sa5GTmUVbIQ7J"!hAP^Y<DCif[mpQ#57`!@UG>U2u<M8fN6@HT*%3!I1?tH%of7PBb9$_.B>USJ4UPR8`od>J_aI)\c*f&rBqPTM62i]`0)]en<[S=3[Fs/=ht.YQ\+)Jo;qL14O5/4`(cN!M8P1$`*M3G$L@I9#%`pT"ubZtYl2_`M4>bD;D,nE0E!_e@p?iO>rY>um-$#GWmS:Hd_F+E92%fdp>0`\Ch^u[/!N>B=nD%e2s8rh3uN12XpP.BF:.@30l%*!fpkP'akl_q-[6I1D?,Dlf;Lof5:^R!]D5bk4!3'A)CI`Q@9C9$l`$C-[g]"@r#CJ@RoOjq<(PpuMe>$K.pW]j@;d/%*NuJu6CP%PP-CiBHj&NKI2'jEIA<.G+o>4@Ll2sm%+#;#7+%-6M]1Nr,Mos"Z4bA?A$pH+C50?qS,D1p3,-\n).Ih973W>/E3ha!>ZuagArNA%MM=O_2Lr0-?NEd@\/p0IGobcEE"BYBI"2?#8gM:/TGG\R?`(X,KMfCr$1+kaq3;l.nNamadWIjkU<Ge!DZghhbrJF>/N.?0-NaR[%jG,uOUg6In/7tIh'\K'i?>`RIjju.a!,V^QI='WHQ605@RDoGWN^!Tm+1MdeN.APEO9cj6J/60QJUnk&,ll<1c8.1rh%Ggb8r5s'%)q74Moue%M]`EHPNFT07.kJp14Pp92P[`+d?1.on/Mi"tk5$HUWN"pN^^(9'1ih2:!GTAU%"h>:bXK&sc]kT%JkDF4e,n-7>KU9D%O''j@GnjPOO0'6<04Kie'c:cG1P?^s63:K0(4$oRf[B0n%(=5eJ\`*b;n>.#.V/t>$J;@s2B+cu#50sZ\,SPVD-['8oW@Xe5f>11%Lmgbn!@0@3=H'2oQal@mJ5Rkul#,`H0-G"q[#i)!'W8,6!n'F2oue&:TJ2DXVf-p/K)VV1>N<SNLfY9&22gl)877)$*7RY%qDL"?%)7sm!5f>09K@DGd+b9f#k2cfT:k&?u"jdJ#eu*H`JG/Qu>N=%[khD'KT\T3R5Q]t`^kabPF5f/:0[M&J#"6,P1J#cR()!"!:dhi[%/X0VW9OZ`rTN@c"m5J?XR(bH'%7l0/%>`NM"';?OB*L6M<O,"7iGfDA(`*EHKSBW."^Mr^I-)0$aZNM5IL[i=$;_+,X%hLF6/"$b%XmpL@YZ:PPb.XnhF4S6:/,-JA8.,HT<O%hcfIFPII,je5@#LU*?)Ipm1'MItCt5G%H\*cp[t27&o^-Qch^6_Sl!+*JPQ+3LetQ9c%n/$^)],WGLL2`<be)ks$#6NKea(!^,i=qlm_sm**V8j$p)0f]@rRaOH`l*(`kL8M7=+l..&K)3KGi=>7e.%'eGhrqJ]Bbb(2ge$t%S#B7DSr)h"O!_d@6ZFV%8g_GeUcrN%Tj7G-&eb`ejq'/6V;/o4jKU#AQ`U`.V-l)W2DLFpaS_XN\(f=A<%R^\W4RS!"t?D\MOT,5%#Vl)pC0`b/nO.t;cJ^o5^C5l.@>F@j.QMkWem*f6AI7Fs@2Y*U>?n",WnL!C=Og'=o96QC;5pLrbVaNKM'\5nl-ek$r10g5&b!p>%KCXh;Y&^2`OWg,RKGL[06CoRM)58d\i@NL["rIFS11UOHO?cNEO]"VM_Sp_P9AO0@6SK5Y@u5RU(=H*p-j(og0e6WYS3Y&L8D9j^%_]Z9-@9Q/*a3b5n([4>\.^MYmS\s\fPm_jK1fq4!%j43X0*\SRfpD21.O1AVf8\]u<$BnmR/C3.<_h5.N(!M:pmP5/;\<;@cp=Vc%AUq"FbYS?eA6=hA(^_&TOVB=$X)pWNLO^j_dH2o;3^jIWo6g*@b4&ChZ?e*]6QQmX(_nA@_I`=?&9f?mFTessb_^k%F^*VHm<':>%AbVqAKeZRC`ajj9`C_-Q(,M4a-GuS4L^Wn#==M.u>S4t2SB>e#_[L`174a3):>sD(gJ;Ba=!khDoVOZ4eKq(J'e\B7FfqA_WQLEP%7b'EpP$,%prg(Vp``OQL<B#Y.R[PEkkpN-qp*l<m[oLIc@[W6b9gYJ1q1LIpPpVWuPj0+*1CRd<?n?*Q)lbOPGE@+XrCu8uVMnr\%_i%:XIm1YM'[*25le.8V`<uO>)XC#g+X/6@J[%UEXR*SD3HLkN$E4/<WRRYAlBk7_h+@O%!3*%0$3?SPPO)*cECggT78cC$a'$6/%6&K^QVs"a9gOm/[Gq*054I*OI)39XhFtD)nc[a/lm1f@h/GDEg?d8fpHujs/KSgCW4BA.u(!7Y`fE(g&<qiVNqGb_HR-:lC4+El[%Vo?!ca#cAd%^lne"#;3(12@-L4+F=+MpoT(IkWKUL@F':_<LCMhX9M4X@9!)[i5e,NrE%$S\i_i7u?L_U4Qk?3[RadM\,]W'>`k7%]`-Sqe:7GXiqgb+R6krU.AU%:68i?]^G6:$_CQ\*(u^"a((QjjIdY?uOT0NE:gA8bi`D^<H0$KZ!Cd;)#g`J6LY!kU-AFQAo+1rl%e0Q$dMscQUmF0-/_8:.6lU&df0\&[knHAQ7UQjmFW=buT+<_<u]J:N3=\<m6P=RdP<*Fqtf:FcI,ntG>EMO+cUBi3S;Lhr0J5RR'%k(^7i+`b=k_)<b//Cc[-9R_DB6>GGh3=i8D!D/O!7f]omZDo4%JW^UbZte#mEpY7'J2X9qh,7AWP"7-be2+&B#RkBDKXi6XFK4+L%;ZLY7D1.&R5+oSOK0lW,dWodOJ$c/I!E?\T,Q[bklnjZWm!Y/47%E<-2M,7'jr:/&]-*5dPtILJ4sL*)6mBha.rbPXMgW95_%ItX%YJ*;2^[Z>HK>KTGp-I&kodFH@kfTRFW(@@-2(/H_>)aF7Q-u0OO]n,&8B@J]M)'1dTXBSQc:&0L6qWgc'Uel2qPlls9EAl/C:+KX%q]K_UK0n#sdjhenO"IN\Hk<`r3@KL3dNX;_Xi1Ro.^j@>>A/^]fIG!FQa!;T-GN_WV+^no!F,4+$@@@T(_d1,_I-48>8\-p^$d-2%\M%0B)O??O5$Ztt,%Z%>Ed3])*W1V&M9JAP(Q].?'tg)g85sQ."<sT`J3hd!^dnoq=JAKJX@f.nO8r5E1lSA4c]FGJBpVRe.$.DI%ieU8?[$F=P_XJV$pKGI]`lj?*@/%l=AEW"3LI@8B`*B`l$&-mJNu!9%N<*=bTTEi'BIu\=pbAL0"-XTNjA&;q=G5qD.l-qN=t4(j%p^-_pLS'b&`fDrmbB+uJ%X_X;O#nNi5/OV^"+_"pr\ND(M+NQiet3e4,Tp8Lq<9(i9uGV#"U+a!+s?32J.&IiZUAogBb'IH16Urj%3EUsr@9=S*je9(E7%EbG(*':c&@o[.iR!oS.,3jt/&VSW]!_Ku$NFm9L`lSd%2"M<X4"`8+`m!nN5SQ1QE8%!B[[V(M'tMs8]4N4%>Te*_b`Ku$-SakJN,h@U.-Hld"k/,YDl@SM'`\%'7&GYWK;(b@gM8?^i5g^i`'Y.V_'DCC,18k[70^TJX=-B@"ClcmqjNJ^6?);S%.^9C%]_$eq;*aW$>=5JFJhPH[aDRo\_-uKI(`\ES/UBrsb^M)\=r8PrDMoi2#)C4<.+)p8/463Ma(3\1,UP[;;6CP#"(9D)jU3&-%^gVXaUOFHPd&tRMm'LD?ABE3L-n3N+Y41sk=W8Zl`Xb3IQY<t'm>WYg@`D-*Tu@UX,*O6Dca#R*>a_K<kM#4">/#O!J@jNI7t"c(%L`\G%&CW6s@hkZ1jcKS40g.9W_l!or:m7$;?%A5BJ;3bf#&)!VaT.<lU7@Do^O-&q!GM.COEr*&fH:?\3KVJ"QOQi2(SMYO6*aVS%IHgAJrNFs!Z':2jbcYoRH:AK3\WSC>UpbM">9n&$!TUW_<1Nb2(aS'P6eTOQHjVai%^JY:-&PSqgo"&n-7SU53k[6(L[i*e;,SM.%HU^R2-8q5^(1C,oN#>NFNLN!BR*;jZiBAPQ&\FKj_u^Uo$A9mD6:3o"*_OrC\TFH!3Ccf/nc^]N0\*U.l3Sg0B'1'B.Aq?W2\]@`%9'6]p8QpBmXh89a.MZWqA6CD$g+4\pHH8oeYZ2$4W,8SWFj@7EX\r7jL1TF!Auh/&Z)po/2WI>Sr*p<u*_u:b=-82APq(qjin@k=%F!f`'?<5&uY3b=SA&XR>TNTCY(e]3L+q]+%L_@?k%L&]>Zrr;(hUd=-Qb[a%5&XXdJkdQ9nKfagheS5f&t"oB8EU2b:jsp+$K`:9%10!-2MuE2N=9PIVdC*/[bpcK-d"PA^U@f6.$trMV&oB@W>+!$Ya+0JYlA7=aMM[q`Se_s+P`//rL9t?;.qK'\%A9hAF4CN&QY(;M%2q+.eQTHCBK,>PSjpF*$5G:VU0[nBIgWV2nrtM:SOO.M*1E6WrXb?m),pUjK+chGHhb':<OVXTkhor+XGWE,uVd,]o7%BdmO=8RP%2pnR\@Lk=E&5_C*2(/OuTGHYs3":iq@VF>K=oc)c4qfcUU>4*OQsZ^DKWLCe5V57'[UiG\U^c>RJ_FO8`E)D:.j8hAV'E4LKbo.N%PgG5Q"D&<Pbf<aVcC.?q?t0S:+`(jEPqiMZ"`2^JVWnJj?q_;;nA'YU<lS*TBST?L^t-X90*Yj$D1^S-9T-iHc/6Nt:Z+"r1Uon`%L1QM[LDqT^M9?=\6S'j+A\0e%3DrA987JE.A;N=HlVb:Dnc`2F%-mMrgtoNUrX)o56'Oh#d]mu5k!g(H2sS9C7R!M=RZOYZ&8Z5k%LH@ZTVioie6kUHT\XtD#A9.+)0-E4s\3@1P#JlaNR+?/QZ,*,(mDdB5G)aG%]-JVE=(lX=>mlFU3=M:"">:nAAU'3Q-BiM3irr/^%QZKoh@<ii3=J+^B2j+Z#Qo;(n]Tt+d/J[C[]iKJ<9J>1.l91F->d'8,ZBo+?p6$buEgaVc8V_#J8,/OC,NDu[?bfs_?#@`n&*sK]%9Uf'B?V?\dJ;0#c!Lf^1%FF=<`$^"nV!J.><WQB]!9Fsdf)f,jNnh5<DmarnBE;f>q;7c7$iFr$Ifo`JHh"j<+/U(<A?3W*Q>g:c%D8qDh^On%9[6Q8U`E:dRE;h4bA;l<[BtLaHSOP5d9M:J(iQc`gUKW#BJV$j]ThTnrjY.C4Frak)@-UpGH.-\YGn38Y(h.7iZ!mmH%dJH*Ws88lZeS1c]"_)p/@8Z<',(IXVXJ;=U&SY>q6([>u$R\Op+[I9@IBKu9AoDJ:;5)hESMFEZd=@C1P(?G-oKrq$*9L+!P[&)g%Z8.c9%kPmMYnAk<d_sgaoE'()!HoN/dEZ!IBn8%8Bl^'_'*4qJ!2cIl0jFfS$1bTsaCqFNVP=?'-n#hG$4WX:2CK!L<4(,ie?sf^%>:P06H!g1OZedYJL^T$>K=J3Gig;k"p8!Ur"Tb;@Dl7oa<(I90)9o$D+JPhmQP.]eMK[nhRIbd"k?8RZ/S0hL&ho0!Fd%8CTO%r&%^]P#1_18fI0Y#aaE7b6<atdkCGbIl`MrkpH4RaGDrs8OX3<cR*P"`8k4sM4kFTb6\&cQ;)JfKSg_?g]FOpmlp)3Hr\hb;F3$;<uV%!5><N6)ThjhD9-NK;6Bk1:fU[7:P&:c]AnsgZ2+%.-NKUDGitmq*cm#150jX(k1dspDS]'8\s-'!tU5th)]%uK>_KP-kP=Y%,qnZ%K@J:X"9]bj.Q&\3K7hAO%mu+YC$^[MI^PJ6R0%U7Gj9VHlEbpAd_P+YpHb&@4atgt#Y;K*'),`_9M4#oQOtrof4FO%7?dr\?D70*%eGQZ2]dp2=_Rf+^Y1rr6hRiR/>d_ZU#2[SQP3E\t"#i!\U5Ug-=h1dco:Lo-[s#)'2#fBf>^%&[3-^nabhrr@EYi[AkG5(T^+]p(%_f0Gtc+VHd=#LW*EJtDT,E&fUVqsbc1iBX_@o;2:jT$"_>0`:5@*6.4SC*!_2%**bSqC9:hG^toU8sS5J16#J[Y*_6@$2"g7D&2Y%FWejX6U=U[E/6"47K.X2=]sN_10Vh'q<B:7laq\$!S;P/Yn34G@>PedGe_W=Nt&cY=49GkDh<u$^?#<`XGDUT>g/@5lXDEUW%tRX%CP$EoV.cX@m2O%E63kc:cjhbJ1nG\7B`B,%;E#&bRh-6'OOAiV7RXC:[$D-6DdZ0cOA<9*7hg%C&o'-&8r5s')q'?6Xct9E":13b%g.jeWpQ!"A:Ch3tR5nu\r,@`gh>@SHjiV]M#n2uUW'D^M>"aV,2$gOIi"mmS*$eDd\]e_A!eXVi@;\UDk-n6cJD#J+g29%L@.s0(%GZ_()-KO9KLda9eBa5P%87V4h6)'lS3#>1`lJomO&dfoTQm36BarN''5Uhg$Etd$dNqr@k'POk(]\8B-qMge.HY6+'BmV1$H^"b<%'S0aQmD`.W-HSEtTKkPjAaV@ZEY/:TQm9D2jM_:+P`e[PL1?_])AI93PT(=),,Er/X^@rU[",NpXucCZD%PmSe-qNJ[*m$N<hUOQ%&@;f8dQu6sB*^C-qWL11;MA066]5_B'!sVYB-q;+Oi]95<8a)l5V#+#[W@J#fF#>Q!Wa>JnDDDJ8+o%>AklGEl8JCH>OWAq4*7Ha%fV:4DLq_,^rg(tg">2*F)-iQ`\eM:n1$OgZE^cEFkEYTA8goY_[;"FQL5`kMNGBHBiGmnp,BB2m0Of%"7UcHZnQ8ngM9&p(?t+1c%=e'_4Q+eRi1$OgZE^cEFkEYTA!!`MUk&gJ#q!pCM]:$YCL*!B7V`q4U&rY@!1*h$s-BHiVoF/,8i*kJ@V+9rW&sFBY-s'".o=L:Y%KsboN@;UV*h`*[0A*0N&n/<0B]\mq_j*4:>2C'rG\Fs%]]L)5P?$P5]-[J>t0tddoKlP>,H<dXRRM6buqrJ3i$a?\Tp@^f.5^o,Z%$JfL>U'f2-bV_@9N3C&8;8.=0o?Fn/^:DSd)Oqu<CN.:Q?foi_I]]-h'aB-_!mUkmC/_l1JJP3A5lCoPp\1D2e">`f3RrRPR.U?W%]W.&AeLl<<3bcb-839&XeQF(/F;da34Teb*3*M96,aUnIOtHi&0kr.0m90Qi6:%LMa&X2mjVP=(aqVkP0_X']ce@+gD-Of6Q*@W+%=ckIA=seM?>+$@H=cpiQAr["0Su"]qK)6a?7aD8WM/r1$6C:>LTV^_`-oU9_1hKWe$OI)P,UsFdi7MEaF+KY9EEDc96R'Z+C8mFH%!%e2Qp0$"]*baN,7Am'@#>sn"&4sVK,K]kM1B43#UkBeJ;M,O&=-WFjQ/RC35eoVjk]8[J38kcVH"!!4)kCr-qfk`DC+i%JAYj%]%;Y4EtHL!P2H=AK"R(S.'Gq)G"jdmbINT6;R>OWM)3.RIibQ&-`En>[ckG5(T^+^E66ZMKn?[O`35%qM+ZHn]qf]EQ[iFejE<dour%hU2q]j0&>3M1n"YXo=8+>hW>ZbDa'._NUCX)bkeW!pTjPC+fU7U/&6\8h4[BOQD`^,H3DT,aJ+eb'S,>-"tCUj4^HC4KR[&/-Z1l%C+fd<@Nd9,_dY;N#(NPi@.-2&0CJ6VPBTGfb-Y=B2S4dW,LRlm\-jdM?AZi";KQ?hp.=SbdFD*o%#jaT=fh'N8nfcEOsJRQN'nh!%-XNMN'M<V)?<(GP0@BVfVh&i5Fu?`TEMi)D;$4g4)C.o=/8f@ggFl($WXj0Cg;dZKhb*i?*/i4h]3ksWqqs%PZR*0U>6Kjq-Vb4>%#uC6Y19H,&fqM5o)q2f)SR+TR*:"uZ#)lb?7>]:nC;=*NjTmOL0WfcuV%66Qn*g]CdTG2S9!IEcUsNTsYeNrG<,lmUV^+CPkJag;%#+jiU:^n]kQXF=36pO>@M&J'cdNFCl"Y96_WH7<j,B.,nCpf>6oG\I!p0eXabOgDH84Jc4I%<g,'T!24N(\XLba-?)X^S<SdEeGF%Eu^NC_APAnA9oMBTRu]/"*9#+bb`\%m5UsT^_OXbpE3*NC^oC4#[:_?5uZa9#nM)#RSn3'9VY0P#X)>n`QJUW@Ll1Xa;NBid:!hZ%PElcKZj+8b!DNSh[?%B\KMsk5'"I8C?2n6O<I.kBr*)8u<L?iIru!noAt8-$?>:H4jRtR4]IW&$G=l%2lPQ\C^V[fdLOb)BUCIB!%!\:+sj'YFdjju.aTQe7,?CQX#IXMtiWRA#-a2>d!DO1DNJVDe4,uR;BENr*#N(lDm(47O?>1*a"CIFS1R,Tm,I[L7L"(l=IZ@+ER%M>i=2S8@2IZJ\_2G5+lH&7nHXiaidqQqaU)CuS<uJ1?>D-%V=ZlEdgR:XAlK$B*bk]\<:"^X7(8(IVtkTJ`J!3#loeg8)m=-6>_d%o2;a!7';'L/RKu4Z`I?8:Xg^kVDdtC>08L=[?WKNU]mRE-#<AXD%Nm<Bn`ZHU;D[$o!M&SYY@7"efY:,OJ&[A/,#Z*XspEYD;t)o%#$RtE02mC%J6$OL[O8KbEuUM$^teoqb\_:e-N=6>6R>e]a,HXa1+)`>ngGpLD.\-8^pnA>KG*o!KGl8anY@X[(lAsnk6*pV7>3e+%7fFT.@!NSU&NLOl/Uh-FQlF'#g.+ka?h5D;H[.+84Yi<YSgZS+)=E6T!bLpJ.STQSFO+tZA3gSLWG^cC!@>,m4iWIc+aQJ%$mH,t%kEa.AN=r,Y)B4q%0!r"$ngT59EZp*>r5&SM"_cFM:YHIcN_:PC[JMS1:dcpi/4&>&/=/]q9]j*SRZr2d6DF#Ire%e=MK"G0+CH;p%AA&Qd:6C;(>Zf>N:8^W9[%+`bQU5<DBgf4G)<.aNa>8HOer^UgH3X<NOVSRKj+AcQQ?L97&?acH(C7@W1VSP+.InHHRf%bk8SArm%CTm2Qqf3`eI7I%U/=_hN`MQtO90?tdArT;uJ*7dB$q+8i^hmFcmQ/[=&&Lc*Kelos)=KlRWR>#:<=0L\(3!<$Z.BY%Y4EdBg,%$,%:hH4&fb/eNB:K3pVio2LEFmC-ac`[!TWYT)ljHo4FP57Z$Xq^)Q@32ppH'u(L-C)acZp(h[5;B-+/=EjGl`sj=d.qbW"K+@l7VG"%B7L/dp_G06V9@(2cD>k./]k;A$kf/=3Q0l308LEI40mn;7\7)!>EY7gAo#1AVU9+NUkmbF,cC`[FR1h<^=^5+JEoI^?nR.f_N&+E%@AY#V#IS.K3A7SSZ`RoF*jAHBNF+U7P(4mO!%2&q>QDro,0rf4'0!]N$!4o.%H*;u:'9O7%EsM+;Q8XCB^j1WJ/*T7%p1.D3=*MW%`B;;#P07?q!b@2\a`;+b*Ac!h`&[#E"m!KI3;(2tnX9hC/]e>'29n$t=?CYuVW._;>`C]kal@Q=2+2WCJsqu>ObR&5JX!Wb#AQ:P%`\9lF9]et1&iKIG=KIa']l=\#(Vj)WHq>FN8'_m)p"M*,-^o$i:WZuKWuJR7^r`<We%-#_TA:m=1_8WOX\k$Y.#A\?ekJ?.')bk(%M?7U/_BulESgZ2ESF_QubnfK"-\Bnf7tE#p4Ak$nLaPNZA5`OW$6iQm'X9031C]iaMq_La4."oWGqa,kk@q8e=0sJi#NB2]a"mHd%+_#EC;8ckNC1<@T@3uHl:@k?CBt]\SJN/SK8`cgu<Gp;'bo#i`3]OSO3`l*bS*@02$mTtuOh6GGg^l3!@0)IM2LomSXNDf!8emO"%/EBYu'9h42(!eZNbO$,I#iiGuKROR7@4B30Vbst=@jZ7E(>oka1D"qk54H*f^*[u1V;cHI(KrMV/\$m[@'K=iR".f&`[MYKj)tiL%V@$?RAmhIq>f!GeYXuZpNId@PFrEDI'OW8uJsDP]7BZuJQ3f7G$*ufSkul6Si+?qcP=bE%WfYj_1>Ssq5X^gKa5!aeh;?a&d>B\P%R3Z:0*f;_0"%p<P:p1!K-6T-+;HTRGmk/4Z")cVo;QRoB]MN-tBWb4N!uVcnQpAY.UE,>XA?#f;;%b'S8B)'d!VEaDKtZ:;qc"7Q%C/-E(n*I\JfKL!&bF#5m[=dk;^I=YIaSb#e5:@)F$sm0u38NEGgYFuC@SJ^t2]@S%\Suk7rUbh=,.[OqdNOgaN+4[^Dl6aXRW2KI%VA.gFAjgW#NRPP.M2=bSjqfbRc-*J1VKk6rH"dEPCirmVKb5VF4&<i1Ur<U]8t?0DOsgF1S7rYE,[f^UM*,0<,j7'=2^H9<P*S_.%_FcsbN9V$]4Zc5jNS]>c(lQ?r1c2uW`Nj[2Ka9a7>bE#Y&G%<6XVjeB8C2(HELS>g0VS]Y<Qi<o0`m=j),$^6>mME,;$"''Js@Yp%&dZSBN0"=O8m:SE"LJ<=eE++;9;GUSM/bg=:E$'#,aQh%KoCjGY^dKB`?69'6<HU+FKLb&S/G0*(/,?E8r&7m+\IZU-uI"%gdE.h%S4ni0q?Ch@+Q0-&65%KllDTrE'.C#6\=++5*Ic0RVguEPMft\j=VK+,JqPC%$8pMr4GB)+ZCKsnb+F"]JFYT#YNYUH#)=^MV4kt'%&B'qAfFq[uN&tarMWQs2UFO*="VrV=Te;7GAJCI&"')5BfFsNQ;J&@jYQBLn-nI_oBq3,iSk)0.l6rap69"pLf\m+Zg5/=b=>J-A%J:E0l+\Ua`Fm?4X@#X$J,pa47Xj*.K!R23R6p(]h+XVl*ZKMqDOEh0h9o>r>$Z!O3#hLsDlKqNU1)UhoO;ZWfMJC!1[PO>hS&fd?%&LX<L((P=.cql^?M%OFB'b558$A]Ci<%R0bnm\3-r/r8%5QNhF344`tq>f^Lp_.?glObP29X,\tCaZ\@'E^G7Tp3213ugj!Vl)'U%`Pg$:V+&ITTFN/:/E@D"K"3TH@=D'J[8;EE$/hk$.b*'Ula]uPZsn*e'^61S-<$R/F.5nok@V#V-_fF#HjYe-b;kJW!=?(M'bV>b%KsK/r'M+L>N'U%#X*!A?Ga6(F"CC1kj&LhWjLTfD0tOTTD;7A.QHc/SC5e0:h>FkUnp#5"Ds+Y#ojmYY43c$&K>UVbZ6Sm4oBYql%M<I`ZRO?u&rrS%%"Wng,^&MWRnc&WQJjTe~>%AI9_PrivateDataEnd